---
description: django
globs: 
---
RemoteUserMiddleware: Authenticate users via REMOTE_USER env variable. Config: add to MIDDLEWARE, use RemoteUserBackend in AUTHENTICATION_BACKENDS. PersistentRemoteUserMiddleware: for login pages, maintains session. RemoteUserBackend, AllowAllUsersRemoteUserBackend, CustomHeaderMiddleware: subclasses. Security warning for custom headers. Use csrf_token in forms and X-CSRFToken header for AJAX. Decorators: csrf_protect(), csrf_exempt(), ensure_csrf_cookie(), requires_csrf_token(). Custom storage class: subclass of django.core.files.storage.Storage. Instantiate without arguments, settings from django.conf.settings. Required methods: _open(name, mode='rb') returns File object, _save(name, content) returns saved filename. Override path() for local storage. Deconstructible with @deconstructible. Optional methods: delete(), exists(), listdir(), size(), url(), get_valid_name(name), get_alternative_name(file_root, file_ext), get_available_name(name, max_length=None). Use STORAGES setting to define storage backends. Access by alias: storages["alias"]. Custom lookups for filtering. class Lookup: lookup_name, as_sql(compiler, connection): Returns (sql, params). lookup_name: How the ORM interprets name__ne. Lowercase letters only. as_sql: Returns SQL string and parameters. Uses compiler.compile() which returns a tuple (SQL string, params). Field.register_lookup(Lookup): Registers lookup for a field. Use decorator @Field.register_lookup. class Transform: lookup_name, function, bilateral, output_field. function: SQL function e.g. "ABS". bilateral: Apply transform to both lhs and rhs. output_field: Field type for further lookups. Override get_lookup(lookup_name) or get_transform(lookup_name) for dynamic lookups. as_mysql(compiler, connection, **extra_context): Custom implementation for MySQL. Custom manage.py commands: create management/commands directory in app. Command class must extend BaseCommand. handle(*args, **options): implements command logic. Use self.stdout.write() for console output. add_arguments(parser): adds command-line arguments. Example: parser.add_argument("poll_ids", nargs="+", type=int). Options available in options dict. @no_translations: decorator to deactivate translations. BaseCommand: base class for commands. Attributes: help (description), requires_migrations_checks, requires_system_checks, style (colored output). Methods: handle(*args, **options) (required), add_arguments(parser). AppCommand: for commands taking app labels. handle_app_config(app_config, **options). LabelCommand: for commands taking arbitrary labels. handle_label(label, **options). CommandError(returncode=1): exception for command errors. Usage: python manage.py command_name arguments. Custom model fields: Create custom Field subclasses for specialized database column types or Python object serialization. Subclass django.db.models.Field. Methods to override: __init__(*args, **kwargs): Initialize field, call super().__init__(*args, **kwargs). deconstruct(): For migrations, serialize field. db_type(connection): Return database column type. from_db_value(value, expression, connection): Convert db value to Python object. to_python(value): Convert value to Python object, handle correct type, string, None. get_prep_value(value): Convert Python object to query value. get_db_prep_value(value, connection, prepared=False): Convert query value to db value. get_db_prep_save(value, connection): Convert value for saving. pre_save(model_instance, add): Preprocess value before save, return value. formfield(**kwargs): Customize form field. get_internal_type(): Emulate built-in type. value_to_string(obj): Convert value for serialization. FileField subclasses: Use attr_class to specify custom File subclass for file handling. Cache file attributes for efficiency. Custom template backend: implement BaseEngine (django.template.backends.base). Must implement get_template(), optional from_string(). Example FooBar: class FooBar(BaseEngine): app_dirname="foobar", __init__(params), from_string(template_code), get_template(template_name). Template class: class Template: __init__(template), render(context=None, request=None). Debug integration: Template postmortem (TemplateDoesNotExist): backend, tried. Contextual line info (template_debug attr on exceptions): name, message, source_lines, line, before, during, after, total, top, bottom. Origin API: template.origin (name, template_name, loader_name). Custom Template Tags and Filters: Extend template engine with Python. Code Layout: templatetags/ directory inside app. __init__.py required. {% load tag_module_name %}: Loads tags/filters. App must be in INSTALLED_APPS. Module: Must contain `register = template.Library()` Custom Filters: Python functions with 1-2 args: value, arg. def cut(value, arg): return value.replace(arg, "") {{ somevariable|cut:"0" }} Registering: register.filter("cut", cut) or @register.filter(name="cut") def cut(...). Name optional. stringfilter(): Decorator for filters expecting string input. Filters & Auto-escaping: is_safe=True if filter doesn't introduce unsafe HTML. Use mark_safe() for safe strings. needs_autoescape=True: Passes autoescape=True/False to filter. Use conditional_escape() for escaping. Filters & Time Zones: expects_localtime=True converts datetime to current time zone. Simple Tags: django.template.Library.simple_tag(). @register.simple_tag def current_time(format_string): return datetime.datetime.now().strftime(format_string) takes_context=True: Accesses context (first arg must be named context). Can take positional/keyword arguments. Can store results in variable with `as`. Inclusion Tags: django.template.Library.inclusion_tag(). Renders template with context. @register.inclusion_tag("results.html") def show_results(poll): return {"choices": poll.choice_set.all()} takes_context=True: Gets context, no required args. Advanced Tags: Two-step process: compiling and rendering (Node). Compilation: Function returns Node instance. Rendering: Node.render(context) method. Example: def do_current_time(parser, token): ... return CurrentTimeNode(format_string[1:-1]) Thread safety: Store state in context.render_context. Register: register.tag("current_time", do_current_time) or @register.tag def do_current_time(...) Variable(): Resolves template variables. variable.resolve(context). Raises VariableDoesNotExist. Parsing until another block tag: parser.parse(("endtag",)). parser.delete_first_token(). To delete a Django app: 1. Remove references (imports, foreign keys). 2. Remove models from models.py. 3. makemigrations. 4. Squash references in other apps' migrations. 5. Apply migrations, test. 6. Deploy. 7. Remove from INSTALLED_APPS. 8. Remove app directory. Daphne: ASGI server. Command: daphne myproject.asgi:application. INSTALLED_APPS: daphne. ASGI_APPLICATION: 'myproject.asgi.application'. Hypercorn: ASGI server supporting HTTP/1, HTTP/2, and HTTP/3. Install: python -m pip install hypercorn Run: hypercorn myproject.asgi:application (runs one process on 127.0.0.1:8000). Requires project on Python path. ASGI deployment. Application object: application in asgi.py. DJANGO_SETTINGS_MODULE environment variable to locate settings module. Applying ASGI middleware: wrap application. Uvicorn: ASGI server. Use: python -m uvicorn myproject.asgi:application. --reload for development. Gunicorn: Robust web server with Uvicorn worker: python -m gunicorn myproject.asgi:application -k uvicorn.workers.UvicornWorker Deployment checklist: settings review for security, performance, operations. Critical settings: SECRET_KEY: Large random value, keep secret. Use SECRET_KEY_FALLBACKS for rotation. DEBUG: Must be False in production. Environment-specific settings: ALLOWED_HOSTS: Required when DEBUG=False. Protects against CSRF attacks. Validate Host header. CACHES: Connection parameters differ. DATABASES: Connection parameters differ. Protect passwords like SECRET_KEY. Backups! EMAIL_BACKEND: Set correctly for sending emails. Modify DEFAULT_FROM_EMAIL, SERVER_EMAIL. STATIC_ROOT, STATIC_URL: Define STATIC_ROOT for collectstatic. MEDIA_ROOT, MEDIA_URL: User uploads. Ensure web server doesn't interpret them. Backups! HTTPS: Enforce site-wide HTTPS. CSRF_COOKIE_SECURE: True to avoid transmitting CSRF cookie over HTTP. SESSION_COOKIE_SECURE: True to avoid transmitting session cookie over HTTP. Performance optimizations: Sessions: Use cached sessions. Clear old sessions. CONN_MAX_AGE: Enable persistent database connections. TEMPLATES: Enable cached template loader (automatic when DEBUG=False). Error reporting: LOGGING: Review logging configuration. ADMINS: Notified of 500 errors. MANAGERS: Notified of 404 errors. Use IGNORABLE_404_URLS. Error monitoring: Sentry for aggregation. Customize error views: 404.html, 500.html, 403.html, 400.html in root template directory. Run manage.py check --deploy against production settings. Switch from manage.py runserver to production WSGI/ASGI server. Deploying Django requires a web server and an interface (WSGI or ASGI). runserver is not for production. WSGI: Synchronous. ASGI: Asynchronous. Consider static files and error reporting. Deployment checklist: manage.py check --deploy, environment settings, HTTPS, performance, error reporting. Authenticates against Django's user db via Apache. Requires Apache >= 2.2, mod_wsgi >= 2.0. WSGIAuthUserScript: Executes check_password function. WSGIAuthGroupScript: Restricts access to group members. check_password(username, password): checks the password. groups_for_user(user): returns user's groups. Gunicorn is a pure-Python WSGI server. Install: python -m pip install gunicorn. Run: gunicorn myproject.wsgi (from the same directory as manage.py). WSGI deployment for Django. Application object: WSGI callable in /wsgi.py, used by WSGI servers. WSGI_APPLICATION setting: path to application object. DJANGO_SETTINGS_MODULE env variable: path to settings module. WSGI middleware: wrap application object to apply middleware. mod_wsgi: Apache module to host Python WSGI applications. WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.py: Maps URL to WSGI file. WSGIPythonHome /path/to/venv: Sets virtual environment path. WSGIPythonPath /path/to/mysite.com: Adds project to Python path. WSGIDaemonProcess example.com python-home=/path/to/venv python-path=/path/to/mysite.com: Configures daemon mode. WSGIProcessGroup example.com: Delegates instance to daemon process. Alias /static/ /path/to/mysite.com/static/: Serves static files. uWSGI: Django deployment. uWSGI is an application container server. Install: pip install uwsgi. Configuration: uwsgi --chdir=/path --module=mysite.wsgi:application --env DJANGO_SETTINGS_MODULE=mysite.settings --socket=127.0.0.1:49152 --processes=5. Configuration file: uwsgi --ini uwsgi.ini. uwsgi.ini example: [uwsgi] chdir=/path module=mysite.wsgi:application master=True pidfile=/tmp/project-master.pid vacuum=True. Fix UnicodeEncodeError: env = LANG=en_US.UTF-8 in uwsgi.ini. How-to guides for common tasks: authentication, CSRF protection, custom admin commands, model fields, lookups, template backend, template tags/filters, storage class, deployment, upgrades, error reporting, initial data, legacy database integration, logging, CSV output, PDF files, template overrides, static files management, Windows installation, database migrations, app deletion. Provide initial data using migrations or fixtures. Fixtures can be loaded using loaddata <fixturename>. Integrate Django with legacy databases. Edit DATABASES setting: NAME, ENGINE, USER, PASSWORD, HOST, PORT. python manage.py inspectdb > models.py generates models. Set managed = False in Meta to prevent Django from managing tables. Run python manage.py migrate. Test and tweak models. Django provides default logging, configurable via LOGGING setting. Use logging.getLogger(name). Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL. Configuration includes: handlers (destinations), formatters (message formats), loggers (mapping logs to handlers), filters (control record flow). Handlers: FileHandler, StreamHandler etc. Formatters: define output style. Loggers: define namespace and handlers. Logger hierarchy and propagation are supported. Configure levels via environment variables. Create CSV output using Python CSV library or Django templates. CSV library: import csv; from django.http import HttpResponse; response = HttpResponse(content_type="text/csv", headers={"Content-Disposition": 'attachment; filename="somefilename.csv"'}); writer = csv.writer(response); writer.writerow(["First row", "Foo", "Bar", "Baz"]); return response. Use StreamingHttpResponse for large files. Template system: from django.http import HttpResponse; from django.template import loader; response = HttpResponse(content_type="text/csv", headers={"Content-Disposition": 'attachment; filename="somefilename.csv"'}); t = loader.get_template("my_template_name.txt"); c = {"data": csv_data}; response.write(t.render(c)); return response; Template: {% for row in data %}"{{ row.0|addslashes }}", ... {% endfor %}. Outputting PDFs: Uses ReportLab. Example: io.BytesIO(), canvas.Canvas(buffer), p.drawString(100, 100, "Hello world."), p.showPage(), p.save(), FileResponse(buffer, as_attachment=True, filename="hello.pdf"). ReportLab is not thread-safe. Override templates in project's templates directory (DIRS) or app's templates directory (APP_DIRS=True). Directory structure: templates/<app>/<template>.html. Extend overridden templates with {% extends %}. Example: templates/admin/base_site.html {% extends "admin/base_site.html" %} {% block branding %} <img src="link/to/logo.png" alt="logo"> {{ block.super }} {% endblock %} Deployment of static files involves: run collectstatic, then move STATIC_ROOT to static file server. Common patterns: same server, dedicated server, cloud service/CDN. STORAGES setting configures file storage. django.contrib.staticfiles: Manages static files (images, JavaScript, CSS). STATIC_URL: URL to serve static files (e.g., "static/"). {% load static %} <img src="{% static 'my_app/example.jpg' %}" alt="My image">: Template tag to build static file URLs. STATICFILES_DIRS: List of directories where Django looks for static files. django.views.static.serve(): Serves static files during development (DEBUG=True), not for production. from django.conf.urls.static import static: urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT): Adds URL patterns for serving static files. Only works in debug mode with local prefixes. STATIC_ROOT: Directory to collect static files for deployment. manage.py collectstatic: Copies static files to STATIC_ROOT. Upgrade Django: Read release notes, deprecation timeline. Upgrade dependencies. Resolve deprecation warnings (-Wa or PYTHONWARNINGS). Install new version (pip install -U Django). Test. Clear cache after upgrading. Install Django on Windows. Install Python, setup virtual environment, install Django using pip. `django-admin --version` to verify. Migrations manage database schema changes. Migration class defines dependencies and operations. RunPython operation executes Python code in migrations forwards(apps, schema_editor) and optionally reverse_code. schema_editor provides database access. RunSQL operation executes raw SQL. atomic=False for non-transactional migrations. dependencies=[] list migration dependencies. run_before=[] migrations to run before. SeparateDatabaseAndState for renaming tables in ManyToManyField through model changes. Consider database routers using hints in RunPython. Handle unique field migrations carefully using multiple migrations: AddField(null=True), RunPython to populate, AlterField(unique=True). Contributing to Django guide. Requires Python 3. Install Git. Fork Django on GitHub. git clone https://github.com/YourGitHubName/django.git cd django python -m venv ~/.virtualenvs/djangodev source ~/.virtualenvs/djangodev/bin/activate python -m pip install -e . Running tests: cd tests/ python -m pip install -r requirements/py3.txt ./runtests.py Create a branch: git checkout -b ticket_99999 Writing tests: Example: from django.shortcuts import make_toast from django.test import SimpleTestCase class MakeToastTests(SimpleTestCase): def test_make_toast(self): self.assertEqual(make_toast(), "toast") Writing code: def make_toast(): return "toast" Documentation: docs/topics/http/shortcuts.txt. Add versionadded. Commit: git add --all; git commit Push: git push origin ticket_99999 Create pull request on GitHub. Getting started: Introductory guide to Django web framework. Install Django. Requires Python. Use latest Python from python.org or OS package manager. Verify install: `python -c "import django; print(django.get_version())"`. Database setup optional for large DBs (PostgreSQL, MariaDB, MySQL, Oracle). Install Django options: official release (best), OS version, development version (latest features, potential bugs). Verify Django install: `python`, `import django`, `django.get_version()`. Follow tutorial next. Django: web framework for database-driven apps. Models: Define database layout in Python. ORM. Classes like Reporter(models.Model), Article(models.Model). API: Dynamic Python API for data access. Use model.objects.all(), model(...), model.save(). Admin: Automatic admin site for content management. Register models with admin.site.register(Model). URLs: Map URL paths to Python views. URLconf, path("url/", view). Views: Handle requests, return HttpResponse or raise Http404. Process data, render templates. def view_func(request, ...):. Templates: Structure presentation. Template inheritance using {% extends "base.html" %}. Tutorial: How to write reusable Django apps. Package app as Python package using setuptools and pip. Create pyproject.toml MANIFEST.in README.rst LICENSE. Install with pip install --user. Use venv for isolated environments. Publish to PyPI. Django application registry apps in django.apps manages installed applications and models. AppConfig class configures applications. Attributes: name label verbose_name path default default_auto_field. Read-only: module models_module. Methods: get_models(include_auto_created=False, include_swapped=False) returns model iterable. get_model(model_name, require_ready=True) returns Model raises LookupError. ready() for initialization tasks. apps registry methods: ready get_app_configs() get_app_config(app_label) raises LookupError is_installed(app_name) get_model(app_label, model_name, require_ready=True) raises LookupError ValueError. django.setup(set_prefix=True) initializes registry. Stages: import apps import models run ready(). Troubleshooting: AppRegistryNotReady ImportError RuntimeWarning. System Check Framework: Validates Django projects, detects common problems. Extensible. CheckMessage(level, msg, hint=None, obj=None, id=None): Represents a check message. level: Severity (DEBUG, INFO, WARNING, ERROR, CRITICAL). msg: Short description (no newlines). hint: Fix suggestion. obj: Context object (__str__ method). id: Unique identifier (applabel.X001, X is CEWID). Debug(msg, hint=None, obj=None, id=None): Debug message. Info(msg, hint=None, obj=None, id=None): Info message. Warning(msg, hint=None, obj=None, id=None): Warning message. Error(msg, hint=None, obj=None, id=None): Error message. Critical(msg, hint=None, obj=None, id=None): Critical message. Builtin Tags: admin, async_support, caches, compatibility, database, files, models, security, signals, sites, staticfiles, templates, translation, urls. Core System Checks: async.E001: DJANGO_ALLOW_ASYNC_UNSAFE should not be set in deployment. 2_0.W001: URL pattern route contains invalid characters. 4_0.E001: CSRF_TRUSTED_ORIGINS values must start with a scheme. caches.E001: 'default' cache must be defined in CACHES. caches.W002: Cache LOCATION matches MEDIA_ROOT/STATIC_ROOT/STATICFILES_DIRS. caches.W003: Cache LOCATION is relative, use absolute path. mysql.E001: MySQL/MariaDB unique CharFields max_length > 255 not allowed. mysql.W002: MySQL/MariaDB Strict Mode not set for database connection. mysql.W003: MySQL/MariaDB may not allow unique CharFields max_length > 255. files.E001: FILE_UPLOAD_TEMP_DIR refers to nonexistent directory. fields.E001: Field names must not end with an underscore. fields.E002: Field names must not contain "__". fields.E003: pk is a reserved word. fields.E004: choices must be a mapping or iterable. fields.E005: choices must map values to names or iterable of (value, name) tuples. fields.E006: db_index must be None, True or False. fields.E007: Primary keys must not have null=True. fields.E008: All validators must be callable. fields.E009: max_length too small for choices. fields.E010: default should be a callable. fields.E011: does not support default database values with expressions (db_default). fields.E012: <expression> cannot be used in db_default. fields.E100: AutoFields must set primary_key=True. fields.E110: BooleanFields do not accept null values. fields.E120: CharFields must define a max_length. fields.E121: max_length must be a positive integer. fields.W122: max_length ignored with <integer field type>. fields.E130: DecimalFields must define decimal_places. fields.E131: decimal_places must be a non-negative integer. fields.E132: DecimalFields must define max_digits. fields.E133: max_digits must be a positive integer. fields.E134: max_digits must be greater or equal to decimal_places. fields.E140: FilePathFields must have either allow_files or allow_folders set to True. fields.E150: GenericIPAddressFields cannot have blank=True if null=False. fields.E160: auto_now, auto_now_add, and default are mutually exclusive. fields.W161: Fixed default value provided. fields.W162: <database> does not support a database index on <field data type> columns. fields.W163: <database> does not support comments on columns (db_comment). fields.E170: BinaryField's default cannot be a string, use bytes. fields.E180: <database> does not support JSONFields. fields.E190: <database> does not support a database collation on <field_type>s. fields.E220: <database> does not support GeneratedFields. fields.E221: <database> does not support non-persisted GeneratedFields. fields.E222: <database> does not support persisted GeneratedFields. fields.E223: GeneratedField.output_field has errors: â€¦ fields.W224: GeneratedField.output_field has warnings: â€¦ fields.E900: IPAddressField has been removed except for support in historical migrations. fields.W900: IPAddressField has been deprecated. fields.W901: CommaSeparatedIntegerField has been deprecated. fields.E901: CommaSeparatedIntegerField is removed except for support in historical migrations. fields.W902: FloatRangeField is deprecated and will be removed in Django 3.1. fields.W903: NullBooleanField is deprecated. fields.E903: NullBooleanField is removed except for support in historical migrations. fields.W904: django.contrib.postgres.fields.JSONField is deprecated. fields.E904: django.contrib.postgres.fields.JSONField is removed except for support in historical migrations. fields.W905: django.contrib.postgres.fields.CICharField is deprecated. fields.E905: django.contrib.postgres.fields.CICharField is removed except for support in historical migrations. fields.W906: django.contrib.postgres.fields.CIEmailField is deprecated. fields.E906: django.contrib.postgres.fields.CIEmailField is removed except for support in historical migrations. fields.W907: django.contrib.postgres.fields.CITextField is deprecated. fields.E907: django.contrib.postgres.fields.CITextField is removed except for support for historical migrations. fields.E200: unique is not a valid argument for a FileField. fields.E201: primary_key is not a valid argument for a FileField. fields.E202: FileField's upload_to argument must be a relative path. fields.E200: unique is not a valid argument for a FileField. fields.E210: Cannot use ImageField because Pillow is not installed. fields.E300: Field defines a relation with model which is either not installed, or is abstract. fields.E301: Field defines a relation with swapped out model. fields.E302: Reverse accessor clashes with field name. fields.E303: Reverse query name clashes with field name. fields.E304: Reverse accessor clashes with reverse accessor. fields.E305: Reverse query name clashes with reverse query name. fields.E306: The name is invalid related_name for field. fields.E307: Lazy reference to model, app not installed. fields.E308: Reverse query name must not end with an underscore. fields.E309: Reverse query name must not contain '__'. fields.E310: No subset of fields is unique. fields.E311: Field must be unique because it is referenced by a ForeignKey. fields.E312: The to_field doesn't exist on the related model. fields.E320: Field specifies on_delete=SET_NULL, but cannot be null. fields.E321: Field specifies on_delete=SET_DEFAULT, but has no default value. fields.E330: ManyToManyFields cannot be unique. fields.E331: Field specifies a many-to-many relation through model which has not been installed. fields.E332: Many-to-many fields with intermediate tables must not be symmetrical. fields.E333: The model is used as an intermediate model, but it has more than two foreign keys. fields.E334: The model is used as an intermediate model, but it has more than one foreign key from. fields.E335: The model is used as an intermediate model, but it has more than one foreign key to. fields.E336: The model is used as an intermediary model, but it does not have foreign key to. fields.E337: Field specifies through_fields but does not provide the names of the two link fields. fields.E338: The intermediary model has no field. fields.E339: is not a foreign key to. fields.E340: The field's intermediary table clashes with the table name of. fields.W340: null has no effect on ManyToManyField. fields.W341: ManyToManyField does not support validators. fields.W342: Setting unique=True on a ForeignKey has the same effect as using a OneToOneField. fields.W343: limit_choices_to has no effect on ManyToManyField with a through model. fields.W344: The field's intermediary table clashes with the table name of. fields.W345: related_name has no effect on ManyToManyField with a symmetrical relationship. fields.W346: db_comment has no effect on ManyToManyField. models.E001: is not of the form app_label.app_name. models.E002: references which has not been installed, or is abstract. models.E003: The model has two identical many-to-many relations through the intermediate model. models.E004: id can only be used as a field name if the field also sets primary_key=True. models.E005: The field from parent model clashes with the field from parent model. models.E006: The field clashes with the field from model. models.E007: Field has column name that is used by another field. models.E008: index_together must be a list or tuple. models.E009: All index_together elements must be lists or tuples. models.E010: unique_together must be a list or tuple. models.E011: All unique_together elements must be lists or tuples. models.E012: constraints/indexes/unique_together refers to the nonexistent field. models.E013: constraints/indexes/unique_together refers to a ManyToManyField. models.E014: ordering must be a tuple or list. models.E015: ordering refers to the nonexistent field. models.E016: constraints/indexes/unique_together refers to field which is not local to model. models.E017: Proxy model contains model fields. models.E018: Autogenerated column name too long for field. models.E019: Autogenerated column name too long for M2M field. models.E020: The .check() class method is currently overridden. models.E021: ordering and order_with_respect_to cannot be used together. models.E022: contains a lazy reference to app not installed. models.E023: The model name cannot start or end with an underscore. models.E024: The model name cannot contain double underscores. models.E025: The property clashes with a related field accessor. models.E026: The model cannot have more than one field with primary_key=True. models.W027: does not support check constraints. models.E028: db_table is used by multiple models. models.E029: index name is not unique for model. models.E030: index name is not unique among models. models.E031: constraint name is not unique for model. models.E032: constraint name is not unique among models. models.E033: The index name cannot start with an underscore or a number. models.E034: The index name cannot be longer than characters. models.W035: db_table is used by multiple models. models.W036: does not support unique constraints with conditions. models.W037: does not support indexes with conditions. models.W038: does not support deferrable unique constraints. models.W039: does not support unique constraints with non-key columns. models.W040: does not support indexes with non-key columns. models.E041: constraints refers to the joined field. models.W042: Auto-created primary key used when not defining a primary key type. models.W043: <database> does not support indexes on expressions. models.W044: <database> does not support unique constraints on expressions. models.W045: Check constraint contains RawSQL() expression. models.W046: <database> does not support comments on tables (db_table_comment). models.W047: <database> does not support unique constraints with nulls distinct. security.W001: SecurityMiddleware is not in MIDDLEWARE. security.W002: XFrameOptionsMiddleware is not in MIDDLEWARE. security.W003: CsrfViewMiddleware is not in MIDDLEWARE. security.W004: SECURE_HSTS_SECONDS is not set. security.W005: SECURE_HSTS_INCLUDE_SUBDOMAINS is not set to True. security.W006: SECURE_CONTENT_TYPE_NOSNIFF is not set to True. security.W007: SECURE_BROWSER_XSS_FILTER is not set to True. security.W008: SECURE_SSL_REDIRECT is not set to True. security.W009: SECRET_KEY is weak. security.W010: SESSION_COOKIE_SECURE is not set to True. security.W011: SESSION_COOKIE_SECURE is not set to True. security.W012: SESSION_COOKIE_SECURE is not set to True. security.W013: SESSION_COOKIE_HTTPONLY is not set to True. security.W014: SESSION_COOKIE_HTTPONLY is not set to True. security.W015: SESSION_COOKIE_HTTPONLY is not set to True. security.W016: CSRF_COOKIE_SECURE is not set to True. security.W017: CSRF_COOKIE_HTTPONLY is not set to True. security.W018: DEBUG is set to True in deployment. security.W019: X_FRAME_OPTIONS is not set to 'DENY'. security.W020: ALLOWED_HOSTS must not be empty in deployment. security.W021: SECURE_HSTS_PRELOAD is not set to True. security.W022: SECURE_REFERRER_POLICY is not set. security.E023: SECURE_REFERRER_POLICY is invalid. security.E024: SECURE_CROSS_ORIGIN_OPENER_POLICY is invalid. security.W025: SECRET_KEY_FALLBACKS[n] is weak. security.E100: DEFAULT_HASHING_ALGORITHM must be 'sha1' or 'sha256'. security.E101: CSRF failure view does not take correct arguments. security.E102: CSRF failure view could not be imported. signals.E001: Lazy reference to sender, app not installed. templates.E001: APP_DIRS and loaders are both specified. templates.E002: string_if_invalid must be a string. templates.E003: is used for multiple template tag modules. templates.W003: is used for multiple template tag modules. translation.E001: Invalid LANGUAGE_CODE. translation.E002: Invalid language code in LANGUAGES. translation.E003: Invalid language code in LANGUAGES_BIDI. translation.E004: LANGUAGE_CODE not in LANGUAGES. urls.W001: URL pattern uses include() with a route ending with a $. urls.W002: URL pattern has a route beginning with a /. urls.W003: URL pattern has a name including a :. urls.E004: URL pattern is invalid. urls.W005: URL namespace isn't unique. urls.E006: MEDIA_URL/ STATIC_URL must end with a slash. urls.E007: Custom handlerXXX view does not take the correct number of arguments. urls.E008: Custom handlerXXX view could not be imported. urls.E009: URL pattern has an invalid view. urls.W010: URL pattern has an unmatched <angle bracket>. admin.E001: raw_id_fields must be a list or tuple. admin.E002: raw_id_fields[n] refers to a non-field. admin.E003: raw_id_fields[n] must be a foreign key or a many-to-many field. admin.E004: fields must be a list or tuple. admin.E005: Both fieldsets and fields are specified. admin.E006: fields contains duplicate field(s). admin.E007: fieldsets must be a list or tuple. admin.E008: fieldsets[n] must be a list or tuple. admin.E009: fieldsets[n] must be of length 2. admin.E010: fieldsets[n][1] must be a dictionary. admin.E011: fieldsets[n][1] must contain the key fields. admin.E012: There are duplicate field(s) in fieldsets[n][1]. admin.E013: fields/filter_horizontal/filter_vertical/fieldsets cannot include ManyToManyField. admin.E014: exclude must be a list or tuple. admin.E015: exclude contains duplicate field(s). admin.E016: form must inherit from BaseModelForm. admin.E017: filter_vertical must be a list or tuple. admin.E018: filter_horizontal must be a list or tuple. admin.E019: filter_vertical[n]/filter_horizontal[n] refers to a non-field. admin.E020: filter_vertical[n]/filter_horizontal[n] must be a many-to-many field. admin.E021: radio_fields must be a dictionary. admin.E022: radio_fields refers to a non-field. admin.E023: radio_fields refers to a non-ForeignKey field without choices. admin.E024: radio_fields must be either admin.HORIZONTAL or admin.VERTICAL. admin.E025: view_on_site must be either a callable or a boolean value. admin.E026: prepopulated_fields must be a dictionary. admin.E027: prepopulated_fields refers to a non-field. admin.E028: prepopulated_fields refers to a DateTimeField, ForeignKey, OneToOneField, or ManyToManyField. admin.E029: prepopulated_fields must be a list or tuple. admin.E030: prepopulated_fields refers to a non-field. admin.E031: ordering must be a list or tuple. admin.E032: ordering has the random ordering marker ?, but contains other fields as well. admin.E033: ordering refers to a non-field. admin.E034: readonly_fields must be a list or tuple. admin.E035: readonly_fields refers to a non-callable attribute. admin.E036: autocomplete_fields must be a list or tuple. admin.E037: autocomplete_fields refers to a non-field. admin.E038: autocomplete_fields must be a foreign key or a many-to-many field. admin.E039: Admin for model must be registered. admin.E040: ModelAdmin must define search_fields. admin.E101: save_as must be a boolean. admin.E102: save_on_top must be a boolean. admin.E103: inlines must be a list or tuple. admin.E104: InlineModelAdmin class must inherit from InlineModelAdmin. admin.E105: InlineModelAdmin class must have a model attribute. admin.E106: The value of InlineModelAdmin class.model must be a Model. admin.E107: list_display must be a list or tuple. admin.E108: list_display refers to a non-callable attribute. admin.E109: list_display must not be a many-to-many field or a reverse foreign key. admin.E110: list_display_links must be a list, a tuple, or None. admin.E111: list_display_links refers to a non-defined attribute. admin.E112: list_filter must be a list or tuple. admin.E113: list_filter must inherit from ListFilter. admin.E114: list_filter must not inherit from FieldListFilter. admin.E115: list_filter must inherit from FieldListFilter. admin.E116: list_filter refers to a non-Field. admin.E117: list_select_related must be a boolean, tuple or list. admin.E118: list_per_page must be an integer. admin.E119: list_max_show_all must be an integer. admin.E120: list_editable must be a list or tuple. admin.E121: list_editable refers to a non-field. admin.E122: list_editable refers to a non-contained field. admin.E123: list_editable cannot be in both list_editable and list_display_links. admin.E124: list_editable refers to the first field in list_display, which cannot be used unless list_display_links is set. admin.E125: list_editable refers to a non-editable field. admin.E126: search_fields must be a list or tuple. admin.E127: date_hierarchy refers to a non-Field. admin.E128: date_hierarchy must be a DateField or DateTimeField. admin.E129: ModelAdmin must define a has__permission() method for the action. admin.E130: __name__ attributes of actions defined in ModelAdmin must be unique. admin.E201: Cannot exclude the field, because it is the foreign key to the parent model. admin.E202: has no ForeignKey to./ has more than one ForeignKey to. admin.E203: The value of extra must be an integer. admin.E204: The value of max_num must be an integer. admin.E205: The value of min_num must be an integer. admin.E206: The value of formset must inherit from BaseModelFormSet. admin.E301: 'ct_field' references a non-field. admin.E302: 'ct_fk_field' references a non-field. admin.E303: has no GenericForeignKey. admin.E304: has no GenericForeignKey using content type field and object ID field. admin.E401: django.contrib.contenttypes must be in INSTALLED_APPS. admin.E402: django.contrib.auth.context_processors.auth must be enabled in DjangoTemplates (TEMPLATES). admin.E403: A django.template.backends.django.DjangoTemplates instance must be configured in TEMPLATES. admin.E404: django.contrib.messages.context_processors.messages must be enabled in DjangoTemplates (TEMPLATES). admin.E405: django.contrib.auth must be in INSTALLED_APPS. admin.E406: django.contrib.messages must be in INSTALLED_APPS. admin.E408: django.contrib.auth.middleware.AuthenticationMiddleware must be in MIDDLEWARE. admin.E409: django.contrib.messages.middleware.MessageMiddleware must be in MIDDLEWARE. admin.E410: django.contrib.sessions.middleware.SessionMiddleware must be in MIDDLEWARE. admin.W411: django.template.context_processors.request must be enabled in DjangoTemplates (TEMPLATES). auth.E001: REQUIRED_FIELDS must be a list or tuple. auth.E002: The field named as the USERNAME_FIELD must not be in REQUIRED_FIELDS. auth.E003: must be unique because it is named as the USERNAME_FIELD. auth.W004: is named as the USERNAME_FIELD, but it is not unique. auth.E005: The permission codenamed clashes with a builtin permission for model. auth.E006: The permission codenamed is duplicated for model. auth.E007: The verbose_name of model must be at most 244 characters. auth.E008: The permission named of model is longer than 255 characters. auth.C009: .is_anonymous must be an attribute or property rather than a method. auth.C010: .is_authenticated must be an attribute or property rather than a method. auth.E011: The name of model must be at most 93 characters. auth.E012: The permission codenamed of model is longer than 100 characters. auth.E013: AuthenticationMiddleware must be defined before LoginRequiredMiddleware in MIDDLEWARE. contenttypes.E001: The GenericForeignKey object ID references the nonexistent field. contenttypes.E002: The GenericForeignKey content type references the nonexistent field. contenttypes.E003: is not a ForeignKey. contenttypes.E004: is not a ForeignKey to contenttypes.ContentType. contenttypes.E005: Model names must be at most 100 characters. postgres.E001: Base field for array has errors. postgres.E002: Base field for array cannot be a related field. postgres.E003: default should be a callable instead of an instance. postgres.W004: Base field for array has warnings. sites.E001: CurrentSiteManager could not find a field named. sites.E002: CurrentSiteManager cannot use as it is not a foreign key or a many-to-many field. sites.E101: The SITE_ID setting must be an integer. staticfiles.E001: The STATICFILES_DIRS setting is not a tuple or list. staticfiles.E002: The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting. staticfiles.E003: The prefix in the STATICFILES_DIRS setting must not end with a slash. staticfiles.W004: The directory in the STATICFILES_DIRS does not exist. staticfiles.E005: The STORAGES setting must define a staticfiles storage. django.views.generic.base.View: Base view class. Attributes: http_method_names: List of accepted HTTP methods. Methods: as_view(**initkwargs): Returns callable view. Sets request, args, kwargs. setup(request, *args, **kwargs): Initializes view. dispatch(request, *args, **kwargs): Delegates to HTTP method handler (get, post, etc.). http_method_not_allowed(request, *args, **kwargs): Handles unsupported HTTP methods. options(request, *args, **kwargs): Responds to OPTIONS requests. django.views.generic.base.TemplateView: Renders a template. Methods: get_context_data(**kwargs): Adds context data. django.views.generic.base.RedirectView: Redirects to a URL. Attributes: url: URL to redirect to. pattern_name: URL pattern name to redirect to. permanent: Use 301 redirect if True, 302 if False. Default False. query_string: Append GET query string if True. Default False. Methods: get_redirect_url(*args, **kwargs): Constructs redirect URL. Generic date views for displaying date-based data. ArchiveIndexView: Index page of latest objects by date. Context: date_list. YearArchiveView: Yearly archive. Context: date_list, year, next_year, previous_year. MonthArchiveView: Monthly archive. Context: date_list, month, next_month, previous_month. WeekArchiveView: Weekly archive. Context: week, next_week, previous_week. DayArchiveView: Daily archive. Context: day, next_day, previous_day, next_month, previous_month. TodayArchiveView: Daily archive for today. DateDetailView: Individual object page. Uses a date. Example: path("////", DateDetailView.as_view(model=Article, date_field="pub_date"), name="archive_date_detail"). Base views: BaseArchiveIndexView, BaseYearArchiveView, BaseMonthArchiveView, BaseWeekArchiveView, BaseDayArchiveView, BaseTodayArchiveView, BaseDateDetailView. DetailView: Display single object. Attributes: object (current object). Methods: get_queryset(), get_object(), get_context_data(). BaseDetailView: Base for DetailView. Methods: get(request, *args, **kwargs) adds object to context. ListView: Display list of objects. Attributes: object_list (list of objects). Methods: get_queryset(), get_context_data(). BaseListView: Base for ListView. Methods: get(request, *args, **kwargs) adds object_list to context. allow_empty: bool, controls 404 on empty list. FormView: Displays a form, re-renders on error, redirects on success. CreateView: Displays a form to create an object, saves on success. UpdateView: Displays a form to edit an object, saves changes. DeleteView: Displays a confirmation page and deletes an object on POST. BaseFormView: Base class for displaying a form. BaseCreateView: Base class for creating objects. get(request, *args, **kwargs): Sets self.object to None. post(request, *args, **kwargs): Sets self.object to None. BaseUpdateView: Base class for updating objects. get(request, *args, **kwargs): Sets self.object. post(request, *args, **kwargs): Sets self.object. BaseDeleteView: Base class for deleting objects. Class-based views API: Base views (View, TemplateView, RedirectView), Display views (DetailView, ListView), Editing views (FormView, CreateView, UpdateView, DeleteView), Date views (ArchiveIndexView, YearArchiveView, MonthArchiveView, WeekArchiveView, DayArchiveView, TodayArchiveView, DateDetailView). Mixins: ContextMixin, TemplateResponseMixin, SingleObjectMixin, SingleObjectTemplateResponseMixin, MultipleObjectMixin, MultipleObjectTemplateResponseMixin, FormMixin, ModelFormMixin, ProcessFormView, DeletionMixin, Date mixins (YearMixin, MonthMixin, DayMixin, WeekMixin, DateMixin, BaseDateListView). `as_view()`: deploy views to URLs, arguments to `as_view()` are instance attributes. Mixins: Single object, multiple object, editing, and date-based mixins. Date-based mixins use strftime() format. YearMixin: Retrieves year info. Attributes: year_format (default '%Y'), year (optional, default None). Methods: get_year_format() - returns year_format. get_year() - returns year from attribute, URL, or GET. Raises 404 if not found. get_next_year(date) - returns date object for next year. get_previous_year(date) - returns date object for previous year. MonthMixin: Retrieves month info. Attributes: month_format (default '%b'), month (optional, default None). Methods: get_month_format() - returns month_format. get_month() - returns month from attribute, URL, or GET. Raises 404 if not found. get_next_month(date) - returns date object for next month. get_previous_month(date) - returns date object for previous month. DayMixin: Retrieves day info. Attributes: day_format (default '%d'), day (optional, default None). Methods: get_day_format() - returns day_format. get_day() - returns day from attribute, URL, or GET. Raises 404 if not found. get_next_day(date) - returns date object for next day. get_previous_day(date) - returns date object for previous day. WeekMixin: Retrieves week info. Attributes: week_format (default '%U', '%W', '%V' for Monday start), week (optional, default None). Methods: get_week_format() - returns week_format. get_week() - returns week from attribute, URL, or GET. Raises 404 if not found. get_next_week(date) - returns date object for next week. get_prev_week(date) - returns date object for previous week. DateMixin: Common behavior for date-based views. Attributes: date_field (DateField or DateTimeField name), allow_future (boolean, default False). Methods: get_date_field() - returns date_field. get_allow_future() - returns allow_future. BaseDateListView: Base class for date-based views. Mixins: DateMixin, MultipleObjectMixin Attributes: allow_empty (default False), date_list_period (default 'year', 'month', or 'day'). Methods: get_dated_items() - returns (date_list, object_list, extra_context). get_dated_queryset(**lookup) - returns filtered queryset. get_date_list_period() - returns date_list_period. get_date_list(queryset, date_type=None, ordering='ASC') - returns list of dates for which queryset contains entries. Editing mixins: FormMixin: Provides form creation/display. Attributes: initial, form_class, success_url, prefix. Methods: get_initial(), get_form_class(), get_form(form_class=None), get_form_kwargs(), get_prefix(), get_success_url(), form_valid(form), form_invalid(form), get_context_data(**kwargs). ModelFormMixin(FormMixin, SingleObjectMixin): For ModelForms. Attributes: model, fields, success_url. Methods: get_form_class(), get_form_kwargs(), get_success_url(), form_valid(form), form_invalid(form). ProcessFormView(View): Basic GET/POST workflow. Methods: get(request, *args, **kwargs), post(request, *args, **kwargs), put(*args, **kwargs). DeletionMixin: Handles DELETE HTTP. Attributes: success_url. Methods: delete(request, *args, **kwargs), get_success_url(). MultipleObjectMixin displays a list of objects. Attributes: allow_empty: bool, display page if no objects. Default True. model: Model, the model to display data for. queryset: QuerySet, represents the objects. Supersedes model. Use all() or get_queryset(). ordering: str/list, ordering for the queryset. paginate_by: int, objects per page. paginate_orphans: int, overflow objects for the last page. page_kwarg: str, name for the page parameter. Default 'page'. paginator_class: Paginator class. Default django.core.paginator.Paginator. context_object_name: str, variable name in the context. Methods: get_queryset() -> QuerySet: Returns the list of items. get_ordering() -> str/list: Returns ordering for the queryset. paginate_queryset(queryset, page_size) -> tuple: Returns (paginator, page, object_list, is_paginated). get_paginate_by(queryset) -> int/None: Returns items to paginate by, or None. get_paginator(queryset, per_page, orphans, allow_empty_first_page) -> Paginator: Returns paginator instance. get_paginate_orphans() -> int: Returns number of overflow objects. get_allow_empty() -> bool: Returns whether to display page if no objects. get_context_object_name(object_list) -> str: Returns context variable name. get_context_data(**kwargs) -> dict: Returns context data for displaying objects. Includes object_list, is_paginated, paginator, page_obj. MultipleObjectTemplateResponseMixin renders template-based response for object lists. Requires self.object_list. Attributes: template_name_suffix: str, suffix to append to template name. Default '_list'. Methods: get_template_names() -> list: Returns candidate template names. Includes template_name, <app_label>/<model_name><template_name_suffix>.html ContextMixin: Adds extra context to template. - Attributes: extra_context (dict) - Methods: get_context_data(**kwargs) -> dict TemplateResponseMixin: Handles template responses. - Attributes: template_name (str), template_engine (str), response_class, content_type - Methods: render_to_response(context, **response_kwargs) -> response_class, get_template_names() -> list[str] SingleObjectMixin: Provides object lookup mechanism. Attributes: model: Model class for the view. queryset: QuerySet of objects. Supersedes model. Warning: use all() or get_queryset(). slug_field: Field name containing the slug ('slug' by default). slug_url_kwarg: URLConf keyword argument for the slug ('slug' by default). pk_url_kwarg: URLConf keyword argument for the primary key ('pk' by default). context_object_name: Name of variable in the context. query_pk_and_slug: If True, lookup using both pk and slug. Defaults to False. Methods: get_object(queryset=None): Returns the object. Uses pk_url_kwarg or slug_url_kwarg. If queryset provided, uses it; otherwise, uses get_queryset(). get_queryset(): Returns the queryset. Defaults to queryset attribute or model.objects.all(). get_context_object_name(obj): Returns context variable name. Defaults to model name. get_context_data(**kwargs): Returns context data. Includes object and context_object_name. Requires self.object to be set. get_slug_field(): Returns slug field name. Defaults to slug_field. SingleObjectTemplateResponseMixin: Renders template-based responses for single object views. Requires self.object. Extends TemplateResponseMixin. Attributes: template_name_field: Field on the object instance to determine template name. template_name_suffix: Suffix for auto-generated template name. Default: '_detail'. Methods: get_template_names(): Returns list of template names. Includes template_name, template_name_field on object, and <app_label>/<model_name><template_name_suffix>.html. Clickjacking protection using middleware and decorators. XFrameOptionsMiddleware: sets X-Frame-Options header (default DENY), use X_FRAME_OPTIONS setting. xframe_options_exempt: exempt view from middleware. xframe_options_deny: decorator, header DENY. xframe_options_sameorigin: decorator, header SAMEORIGIN. Decorators override middleware. Modern browsers only. Admin actions: Functions called with selected objects on change list page. Example: def make_published(modeladmin, request, queryset): queryset.update(status="p"). Use @admin.action(description="description") to add descriptions. Add actions to ModelAdmin.actions. Handle errors with ModelAdmin.message_user(). Actions as ModelAdmin methods: Define action as method and use self. Actions can return HttpResponse for intermediate pages. Use HttpResponseRedirect for complex logic. AdminSite.add_action(action, name=None): Make action site-wide. AdminSite.disable_action(name): Disable site-wide action. ModelAdmin.actions = None disables all actions. ModelAdmin.get_actions(request): Conditionally enable/disable actions. @admin.action(permissions=["change"]): Limit action to users with specific permissions (add, change, delete, view, or custom has_*_permission method). admindocs: Generates documentation from docstrings. Activate: add django.contrib.admindocs to INSTALLED_APPS, add path('admin/doc/', include('django.contrib.admindocs.urls')) to urlpatterns (before 'admin/'). Docstring markup: :model:`app_label.ModelName`, :view:`app_label.view_name`, :tag:`tagname`, :filter:`filtername`, :template:`path/to/template.html`. Bookmarklet: Documentation for this page. ModelAdmin List Filters: ModelAdmin.list_filter: list of field names, SimpleListFilter subclasses, or (field name, FieldListFilter subclass) tuples. SimpleListFilter: subclass with title, parameter_name, lookups(request, model_admin)->list of (coded value, human-readable name) tuples, queryset(request, queryset)->filtered queryset. Example: class DecadeBornListFilter(admin.SimpleListFilter): title = _("decade born"); parameter_name = "decade"; def lookups(self, request, model_admin): return [("80s", _("in the eighties"))]; def queryset(self, request, queryset): if self.value() == "80s": return queryset.filter(...); class PersonAdmin(admin.ModelAdmin): list_filter = [DecadeBornListFilter]. FieldListFilter: Use BooleanFieldListFilter, RelatedOnlyFieldListFilter, EmptyFieldListFilter. Override expected_parameters, lookup_kwargs, list_separator. has_output(): controls filter display. template: custom template for rendering. ModelAdmin.show_facets: enable counts for each filter. Django admin site. Automatic admin interface from models for trusted users to manage site content. Not for front-end. Customization hooks available. Overview: Enable in INSTALLED_APPS, TEMPLATES, MIDDLEWARE, URLconf. Use createsuperuser to create admin user. Login requires is_staff=True. Register models with admin. ModelAdmin class: Represents a model in admin interface. ModelAdmin(): Base class for admin options. register(*models, site): Decorator for registering ModelAdmin classes. AdminConfig class: Default AppConfig for admin. Calls autodiscover(). SimpleAdminConfig class: Like AdminConfig, but no autodiscover(). default_site: Dotted path to default AdminSite class. autodiscover(): Imports admin modules in installed apps. ModelAdmin options: actions: list of actions for change list page. actions_on_top: bool, display actions on top. actions_on_bottom: bool, display actions on bottom. actions_selection_counter: bool, display selection counter. date_hierarchy: str, DateField for date-based navigation. empty_value_display: str, display for empty fields. exclude: list, fields to exclude from form. fields: list, fields to include in form, control order/grouping. fieldsets: list, layout control with field sections. (name, field_options), field_options: {'fields':[], 'classes':[], 'description':''} filter_horizontal: list, ManyToManyFields for horizontal filter interface. filter_vertical: list, ManyToManyFields for vertical filter interface. form: ModelForm, custom form for add/change pages. formfield_overrides: dict, override Field options for admin forms. {models.Field: {'widget': Widget}} inlines: list, InlineModelAdmin objects. list_display: list, fields to display on change list page. can be model field, related field, callable, ModelAdmin method, model attribute/method. display decorator for customization. list_display_links: list, fields in list_display linked to change page. list_editable: list, fields editable on change list page. Must be in list_display, not in list_display_links. list_filter: list, filters in right sidebar. list_max_show_all: int, max items for "Show all" link. list_per_page: int, items per page in change list. list_select_related: bool/list/tuple, use select_related(). ordering: list/tuple, default object ordering. paginator: Paginator class, custom paginator. prepopulated_fields: dict, prepopulate fields from others. {'slug': ['title']} preserve_filters: bool, preserve filters after save/delete. show_facets: ShowFacets enum, control facet counts in filters. ALWAYS, ALLOW, NEVER radio_fields: dict, ForeignKey/choices fields as radio buttons. {'field': admin.VERTICAL/HORIZONTAL} autocomplete_fields: list, ForeignKey/ManyToManyField fields with Select2 autocomplete. Requires search_fields on related ModelAdmin. raw_id_fields: list, ForeignKey/ManyToManyField fields as raw ID inputs. readonly_fields: list, fields displayed as non-editable. Can be model method or ModelAdmin method. save_as: bool, enable "save as new" button. save_as_continue: bool, redirect after save_as. save_on_top: bool, show save buttons on top. search_fields: list, fields for search box. Supports related lookups. Prefixes: ^, =, @, None. search_help_text: str, help text for search box. show_full_result_count: bool, show full result count. sortable_by: list/tuple/set, fields sortable in change list. view_on_site: bool/callable, "View on site" link. ModelAdmin methods: save_model(request, obj, form, change): Save model instance. delete_model(request, obj): Delete model instance. delete_queryset(request, queryset): Delete queryset of instances. save_formset(request, form, formset, change): Save inline formsets. get_ordering(request): Return ordering for changelist. get_search_results(request, queryset, search_term): Filter queryset based on search. save_related(request, form, formsets, change): Save related objects. get_autocomplete_fields(request): Return autocomplete_fields dynamically. get_readonly_fields(request, obj=None): Return readonly_fields dynamically. get_prepopulated_fields(request, obj=None): Return prepopulated_fields dynamically. get_list_display(request): Return list_display dynamically. get_list_display_links(request, list_display): Return list_display_links dynamically. get_exclude(request, obj=None): Return exclude dynamically. get_fields(request, obj=None): Return fields dynamically. get_fieldsets(request, obj=None): Return fieldsets dynamically. get_list_filter(request): Return list_filter dynamically. get_list_select_related(request): Return list_select_related dynamically. get_search_fields(request): Return search_fields dynamically. get_sortable_by(request): Return sortable_by dynamically. get_inline_instances(request, obj=None): Return inline instances dynamically. get_inlines(request, obj): Return inlines dynamically. get_urls(): Return custom admin URLs. Use admin_site.admin_view(). get_form(request, obj=None, **kwargs): Return ModelForm class. get_formsets_with_inlines(request, obj=None): Yield (FormSet, InlineModelAdmin) pairs. formfield_for_foreignkey(db_field, request, **kwargs): Customize formfield for ForeignKey. formfield_for_manytomany(db_field, request, **kwargs): Customize formfield for ManyToManyField. formfield_for_choice_field(db_field, request, **kwargs): Customize formfield for ChoiceField. get_changelist(request, **kwargs): Return Changelist class. get_changelist_form(request, **kwargs): Return ModelForm for changelist formset. get_changelist_formset(request, **kwargs): Return ModelFormSet for changelist. lookup_allowed(lookup, value, request): Check if lookup is allowed. has_view_permission(request, obj=None): Check view permission. has_add_permission(request): Check add permission. has_change_permission(request, obj=None): Check change permission. has_delete_permission(request, obj=None): Check delete permission. has_module_permission(request): Check module permission. get_queryset(request): Return queryset for admin view. message_user(request, message, level, extra_tags, fail_silently): Send message to user. get_paginator(request, queryset, per_page, orphans, allow_empty_first_page): Return paginator instance. response_add(request, obj, post_url_continue=None): HttpResponse after add view. response_change(request, obj): HttpResponse after change view. response_delete(request, obj_display, obj_id): HttpResponse after delete view. get_formset_kwargs(request, obj, inline, prefix): Customize formset kwargs. get_changeform_initial_data(request): Initial data for change form. get_deleted_objects(objs, request): Customize deletion process, return deleted_objects, model_count, perms_needed, protected. add_view(request, form_url, extra_context): View for add page. change_view(request, object_id, form_url, extra_context): View for change page. changelist_view(request, extra_context): View for changelist page. delete_view(request, object_id, extra_context): View for delete page. history_view(request, object_id, extra_context): View for history page. ModelAdmin asset definitions: Media inner class for CSS and JS. Django admin uses django.jQuery (3.7.1 namespaced). Adding custom validation: Use ModelForm with ModelAdmin.form and define clean_field methods in form. InlineModelAdmin objects: Edit related models on parent admin page. TabularInline, StackedInline subclasses. InlineModelAdmin options: model, fk_name, formset, form, classes, extra, max_num, min_num, raw_id_fields, template, verbose_name, verbose_name_plural, can_delete, show_change_link. InlineModelAdmin methods: get_formset(request, obj, **kwargs), get_extra(request, obj, **kwargs), get_max_num(request, obj, **kwargs), get_min_num(request, obj, **kwargs), has_add_permission(request, obj), has_change_permission(request, obj), has_delete_permission(request, obj). Working with multiple FKs, M2M models, intermediary models, generic relations as inlines. Overriding admin templates: Create admin dir in templates, app/model subdirs. Templates: actions.html, app_index.html, change_form.html, change_list.html, delete_confirmation.html, object_history.html, pagination.html, popup_response.html, prepopulated_fields_js.html, search_form.html, submit_line.html. Extend base templates and override blocks. Theming support: CSS variables for colors and fonts in admin/base.css and dark_mode.css. AdminSite objects: Represents admin site instance. Default is admin.site. Can create custom AdminSite subclasses. AdminSite attributes: site_header, site_title, site_url, index_title, index_template, app_index_template, empty_value_display, enable_nav_sidebar, final_catch_all_view, login_template, login_form, logout_template, password_change_template, password_change_done_template. AdminSite methods: each_context(request), get_app_list(request, app_label=None), has_permission(request), register(model_or_iterable, admin_class, **options), unregister(model_or_iterable), get_model_admin(model), get_log_entries(request), urls property. Hooking AdminSite instances into URLconf. Customizing AdminSite class, overriding default. Multiple admin sites in same URLconf. Adding views to admin sites, get_urls(). Adding password reset feature. LogEntry objects: Tracks admin actions. LogEntry attributes: action_time, user, content_type, object_id, object_repr, action_flag (ADDITION, CHANGE, DELETION), change_message. LogEntry methods: get_edited_object(), get_change_message(). Reversing admin URLs: URL names for AdminSite and ModelAdmin. Use reverse("admin:url_name", args, current_app). admin_urlname template filter. display decorator: Customize display functions for list_display/readonly_fields. boolean, ordering, description, empty_value params. staff_member_required decorator: Restrict view to staff members. redirect_field_name, login_url params. ``` Admin JavaScript Customizations: Inline Form Events: formset:added, formset:removed. event.detail.formsetName: Formset name. event.target (formset:added): Newly added row. Example: {% extends 'admin/change_form.html' %} {% load static %} {% block admin_change_form_document_ready %} {{ block.super }} <script src="{% static 'app/formset_handlers.js' %}"></script> {% endblock %} Handle older Django versions using jQuery. django.contrib.auth: Authentication API. Models: `User` (fields: username, first_name, last_name, email, password, groups, user_permissions, is_staff, is_active, is_superuser, last_login, date_joined; methods: get_username(), get_full_name(), get_short_name(), set_password(raw_password), check_password(raw_password), acheck_password(raw_password), set_unusable_password(), has_usable_password(), get_user_permissions(obj=None), get_group_permissions(obj=None), get_all_permissions(obj=None), has_perm(perm, obj=None), has_perms(perm_list, obj=None), has_module_perms(package_name), email_user(subject, message, from_email=None, **kwargs)), `AnonymousUser`, `Permission`, `Group`, `UserManager` (methods: create_user(username, email=None, password=None, **extra_fields), create_superuser(username, email=None, password=None, **extra_fields), with_perm(perm, is_active=True, include_superusers=True, backend=None, obj=None)). Backends: `BaseBackend` (methods: get_user_permissions(user_obj, obj=None), get_group_permissions(user_obj, obj=None), get_all_permissions(user_obj, obj=None), has_perm(user_obj, perm, obj=None)), `ModelBackend` (methods: authenticate(request, username=None, password=None, **kwargs), get_user_permissions(user_obj, obj=None), get_group_permissions(user_obj, obj=None), get_all_permissions(user_obj, obj=None), has_perm(user_obj, perm, obj=None), has_module_perms(user_obj, app_label), user_can_authenticate(), with_perm(perm, is_active=True, include_superusers=True, obj=None)), `AllowAllUsersModelBackend`, `RemoteUserBackend` (methods: authenticate(request, remote_user), clean_username(username), configure_user(request, user, created=True), user_can_authenticate()), `AllowAllUsersRemoteUserBackend`. Validators: `ASCIIUsernameValidator`, `UnicodeUsernameValidator`. Signals: user_logged_in, user_logged_out, user_login_failed. Functions: get_user(request), aget_user(request). ContentType: Tracks installed models. - Attributes: app_label, model, name - Methods: - get_object_for_this_type(using=None, **kwargs) -> object - model_class() -> class ContentTypeManager: Custom manager for ContentType. - Methods: - clear_cache() - get_for_id(id) -> ContentType - get_for_model(model, for_concrete_model=True) -> ContentType - get_for_models(*models, for_concrete_models=True) -> dict - get_by_natural_key(app_label, model) -> ContentType GenericForeignKey: Enables generic relationships. - Parameters: content_type, object_id GenericRelation: Reverse generic relation. - Parameters: related_query_name (str) BaseGenericInlineFormSet - generic_inlineformset_factory(model, form=ModelForm, formset=BaseGenericInlineFormSet, ct_field='content_type', fk_field='object_id', ...) -> GenericInlineFormSet GenericInlineModelAdmin - Attributes: ct_field, ct_fk_field GenericTabularInline GenericStackedInline GenericPrefetch(lookup, querysets, to_attr=None) Flatpages app for simple HTML content in database. Model FlatPage(url, title, content, sites, template_name, registration_required). Admin interface to manage flatpages. FlatpageFallbackMiddleware serves flatpages on 404 errors. views.flatpage(request, url) renders flatpage. Template tags: {% load flatpages %}, {% get_flatpages [for user] [starts_with 'url_prefix'] as pages %}. Security: Flatpages use raw HTML, sanitize input. Middleware order important for FlatpageFallbackMiddleware. GISModelAdmin class in GeoDjango admin. gis_widget: widget for GeometryField, defaults OSMWidget. gis_widget_kwargs: kwargs for gis_widget, defaults empty dict. GeoDjango Management Commands inspectdb: Spatially-aware inspectdb. Places geometry fields in models. ogrinspect data_source model_name: Generates GeoDjango model from OGR DataSource. Options: --blank BLANK: Add blank=True to fields. --decimal DECIMAL: Use DecimalField for float fields. --geom-name GEOM_NAME: Geometry field attribute name, default 'geom'. --layer LAYER_KEY: Layer key, default 0. --mapping: Generate LayerMapping dictionary. --multi-geom: Use geometry collection field. --name-field NAME_FIELD: Generates __str__ method using field. --no-imports: Suppress import statement. --null NULL: Add null=True to fields. --srid SRID: SRID for geometry field, auto-detect if unset. GeoDjango Spatial Backends: postgis, mysql, oracle, spatialite. MySQL spatial functions limited. RasterField implemented for PostGIS only. Creating Models: Zipcode(code=77096, poly="POLYGON(( 10 10, 10 20, 20 20, 20 15, 10 10))").save() poly can be GEOSGeometry, WKT, HEXEWKB, GeoJSON. SRID transforms implicitly. Creating Raster Models: Elevation(name="Volcano", rast="/path/to/raster/volcano.tif").save(). rast can be GDALRaster. Spatial Lookups: __=. Raster lookups: ____= or __=(, ). Raster support listed in compatibility table. Distance Queries: Use Distance function for measuring. Distance lookups: distance_lt, distance_lte, distance_gt, distance_gte, dwithin. Takes tuple (geometry/raster, distance). Use geography=True for WGS84. Compatibility Tables: Lists spatial lookups and database functions by backend. Aggregate Functions: Collect, Extent, Extent3D, MakeLine, Union. MariaDB excludes aggregates. GeoDjango deployment is similar to standard Django apps. GeoDjango uses GDAL which is not thread-safe. Avoid threading; configure Apache (e.g., mod_wsgi) with WSGIDaemonProcess threads=1 (or increase processes). Feed: Subclass for geographic feeds embedding location info in RSS/Atom. Uses Simple GeoRSS or W3C Geo standards. Inherits from django.contrib.syndication.views.Feed. geometry(obj): Returns feed's geometry; GEOSGeometry instance or (x, y) tuple. item_geometry(item): Returns item's geometry; GEOSGeometry or (x, y) tuple. SyndicationFeed subclasses: GeoRSSFeed, GeoAtom1Feed, W3CGeoFeed (supports only PointField). GeoDjango Forms API: Provides form fields and widgets to display/edit geolocalized data on a map. Uses OpenLayers. Field arguments: srid: SRID code for field value transformation. geom_type: OpenGIS geometry name. Form field classes: GeometryField: Base class for geometry fields. PointField: Represents a point. LineStringField: Represents a line string. PolygonField: Represents a polygon. MultiPointField: Represents a multi-point. MultiLineStringField: Represents a multi-line string. MultiPolygonField: Represents a multi-polygon. GeometryCollectionField: Represents a geometry collection. Form widgets: BaseGeometryWidget: Abstract base widget. OpenLayersWidget: Default widget. template_name: gis/openlayers.html. OSMWidget: Uses OpenStreetMap. template_name: gis/openlayers-osm.html; default_lat, default_lon, default_zoom attributes. BaseGeometryWidget attributes: geom_type: OpenGIS geometry type. map_srid: SRID code for the map (default: 4326). display_raw: Show serialized geometry (default: False). supports_3d: Supports 3D edition (default: False). template_name: Template used to render widget. Geographic Database Functions: Area(expression, **extra): Returns area of geographic field. AsGeoJSON(expression, bbox=False, crs=False, precision=8, **extra): Returns GeoJSON representation. AsGML(expression, version=2, precision=8, **extra): Returns GML representation. AsKML(expression, precision=8, **extra): Returns KML representation. AsSVG(expression, relative=False, precision=8, **extra): Returns SVG representation. AsWKB(expression, **extra): Returns WKB representation. AsWKT(expression, **extra): Returns WKT representation. Azimuth(point_a, point_b, **extra): Returns azimuth in radians. BoundingCircle(expression, num_seg=48, **extra): Returns smallest containing circle. Centroid(expression, **extra): Returns centroid. ClosestPoint(expr1, expr2, **extra): Returns closest point on geometry A to geometry B. Difference(expr1, expr2, **extra): Returns geometric difference. Distance(expr1, expr2, spheroid=None, **extra): Returns distance. Envelope(expression, **extra): Returns bounding box. ForcePolygonCW(expression, **extra): Forces polygon orientation. FromWKB(expression, srid=0, **extra): Creates geometry from WKB. FromWKT(expression, srid=0, **extra): Creates geometry from WKT. GeoHash(expression, precision=None, **extra): Returns GeoHash. GeometryDistance(expr1, expr2, **extra): Returns distance between geometries. Intersection(expr1, expr2, **extra): Returns geometric intersection. IsEmpty(expr): Checks if geometry is empty. IsValid(expr): Checks if geometry is valid. Length(expression, spheroid=True, **extra): Returns length. LineLocatePoint(linestring, point, **extra): Returns location on linestring. MakeValid(expr): Converts to valid geometry. MemSize(expression, **extra): Returns memory size. NumGeometries(expression, **extra): Returns number of geometries. NumPoints(expression, **extra): Returns number of points. Perimeter(expression, **extra): Returns perimeter. PointOnSurface(expression, **extra): Returns point on surface. Reverse(expression, **extra): Returns geometry with reversed coordinates. Scale(expression, x, y, z=0.0, **extra): Returns geometry with scaled coordinates. SnapToGrid(expression, *args, **extra): Returns geometry snapped to grid. SymDifference(expr1, expr2, **extra): Returns symmetric difference. Transform(expression, srid, **extra): Transforms geometry to SRID. Translate(expression, x, y, z=0.0, **extra): Returns translated geometry. Union(expr1, expr2, **extra): Returns union of geometries. GDAL API: Provides interface for OGR and some GDAL raster features. DataSource(ds_input, encoding='utf-8'): Wraps OGR data source, reads geospatial data. ds_input: path to file/data source. encoding: source encoding. DataSource properties: layer_count: number of layers. name: data source name. Layer: Wraps a layer in a DataSource. Access via DataSource object. Acts as container for features. Layer properties: name: layer name. num_feat: number of features. geom_type: OGRGeomType object. num_fields: number of fields. fields: list of field names. field_types: list of field types. field_widths: list of field widths. field_precisions: list of field precisions. extent: spatial extent as Envelope. srs: SpatialReference. spatial_filter: spatial filter (OGRGeometry, 4-tuple, None). Layer methods: get_fields(field_name): list of values for field. get_geoms(geos=False): list of geometries. test_capability(capability): boolean. Feature: Wraps OGR feature. Accessed from Layer. Consists of geometry and fields. Feature properties: geom: OGRGeometry object. geom_type: OGRGeomType. num_fields: number of fields. fields: list of field names. fid: feature identifier. layer_name: Layer name. Feature methods: get(field_name): field value. index(field_name): field index. Field: Represents a field in a feature. Field properties: name: field name. type: OGR type. type_name: data type name. value: field value. width: field width. precision: numeric precision. Field methods: as_double(): value as float. as_int(): value as int. as_string(): value as string. as_datetime(): value as datetime tuple. Driver(dr_input): Wraps OGR DataSource driver. Driver properties: driver_count: number of registered drivers. OGRGeometry(geom_input, srs=None): Wraps OGR Geometry. geom_input: WKT, HEX, GeoJSON string, WKB buffer, or OGRGeomType. srs: SpatialReference. OGRGeometry classmethods: from_gml(gml_string): from GML. from_bbox(bbox): from bounding box. OGRGeometry properties: dimension: coordinate dimensions. coord_dim: coordinate dimension. is_3d: boolean for Z coordinates. is_measured: boolean for M coordinates. geom_count: number of elements. point_count: number of points. num_points: alias for point_count. num_coords: alias for point_count. geom_type: OGRGeomType object. geom_name: geometry type name. area: geometry area. envelope: Envelope object. extent: 4-tuple extent. srs: SpatialReference. srid: SRID. geos: GEOSGeometry object. gml: GML string. hex: HEX WKB string. json: JSON string. kml: KML string. wkb_size: WKB buffer size. wkb: WKB buffer. wkt: WKT string. ewkt: EWKT string. OGRGeometry methods: clone(): returns clone. close_rings(): closes unclosed rings. transform(coord_trans, clone=False): transforms SRS. intersects(other): boolean. equals(other): boolean. disjoint(other): boolean. touches(other): boolean. crosses(other): boolean. within(other): boolean. contains(other): boolean. overlaps(other): boolean. boundary(): returns boundary. convex_hull: returns convex hull. difference(): returns difference. intersection(): returns intersection. sym_difference(): returns symmetric difference. union(): returns union. centroid: returns centroid. tuple: coordinates as tuple. Point properties: x: X coordinate. y: Y coordinate. z: Z coordinate. m: M coordinate. LineString properties: x: list of X coordinates. y: list of Y coordinates. z: list of Z coordinates. m: list of M coordinates. GeometryCollection methods: add(geom): adds geometry. OGRGeomType(type_input): Represents OGR geometry type. type_input: integer or string. OGRGeomType properties: name: short name. num: geometry type number. django: Django field type. Envelope(min_x, min_y, max_x, max_y): Represents bounding box. Envelope properties: min_x: minimum X. min_y: minimum Y. max_x: maximum X. max_y: maximum Y. ur: upper-right coordinate. ll: lower-left coordinate. tuple: envelope tuple. wkt: WKT polygon. SpatialReference(srs_input): Represents spatial reference system. srs_input: WKT, EPSG code, PROJ string, shorthand string. SpatialReference methods: __getitem__(target): attribute value. attr_value(target, index=0): attribute value by index. auth_name(target): authority name. auth_code(target): authority code. clone(): returns clone. identify_epsg(): adds EPSG authority nodes. from_esri(): morphs from ESRI to EPSG. to_esri(): morphs to ESRI format. validate(): validates SRS. import_epsg(epsg): imports from EPSG. import_proj(proj): imports from PROJ. import_user_input(user_input): imports from user input. import_wkt(wkt): imports from WKT. import_xml(xml): imports from XML. SpatialReference properties: name: name. srid: SRID. linear_name: linear units name. linear_units: linear units value. angular_name: angular units name. angular_units: angular units value. units: (value, name). ellipsoid: (semimajor, semiminor, inverse_flattening). semi_major: semi-major axis. semi_minor: semi-minor axis. inverse_flattening: inverse flattening. geographic: boolean. local: boolean. projected: boolean. wkt: WKT representation. pretty_wkt: pretty WKT. proj: PROJ representation. proj4: Alias for SpatialReference.proj. xml: XML representation. CoordTransform(source, target): Represents coordinate system transform. source: SpatialReference. target: SpatialReference. GDALRaster(ds_input, write=False): Wraps GDAL raster source. ds_input: file path, dictionary, or bytes. write: write mode. GDALRaster properties: name: source name. driver: GDAL driver name. width: width in pixels. height: height in pixels. srs: SpatialReference. srid: SRID. geotransform: affine transformation matrix. origin: top left origin. scale: pixel width and height. skew: skew coefficients. extent: raster extent. bands: list of GDALBand instances. vsi_buffer: bytes representation. is_vsi_based: boolean. metadata: raster metadata. GDALRaster methods: warp(ds_input, resampling='NearestNeighbour', max_error=0.0): warps raster. transform(srs, driver=None, name=None, resampling='NearestNeighbour', max_error=0.0): transforms raster SRS. info: summary string. GDALBand: Represents a raster band. Accessed from GDALRaster. GDALBand properties: description: band description. width: width in pixels. height: height in pixels. pixel_count: total number of pixels. min: minimum pixel value. max: maximum pixel value. mean: mean of pixel values. std: standard deviation. nodata_value: no data value. GDALBand methods: statistics(refresh=False, approximate=False): pixel statistics. datatype(as_string=False): data type. color_interp(as_string=False): color interpretation. data(data=None, offset=None, size=None, shape=None): pixel values accessor. metadata: band metadata. GDALException: Base GDAL exception. SRSException: Exception for SRS errors. GeoIP2: Wrapper for MaxMind geoip2 library. Requires geoip2 Python package, GeoIP datasets. class GeoIP2(path=None, cache=0, country=None, city=None). Params: path, cache, country, city. Methods: GeoIP2.open(path, cache) (deprecated). GeoIP2.city(query): dict city info. GeoIP2.country(query): dict country code/name. GeoIP2.country_code(query). GeoIP2.country_name(query). GeoIP2.coords(query) (deprecated). GeoIP2.lon_lat(query): (lon, lat). GeoIP2.lat_lon(query): (lat, lon). GeoIP2.geos(query): Point. Settings: GEOIP_PATH, GEOIP_COUNTRY, GEOIP_CITY. Exception: GeoIP2Exception. Spatial Lookups for GeometryField and RasterField. __bbcontains: Tests if bounding box contains the lookup geometry's bounding box. Example: Zipcode.objects.filter(poly__bbcontains=geom) __bboverlaps: Tests if bounding box overlaps the lookup geometry's bounding box. Example: Zipcode.objects.filter(poly__bboverlaps=geom) __contained: Tests if bounding box is completely contained by the lookup geometry's bounding box. Example: Zipcode.objects.filter(poly__contained=geom) __contains: Tests if geometry field spatially contains the lookup geometry. Example: Zipcode.objects.filter(poly__contains=geom) __contains_properly: Returns true if the lookup geometry intersects the interior of the geometry field, but not the boundary (or exterior). Example: Zipcode.objects.filter(poly__contains_properly=geom) __coveredby: Tests if no point in the geometry field is outside the lookup geometry. Example: Zipcode.objects.filter(poly__coveredby=geom) __covers: Tests if no point in the lookup geometry is outside the geometry field. Example: Zipcode.objects.filter(poly__covers=geom) __crosses: Tests if geometry field spatially crosses the lookup geometry. Example: Zipcode.objects.filter(poly__crosses=geom) __disjoint: Tests if geometry field is spatially disjoint from the lookup geometry. Example: Zipcode.objects.filter(poly__disjoint=geom) __equals: Tests if geometry field is spatially equal to the lookup geometry. Example: Zipcode.objects.filter(poly__equals=geom) __exact, __same_as: Tests if geometry field is equal to the lookup geometry. Example: Zipcode.objects.filter(poly=geom) __intersects: Tests if geometry field spatially intersects the lookup geometry. Example: Zipcode.objects.filter(poly__intersects=geom) __isempty: Tests if geometry is empty. Example: Zipcode.objects.filter(poly__isempty=True) __isvalid: Tests if geometry is valid. Example: Zipcode.objects.filter(poly__isvalid=True) __overlaps: Tests if geometry field spatially overlaps the lookup geometry. Example: Zipcode.objects.filter(poly__overlaps=geom) __relate: Tests if geometry field is spatially related to the lookup geometry by the given pattern (geom, pattern). Example: Zipcode.objects.filter(poly__relate=(geom, "T*T***FF*")) __touches: Tests if geometry field spatially touches the lookup geometry. Example: Zipcode.objects.filter(poly__touches=geom) __within: Tests if geometry field is spatially within the lookup geometry. Example: Zipcode.objects.filter(poly__within=geom) __left: Tests if geometry field's bounding box is strictly to the left of the lookup geometry's bounding box. Example: Zipcode.objects.filter(poly__left=geom) __right: Tests if geometry field's bounding box is strictly to the right of the lookup geometry's bounding box. Example: Zipcode.objects.filter(poly__right=geom) __overlaps_left: Tests if geometry fieldâ€™s bounding box overlaps or is to the left of the lookup geometryâ€™s bounding box. Example: Zipcode.objects.filter(poly__overlaps_left=geom) __overlaps_right: Tests if geometry fieldâ€™s bounding box overlaps or is to the right of the lookup geometryâ€™s bounding box. Example: Zipcode.objects.filter(poly__overlaps_right=geom) __overlaps_above: Tests if geometry fieldâ€™s bounding box overlaps or is above the lookup geometryâ€™s bounding box. Example: Zipcode.objects.filter(poly__overlaps_above=geom) __overlaps_below: Tests if geometry fieldâ€™s bounding box overlaps or is below the lookup geometryâ€™s bounding box. Example: Zipcode.objects.filter(poly__overlaps_below=geom) __strictly_above: Tests if geometry fieldâ€™s bounding box is strictly above the lookup geometryâ€™s bounding box. Example: Zipcode.objects.filter(poly__strictly_above=geom) __strictly_below: Tests if geometry fieldâ€™s bounding box is strictly below the lookup geometryâ€™s bounding box. Example: Zipcode.objects.filter(poly__strictly_below=geom) Distance Lookups: __=(, [, "spheroid"]). spheroid is optional. __distance_gt: Returns models where distance to geometry field from lookup geometry is greater than the distance value. Example: Zipcode.objects.filter(poly__distance_gt=(geom, D(m=5))) __distance_gte: Returns models where distance to geometry field from lookup geometry is greater than or equal to the distance value. Example: Zipcode.objects.filter(poly__distance_gte=(geom, D(m=5))) __distance_lt: Returns models where distance to geometry field from lookup geometry is less than the distance value. Example: Zipcode.objects.filter(poly__distance_lt=(geom, D(m=5))) __distance_lte: Returns models where distance to geometry field from lookup geometry is less than or equal to the distance value. Example: Zipcode.objects.filter(poly__distance_lte=(geom, D(m=5))) __dwithin: Returns models where the distance to the geometry field from the lookup geometry are within the given distance. Example: Zipcode.objects.filter(poly__dwithin=(geom, D(m=5))) Aggregate Functions Collect(geo_field, filter=None): Returns a GEOMETRYCOLLECTION or a MULTI geometry object. Extent(geo_field, filter=None): Returns the extent as a 4-tuple (lower left, upper right). Example: qs = City.objects.filter(name__in=("Houston", "Dallas")).aggregate(Extent("poly")) Extent3D(geo_field, filter=None): Returns the 3D extent as a 6-tuple. Example: qs = City.objects.filter(name__in=("Houston", "Dallas")).aggregate(Extent3D("poly")) MakeLine(geo_field, filter=None): Returns a LineString constructed from the point field geometries. Example: qs = City.objects.filter(name__in=("Houston", "Dallas")).aggregate(MakeLine("poly")) Union(geo_field, filter=None): Returns a GEOSGeometry object comprising the union of every geometry. Can be processor intensive. Example: u = Zipcode.objects.aggregate(Union(poly)) GEOSGeometry(geo_input, srid=None): Base class for GEOS geometry objects. Initializes with geometry input (WKT, HEX, WKB, GeoJSON). from_gml(gml_string): Constructs from GML string. coords: Returns geometry coordinates as a tuple. dims: Returns dimension (0=Point, 1=LineString, 2=Polygon, -1=empty GeometryCollection). empty: Returns if geometry is empty. geom_type: Returns geometry type string ('Point', 'LineString', etc.). geom_typeid: Returns GEOS geometry type ID (0=Point, 1=LineString, etc.). num_coords: Returns number of coordinates. num_geom: Returns number of geometries (1 unless GeometryCollection). hasz: Returns if geometry is 3D. ring: Returns if geometry is a LinearRing. simple: Returns if geometry is simple (doesn't intersect itself). valid: Returns if geometry is valid. valid_reason: Returns reason if geometry is invalid. srid: Gets/sets SRID. ewkt: Returns extended WKT (includes SRID). hex: Returns WKB in hexadecimal (no SRID). hexewkb: Returns EWKB in hexadecimal (includes SRID). json: Returns GeoJSON representation. kml: Returns KML representation (SRID 4326). ogr: Returns OGRGeometry object. wkb: Returns WKB as Python buffer (no SRID). ewkb: Returns EWKB as Python buffer (includes SRID). wkt: Returns Well-Known Text. contains(other): Returns True if this geometry contains the other. covers(other): Returns True if this geometry covers the other. crosses(other): Returns True if this geometry crosses the other. disjoint(other): Returns True if geometries are disjoint. equals(other): Returns True if geometries are equal. equals_exact(other, tolerance=0): Returns True if geometries are exactly equal within tolerance. equals_identical(other): Returns True if geometries are point-wise identical (requires GEOS 3.12). intersects(other): Returns True if geometries intersect. overlaps(other): Returns True if geometries overlap. relate_pattern(other, pattern): Returns True if DE-9IM matches pattern. touches(other): Returns True if geometries touch. within(other): Returns True if this geometry is within the other. buffer(width, quadsegs=8): Returns a buffer around the geometry. buffer_with_style(width, quadsegs=8, end_cap_style=1, join_style=1, mitre_limit=5.0): Returns a styled buffer. difference(other): Returns the difference between geometries. intersection(other): Returns the intersection of geometries. project(point): Returns distance to projected point. project_normalized(point): Returns normalized distance to projected point. relate(other): Returns DE-9IM intersection matrix. simplify(tolerance=0.0, preserve_topology=False): Returns simplified geometry. sym_difference(other): Returns symmetric difference. union(other): Returns the union of geometries. boundary: Returns the boundary as a Geometry object. centroid: Returns the centroid as a Point object. convex_hull: Returns the convex hull as a Polygon. envelope: Returns the envelope as a Polygon. point_on_surface: Returns a Point on the surface. unary_union: Returns the union of all elements. area: Returns the area. extent: Returns the extent (xmin, ymin, xmax, ymax). clone(): Returns a clone of the geometry. distance(geom): Returns the distance to another geometry. length: Returns the length. prepared: Returns a PreparedGeometry object. srs: Returns SpatialReference object. transform(ct, clone=False): Transforms the geometry. ct can be SRID, WKT, PROJ, SpatialReference, or CoordTransform. make_valid(): Returns a valid geometry. Requires GEOS 3.8. normalize(clone=False): Converts to canonical form. Point(x=None, y=None, z=None, srid=None): Represents a point. LineString(*args, **kwargs): Represents a line string. closed: Returns whether the LineString is closed. LinearRing(*args, **kwargs): Represents a linear ring (closed LineString). is_counterclockwise: Returns if the LinearRing is counterclockwise. Polygon(*args, **kwargs): Represents a polygon. from_bbox(bbox): Returns a Polygon from a bounding box (xmin, ymin, xmax, ymax). num_interior_rings: Returns the number of interior rings. MultiPoint(*args, **kwargs): Represents a multi-point. MultiLineString(*args, **kwargs): Represents a multi-line string. merged: Returns a LineString representing the line merge. MultiPolygon(*args, **kwargs): Represents a multi-polygon. GeometryCollection(*args, **kwargs): Represents a geometry collection. PreparedGeometry: Optimized geometry for spatial predicate operations. contains(other), contains_properly(other), covers(other), crosses(other), disjoint(other), intersects(other), overlaps(other), touches(other), within(other): Spatial predicates for PreparedGeometry. fromfile(file_h): Returns a GEOSGeometry from a file (path or file object). fromstr(string, srid=None): Returns a GEOSGeometry from a string (WKT, HEX, WKB, GeoJSON). WKBReader: Reads GEOSGeometry from WKB. read(geom) WKTReader: Reads GEOSGeometry from WKT. read(geom) WKBWriter(dim=2): Writes GEOSGeometry to WKB. write(geom), write_hex(geom), byteorder, outdim, srid WKTWriter(dim=2, trim=False, precision=None): Writes GEOSGeometry to WKT. write(geom), outdim, trim, precision GEOS_LIBRARY_PATH: Path to GEOS C library. GEOSException: Base GEOS exception class. GeoDjango: Geographic web framework. Modules: GeoDjango Tutorial, Installation, Model API (Spatial Field Types, Options), Database API (Spatial Backends, Lookups, Functions), Forms API, GIS QuerySet API (Spatial/Distance Lookups, Geographic Functions: Area, AsGeoJSON, AsGML, AsKML, AsSVG, AsWKB, AsWKT, Azimuth, BoundingCircle, Centroid, ClosestPoint, Difference, Distance, Envelope, ForcePolygonCW, FromWKB, FromWKT, GeoHash, GeometryDistance, Intersection, IsEmpty, IsValid, Length, LineLocatePoint, MakeValid, MemSize, NumGeometries, NumPoints, Perimeter, PointOnSurface, Reverse, Scale, SnapToGrid, SymDifference, Transform, Translate, Union), Measurement Objects, GEOS API, GDAL API, Geolocation with GeoIP2, Utilities (LayerMapping, OGR Inspection, GeoJSON Serializer), Management Commands, Admin site, Geographic Feeds, Sitemaps, Testing, PostGIS, Deployment. GEOS: Geometry Engine. Required: Yes. Versions: 3.12, 3.11, 3.10, 3.9, 3.8. PROJ: Cartographic Projections. Required: Yes (PostgreSQL/SQLite). Versions: 9.x, 8.x, 7.x, 6.x. GDAL: Geospatial Data Abstraction. Required: Yes. Versions: 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0. GeoIP: IP geolocation. Required: No. Versions: 2. PostGIS: PostgreSQL Spatial extensions. Required: Yes (PostgreSQL). Versions: 3.4, 3.3, 3.2, 3.1, 3.0. SpatiaLite: SQLite Spatial extensions. Required: Yes (SQLite). Versions: 5.1, 5.0, 4.3. GeoDjango installation: requires Python, Django, and a spatial database (PostgreSQL/PostGIS, MySQL, Oracle, SQLite/SpatiaLite). Install geospatial libraries like GEOS, GDAL, PROJ. Set DATABASES ENGINE setting and add django.contrib.gis to INSTALLED_APPS. Troubleshooting involves library path configuration (LD_LIBRARY_PATH, system library path), binutils installation on Linux. macOS: Postgres.app (recommended), Homebrew, Fink, MacPorts. Windows: Python, PostgreSQL, PostGIS, OSGeo4W. Ensure environment variables (OSGEO4W_ROOT, GDAL_DATA, PROJ_LIB, PATH) are correctly set. PostGIS: Adds geographic object support to PostgreSQL. Install: postgresql-x, postgresql-x-postgis-3, postgresql-server-dev-x, python3-psycopg3. Create spatial database: CREATE EXTENSION postgis;. CreateExtension migration operation available. Use CREATE EXTENSION postgis_raster; for raster functionality. Administer using pgAdmin III or SQL Shell. SpatiaLite: spatial DB for SQLite. Install system packages or source. Source install: GEOS, PROJ required. SQLite: R*Tree module needed (recompile CFLAGS="-DSQLITE_ENABLE_RTREE=1"). SpatiaLite library: configure, make, install (macOS: --target=macosx). macOS Homebrew: brew install spatialite-tools gdal. Set SPATIALITE_LIBRARY_PATH. LayerMapping(model, data_source, mapping, layer=0, source_srs=None, encoding=None, transaction_mode='commit_on_success', transform=True, unique=True, using='default') class maps spatial data to models. model: GeoDjango model. data_source: path to OGR data file or DataSource instance. mapping: dict {model_field: layer_field_or_geometry_type}. layer: layer index. source_srs: source SRS. encoding: data encoding. transaction_mode: 'commit_on_success' or 'autocommit'. transform=True: enable coordinate transform. unique=True or field name(s): enforce unique models. using='default': database alias. LayerMapping.save(verbose=False, fid_range=False, step=False, progress=False, silent=False, stream=sys.stdout, strict=False) saves data. fid_range: feature ID range slice or (begin, end). progress=interval: show progress. silent=True: disable notifications. step=interval: commit interval. stream: output stream. strict=True: stop on error. Memory issues: set DEBUG=False. MySQL max_allowed_packet error: increase setting in my.cnf. django.contrib.gis.measure: Distance, Area for measurements. Aliases: D, A. Distance(**kwargs): Create Distance object. Units: km, mi, m, yd, ft, survey_ft, inch, cm, mm, um, etc. Distance.__getattr__(unit_att): Get value in unit. e.g., dist.km. Distance.unit_attname(unit_name): Get unit attribute name. e.g., Distance.unit_attname("Mile") -> 'mi'. Area(**kwargs): Create Area object. Units: sq_km, sq_mi, sq_m, etc., ha. Area.__getattr__(unit_att): Get value in unit. e.g., a.sq_km. Area.unit_attname(unit_name): Get unit attribute name. e.g., Area.unit_attname("Kilometer") -> 'sq_km'. D: Alias for Distance. A: Alias for Area. Spatial Field Types: GeometryField, PointField, LineStringField, PolygonField, MultiPointField, MultiLineStringField, MultiPolygonField, GeometryCollectionField, RasterField. Field Options: srid: SRID (default 4326). spatial_index: spatial index (default True). dim: dimension (default 2, 3 for PostGIS/SpatiaLite). geography: type geography (PostGIS, SRID 4326), spherical, limited lookups, use Cast for others. ogrinspect: ogrinspect(data_source, model_name, **kwargs); mapping: mapping(data_source, geom_name='geom', layer_key=0, multi_geom=False) GeoJSON Serializer: Serializer for GeoJSON format. geometry_field: Geometry field name. id_field: Field for id key. srid: SRID to use, defaults to 4326. fields option limits fields in properties key. Geographic Sitemaps: `KMLSitemap`, `KMZSitemap`: present geolocated data in KML/KMZ format. GeoDjango testing with PostGIS. POSTGIS_VERSION setting (major, minor, micro) to manually set PostGIS version. Database user needs CREATEDB privilege for testing. Superuser can also be used. Settings file DATABASES should use spatial backends for GeoDjango tests. Run tests with ./runtests.py --settings=settings_file gis_tests to run only GeoDjango tests. django.contrib.gis.utils: Utilities for geospatial web applications. Includes LayerMapping data import utility, OGR Inspection ogrinspect mapping, GeoJSON Serializer. Template filters for adding a human touch to data: apnumber, intcomma, intword, naturalday, naturaltime, ordinal. contrib packages: Extra tools for web development. Located in django/contrib. Add package name to INSTALLED_APPS and run migrate for models/template tags. Includes: admin (admin interface, requires auth, contenttypes), auth (authentication), contenttypes (content types), flatpages (HTML content, requires sites), gis (geospatial), humanize (template filters), messages (temporary messages), postgres (PostgreSQL features), redirects (redirects), sessions (sessions), sites (multiple websites), sitemaps (sitemap XML), syndication (RSS/Atom feeds). Messages framework: one-time notification messages. Storage backends: SessionStorage, CookieStorage, FallbackStorage (default), BaseStorage (custom), MESSAGE_STORAGE setting. Message levels: DEBUG, INFO, SUCCESS, WARNING, ERROR, MESSAGE_LEVEL setting. Message tags: MESSAGE_TAGS setting. add_message(request, level, message, extra_tags='', fail_silently=False): add message. Shortcuts: debug, info, success, warning, error. get_messages(request): get messages, clears storage, storage.used=False to prevent. Message class: message, level, tags, extra_tags, level_tag attributes. Custom levels/tags. set_level(request, level), get_level(request): per-request level. extra_tags: custom tags. fail_silently: no error if disabled. SuccessMessageMixin: for class-based views, get_success_message(cleaned_data). django.contrib.postgres.aggregates: PostgreSQL specific aggregation functions. ArrayAgg(expression, distinct=False, filter=None, default=None, ordering=(), **extra): Returns list of values as array. distinct: array values distinct? ordering: result list ordering. BitAnd(expression, filter=None, default=None, **extra): Bitwise AND of non-null values. BitOr(expression, filter=None, default=None, **extra): Bitwise OR of non-null values. BitXor(expression, filter=None, default=None, **extra): Bitwise XOR of non-null values. Requires PostgreSQL 14+. BoolAnd(expression, filter=None, default=None, **extra): True if all true, else False. BoolOr(expression, filter=None, default=None, **extra): True if at least one true, else False. JSONBAgg(expressions, distinct=False, filter=None, default=None, ordering=(), **extra): Returns values as JSON array. StringAgg(expression, delimiter, distinct=False, filter=None, default=None, ordering=()): Concatenates to string with delimiter. Corr(y, x, filter=None, default=None): Correlation coefficient. CovarPop(y, x, sample=False, filter=None, default=None): Population covariance. sample=True for sample population. RegrAvgX(y, x, filter=None, default=None): Average of independent variable (x). RegrAvgY(y, x, filter=None, default=None): Average of dependent variable (y). RegrCount(y, x, filter=None): Count of non-null rows for x and y. RegrIntercept(y, x, filter=None, default=None): y-intercept of least-squares line. RegrR2(y, x, filter=None, default=None): Square of correlation coefficient. RegrSlope(y, x, filter=None, default=None): Slope of least-squares line. RegrSXX(y, x, filter=None, default=None): Sum of squares of independent variable. RegrSXY(y, x, filter=None, default=None): Sum of products of variables. RegrSYY(y, x, filter=None, default=None): Sum of squares of dependent variable. y, x: field name or numeric expression for statistical functions. ExclusionConstraint: Creates exclusion constraint in database (PostgreSQL). expressions: Iterable of (expression, operator). index_type: GIST or SPGIST. condition: Q object to restrict constraint. deferrable: Deferrable.DEFERRED or Deferrable.IMMEDIATE. include: List/tuple of fields to include. violation_error_code, violation_error_message. Raises IntegrityError on conflict. Example: ExclusionConstraint(expressions=[("timespan", RangeOperators.OVERLAPS), ("room", RangeOperators.EQUAL)], condition=Q(cancelled=False)) ArraySubquery(queryset): PostgreSQL ARRAY constructor. Returns a list of values from queryset (single column). Does not require GROUP BY. ArrayField(base_field, size=None, **options): Stores lists of data. base_field: required, specifies underlying data type. size: optional, maximum array size. Supports contains, contained_by, overlap, len, index transforms, slice transforms. HStoreField(**options): Stores key-value pairs (dict). Key lookups, contains, contained_by, has_key, has_any_keys, has_keys, keys, values. IntegerRangeField(**options): Stores a range of integers. BigIntegerRangeField(**options): Stores a range of large integers. DecimalRangeField(default_bounds='[)', **options): Stores a range of floating-point values. DateTimeRangeField(default_bounds='[)', **options): Stores a range of timestamps. DateRangeField(**options): Stores a range of dates. Range fields support contains, contained_by, overlap, lt, gt, lte, gte, fully_lt, fully_gt, not_lt, not_gt, adjacent_to, startswith, endswith, isempty, lower_inc, lower_inf, upper_inc, upper_inf. RangeField(**options): Base class for model range fields. RangeOperators: Defines range operators (EQUAL, NOT_EQUAL, CONTAINS, CONTAINED_BY, OVERLAPS, FULLY_LT, FULLY_GT, NOT_LT, NOT_GT, ADJACENT_TO). RangeBoundary(inclusive_lower=True, inclusive_upper=False): Represents range boundaries. SimpleArrayField(base_field, delimiter, max_length, min_length): Field for array data. SplitArrayField(base_field, size, remove_trailing_nulls): Field that repeats base_field. HStoreField: Field accepting JSON for HStoreField. Range Fields (IntegerRangeField, DecimalRangeField, DateTimeRangeField, DateRangeField): Based on MultiValueField. RangeWidget(base_widget, attrs): Widget for range fields. decompress(value): Returns (lower, upper) for range fields. PostgreSQL functions: RandomUUID: returns UUID v4, requires pgcrypto (< PG 13). TransactionNow: returns transaction start time. django.contrib.postgres: PostgreSQL specific features. Model fields, form fields, aggregations, constraints (ExclusionConstraint), expressions (ArraySubquery), fields (ArrayField, HStoreField, Range Fields), indexes (BloomIndex, BrinIndex, BTreeIndex, GinIndex, GistIndex, HashIndex, SpGistIndex, OpClass), lookups (Trigram similarity, Unaccent), migrations (CreateExtension, BloomExtension, BtreeGinExtension, BtreeGistExtension, CITextExtension, CryptoExtension, HStoreExtension, TrigramExtension, UnaccentExtension), validators (KeysValidator, Range validators). BloomIndex(*expressions, length=None, columns=(), **options): Creates a bloom index. Requires bloom extension. length: bits per index entry, default 80. columns: list of bits. BrinIndex(*expressions, autosummarize=None, pages_per_range=None, **options): Creates a BRIN index. autosummarize: autovacuum summarization. pages_per_range: pages per range. BTreeIndex(*expressions, fillfactor=None, deduplicate_items=None, **options): Creates a B-Tree index. fillfactor: packing of index pages, default 90. deduplicate_items: enable deduplication, default True. GinIndex(*expressions, fastupdate=None, gin_pending_list_limit=None, **options): Creates a gin index. Requires btree_gin extension for some data types. fastupdate: enable GIN Fast Update Technique. gin_pending_list_limit: max size of pending list. GistIndex(*expressions, buffering=None, fillfactor=None, **options): Creates a GiST index. buffering: enable/disable buffering. fillfactor: packing, default 90. HashIndex(*expressions, fillfactor=None, **options): Creates a hash index. fillfactor: packing, default 90. SpGistIndex(*expressions, fillfactor=None, **options): Creates an SP-GiST index. fillfactor: packing, default 90. OpClass(expression, name): Represents expression with custom operator class. name: operator class name. Example: Index(OpClass(Lower("username"), name="varchar_pattern_ops"), name="lower_username_idx"). PostgreSQL lookups: trigram_similar(expression) - returns results with trigram similarity > threshold. Use on CharField, TextField. trigram_word_similar(expression) - returns results with word trigram similarity > threshold. Use on CharField, TextField. trigram_strict_word_similar(expression) - like trigram_word_similar, word boundaries match. Use on CharField, TextField. unaccent(expression) - accent-insensitive lookups. Use on CharField, TextField. Warning: full table scans on large tables. CreateExtension(name) installs a PostgreSQL extension. AddIndexConcurrently(model_name, index) creates an index concurrently. RemoveIndexConcurrently(model_name, name) removes an index concurrently. AddConstraintNotValid(model_name, constraint) adds a constraint without validation. ValidateConstraint(model_name, name) validates a check constraint. django.contrib.postgres.search module provides full text search functions using PostgreSQL. SearchVector(*expressions, config=None, weight=None): Creates a search vector. SearchQuery(value, config=None, search_type='plain'): Creates a search query. search_type: 'plain', 'phrase', 'raw', 'websearch'. SearchRank(vector, query, weights=None, normalization=None, cover_density=False): Ranks search results. SearchHeadline(expression, query, config=None, start_sel=None, stop_sel=None, max_words=None, min_words=None, short_word=None, highlight_all=None, max_fragments=None, fragment_delimiter=None): Highlights search results. SearchVectorField: A model field for storing search vectors. TrigramSimilarity(expression, string, **extra): Returns trigram similarity. TrigramWordSimilarity(string, expression, **extra): Returns trigram word similarity. TrigramStrictWordSimilarity(string, expression, **extra): Returns trigram strict word similarity. TrigramDistance(expression, string, **extra): Returns trigram distance. TrigramWordDistance(string, expression, **extra): Returns trigram word distance. TrigramStrictWordDistance(string, expression, **extra): Returns trigram strict word distance. Requires the pg_trgm extension. KeysValidator(keys, strict=False, messages=None): Validates given keys in value. strict: no extra keys. messages: dict for errors. RangeMaxValueValidator(limit_value, message=None): Range upper bound <= limit_value. RangeMinValueValidator(limit_value, message=None): Range lower bound >= limit_value. Redirects app: Database redirects. Install: INSTALLED_APPS=['django.contrib.redirects'], MIDDLEWARE=['django.contrib.redirects.middleware.RedirectFallbackMiddleware'], migrate. RedirectFallbackMiddleware: Checks redirects on 404s. Redirects to new_path (301 default), 410 if new_path empty. models.Redirect: Model for redirects (site_id, old_path, new_path). RedirectFallbackMiddleware.response_gone_class: HttpResponseGone (410). RedirectFallbackMiddleware.response_redirect_class: HttpResponsePermanentRedirect (301 default). Sitemap Framework: views.sitemap(request, sitemaps, section=None, template_name='sitemap.xml', content_type='application/xml'): Generate sitemap.xml. views.index(request, sitemaps, template_name='sitemap_index.xml', content_type='application/xml', sitemap_url_name='django.contrib.sitemaps.views.sitemap'): Generate sitemap index. class Sitemap: items(): Required. Returns objects for sitemap. location(obj): Optional. Returns absolute URL for object. lastmod(obj): Optional. Returns last modified datetime. paginator: Optional. Paginator for items. changefreq: Optional. Change frequency. priority: Optional. Priority. protocol: Optional. 'http' or 'https'. limit: Optional. Max URLs per page. i18n: Optional. Enable i18n URLs. languages: Optional. Languages for alternate links. alternates: Optional. Include alternate language links. x_default: Optional. Include x-default link. get_latest_lastmod(): Optional. Latest lastmod value. get_languages_for_item(item): Optional. Languages for item. class GenericSitemap(info_dict, priority=None, changefreq=None, protocol=None): Sitemap from info_dict. info_dict: dict with queryset, optional date_field. Sites framework: Manage multiple websites in one Django project. models.Site: Model for website (domain, name). SITE_ID setting: Current site ID. get_current_site(request): Get current Site object. Site.objects.get_current(): Get current Site object without request. Site.objects.clear_cache(): Clear Site cache. managers.CurrentSiteManager: Model manager to filter by current site (ForeignKey 'site' or ManyToManyField 'sites' by default, or custom field name). middleware.CurrentSiteMiddleware: Sets request.site attribute. requests.RequestSite(request): Site-like object from HttpRequest (no DB). shortcuts.get_current_site(request): Returns Site or RequestSite. staticfiles app: Collects static files to single location for production. Settings: STORAGES STATIC_ROOT STATIC_URL STATICFILES_DIRS STATICFILES_FINDERS Management Commands collectstatic: Collects static files to STATIC_ROOT. Options: --noinput: No user prompts. --ignore PATTERN: Ignore glob patterns. --dry-run: Dry run. --clear: Clear existing files. --link: Create symbolic links. --no-post-process: Skip post_process(). --no-default-ignore: Don't ignore default patterns. Customizing ignore_patterns: Override StaticFilesConfig.ignore_patterns. findstatic staticfile: Searches for static files. Options: --first: First match only. --verbosity [0,1,2]: Output verbosity. runserver [addrport]: Serves static files in development if DEBUG=True. Options: --nostatic: Disable static file serving. --insecure: Force serving even if DEBUG=False (insecure). Storages StaticFilesStorage: Uses STATIC_ROOT, STATIC_URL. StaticFilesStorage.post_process(paths, **options): Post-processes files after collectstatic, yields (original_path, processed_path, processed). ManifestStaticFilesStorage: Subclass of StaticFilesStorage, appends MD5 hash to filenames for long-term caching. Replaces paths in files with hashed versions. Uses post_process(). Attributes: manifest_hash: Hash of manifest. max_post_process_passes: Max post-processing passes. manifest_strict: Raise ValueError if file not in manifest. file_hash(name, content=None): Calculates file hash. ManifestFilesMixin: Mixin for hash appending. Finders finders.find(path): Finds static file path. finders.searched_locations: List of searched directories. Other Helpers template context_processors.static: Adds STATIC_URL. template tag static path: URLs static path. template tag get_static_prefix: Gets STATIC_URL. template tag get_media_prefix: Gets MEDIA_URL. storage.storages['staticfiles']: Staticfiles storage instance. Static file development view views.serve(request, path): Serves static files in development (DEBUG=True). urls.staticfiles_urlpatterns(): Returns URL patterns for serving static files (DEBUG=True, STATIC_URL not full URL). Specialized test case testing.StaticLiveServerTestCase: For live testing with static files served by finders. Feed framework: Create RSS/Atom feeds. Feed class: subclasses django.contrib.syndication.views.Feed. Methods: items(), item_title(), item_description(), get_object(), get_context_data(). Attributes: title, link, description, feed_type, language, title_template, description_template. feed_type: django.utils.feedgenerator.Rss201rev2Feed, Atom1Feed. SyndicationFeed: Low-level framework in django.utils.feedgenerator.SyndicationFeed. Methods: add_item(), write(), writeString(). CSRF protection prevents Cross Site Request Forgeries. It uses a CSRF cookie, a hidden form field ('csrfmiddlewaretoken'), and verifies the Origin header and Referer. Decorators: csrf_exempt(view), csrf_protect(view), requires_csrf_token(view), ensure_csrf_cookie(view). Settings: CSRF_COOKIE_AGE, CSRF_COOKIE_DOMAIN, CSRF_COOKIE_HTTPONLY, CSRF_COOKIE_NAME, CSRF_COOKIE_PATH, CSRF_COOKIE_SAMESITE, CSRF_COOKIE_SECURE, CSRF_FAILURE_VIEW, CSRF_HEADER_NAME, CSRF_TRUSTED_ORIGINS, CSRF_USE_SESSIONS. Databases: PostgreSQL, MariaDB, MySQL, Oracle, SQLite supported. 3rd-party backends available. Persistent connections (CONN_MAX_AGE): seconds, None (unlimited), 0 (default off). Connection Management: reuses connections, closes after max age or error. Encoding: UTF-8 assumed. PostgreSQL: 13+, psycopg 3.1.8+ or psycopg2 2.8.4+. OPTIONS: connection kwargs, service/passfile. client_encoding, isolation_level (READ COMMITTED default), timezone settings. assume_role, pool (psycopg[pool]/psycopg-pool, Django 5.1+), server_side_binding (psycopg 3.1.8+). varchar/text indexes, CreateExtension op, server-side cursors (iterator(), cursor_tuple_fraction). DISABLE_SERVER_SIDE_CURSORS for transaction pooling. sqlsequencereset for auto-increment keys. TEST['TEMPLATE'], non-durable test settings. MariaDB: 10.5+, use MySQL backend. MySQL: 8.0.11+, UTF-8, InnoDB (default, transactional), MyISAM (no tx). Drivers: mysqlclient (recommended), MySQL Connector/Python. mysql_tzinfo_to_sql for timezones. CREATE DATABASE <dbname> CHARACTER SET utf8;. Collation: db_collation, utf8_general_ci (case-insensitive), utf8_bin (case-sensitive). OPTIONS, NAME, USER, PASSWORD, HOST, PORT, option files. sql_mode (STRICT_TRANS_TABLES). isolation_level (READ COMMITTED Django default). init_command - SET default_storage_engine=INNODB; for table creation. lowercase table names. Savepoints (InnoDB). CharField/SlugField max_length 255 with unique=True. TextField no unique=True. DATETIME(6) for fractional seconds (manual update). USE_TZ=False for legacy TIMESTAMP. select_for_update() limitations. String typecasting in queries. SQLite: 3.31.0+, dev DB. contains (case-insensitive), iexact (case-sensitive non-ASCII). Decimal: REAL type, not exact. "Database is locked" errors (concurrency). timeout option. transaction_mode (DEFERRED default, IMMEDIATE, EXCLUSIVE), ATOMIC_REQUESTS discouraged with IMMEDIATE/EXCLUSIVE. select_for_update() no effect. iterator() isolation. JSON1 extension for JSONField. init_command - PRAGMA options (Django 5.1+). Oracle: 19c+, oracledb 1.3.2+. Privileges: CREATE TABLE, SEQUENCE, PROCEDURE, TRIGGER, USER, TABLESPACE, SESSION/TABLE/SEQUENCE/PROCEDURE/TRIGGER/VIEW/MATERIALIZED VIEW WITH ADMIN, DBA role, EXECUTE on SYS.DBMS_LOB/RANDOM. Connection: NAME (service name/DSN), USER, PASSWORD, HOST, PORT. threaded=True in OPTIONS for multithreaded. use_returning_into=False in OPTIONS to disable RETURNING INTO. 30 char name limit, uppercase, quoted names. NULL=empty string. TextField: NCLOB, no PK/index/DISTINCT, defer()+distinct() workaround. Subclassing backends: mydbengine/base.py, DatabaseWrapper, ENGINE="mydbengine". 3rd-party: CockroachDB, Firebird, Spanner, MSSQL, Snowflake, TiDB, YugabyteDB. django-admin and manage.py are command-line utilities. django-admin <command> [options] manage.py <command> [options] python -m django <command> [options] Commands: check, compilemessages, createcachetable, dbshell, diffsettings, dumpdata, flush, inspectdb, loaddata, makemessages, makemigrations, migrate, optimizemigration, runserver, sendtestemail, shell, showmigrations, sqlflush, sqlmigrate, sqlsequencereset, squashmigrations, startapp, startproject, test, testserver. Default options: --pythonpath, --settings, --traceback, --verbosity, --no-color, --force-color, --skip-checks. call_command(name, *args, **options) Executes a management command from code. Django Exceptions. AppRegistryNotReady: Exception raised when models used before app loading. ObjectDoesNotExist: Base for Model.DoesNotExist exceptions. EmptyResultSet: Raised if query returns no results. FullResultSet: Raised if query matches everything. FieldDoesNotExist: Raised by model._meta.get_field() if field not found. MultipleObjectsReturned: Base for Model.MultipleObjectsReturned exceptions. SuspiciousOperation: Raised for suspicious security operations. Subclasses: DisallowedHost, DisallowedModelAdminLookup, DisallowedModelAdminToField, DisallowedRedirect, InvalidSessionKey, RequestDataTooBig, SuspiciousFileOperation, SuspiciousMultipartForm, SuspiciousSession, TooManyFieldsSent, TooManyFilesSent. PermissionDenied: Raised for unauthorized action. ViewDoesNotExist: Raised by django.urls if view not found. MiddlewareNotUsed: Raised when middleware is not used. ImproperlyConfigured: Raised for configuration errors. FieldError: Raised for model field problems. ValidationError: Raised for form/model validation failures. NON_FIELD_ERRORS: Key for non-field validation errors. BadRequest: Raised for client errors in request. RequestAborted: Raised for cut-off HTTP body. SynchronousOnlyOperation: Raised for sync code in async context. URL Resolver Exceptions. Resolver404: Raised by resolve() if path doesn't map to a view. NoReverseMatch: Raised by django.urls if URL not found based on params. Database Exceptions: Error, InterfaceError, DatabaseError, DataError, OperationalError, IntegrityError, InternalError, ProgrammingError, NotSupportedError. models.ProtectedError: Raised to prevent deletion with PROTECT. Subclass of IntegrityError. models.RestrictedError: Raised to prevent deletion with RESTRICT. Subclass of IntegrityError. HTTP Exceptions. UnreadablePostError: Raised when upload cancelled. Sessions Exceptions. SessionInterrupted: Raised when session destroyed in concurrent request. Subclass of BadRequest. Transaction Exceptions. TransactionManagementError: Raised for transaction problems. Testing Framework Exceptions. client.RedirectCycleError: Raised for redirect loop. Python Exceptions: Built-in Python exceptions. File handling classes. File(file_object, name=None): Wraps a Python file object. Attributes: name, size, file, mode. Methods: open(mode=None, *args, **kwargs), __iter__(), chunks(chunk_size=None), multiple_chunks(chunk_size=None), close(). ContentFile(content, name=None): Inherits from File, operates on string content. ImageFile(file_object, name=None): Inherits from File, for images; adds width, height. File.save(name, content, save=True): Saves a new file. File.delete(save=True): Removes the file. File: File object. ContentFile: subclass of File. ImageFile: subclass of File. File storage API. DefaultStorage: Lazy access to default storage from STORAGES. default_storage: Instance of DefaultStorage. FileSystemStorage(location=None, base_url=None, file_permissions_mode=None, directory_permissions_mode=None, allow_overwrite=False): Stores files on local filesystem. location: MEDIA_ROOT. base_url: MEDIA_URL. file_permissions_mode: FILE_UPLOAD_PERMISSIONS. directory_permissions_mode: FILE_UPLOAD_DIRECTORY_PERMISSIONS. allow_overwrite: If existing files can be overwritten. InMemoryStorage(location=None, base_url=None): Memory-based storage, no persistence. Storage: Standardized API for file storage. delete(name): Deletes file, raises NotImplementedError if not supported. exists(name): Returns True if file exists. get_accessed_time(name): Last accessed time, raises NotImplementedError if not supported. get_alternative_name(file_root, file_ext): Returns alternative filename. get_available_name(name, max_length=None): Returns available filename, raises SuspiciousFileOperation if not found. get_created_time(name): Creation time, raises NotImplementedError if not supported. get_modified_time(name): Last modified time, raises NotImplementedError if not supported. get_valid_name(name): Returns valid filename. generate_filename(filename): Validates filename, calls get_valid_name(). listdir(path): Lists directory contents, raises NotImplementedError if not supported. open(name, mode='rb'): Opens file, returns File object. path(name): Local filesystem path, raises NotImplementedError if not accessible. save(name, content, max_length=None): Saves new file, returns filename. size(name): Returns file size, raises NotImplementedError if not supported. url(name): Returns file URL, raises NotImplementedError if not supported. UploadedFile: read(), multiple_chunks(chunk_size=None), chunks(chunk_size=None), name, size, content_type. TemporaryUploadedFile: temporary_file_path(). InMemoryUploadedFile. Form: base class for forms. Form.is_bound: bool, indicates if form is bound to data. Form.clean(): custom validation for interdependent fields. Form.is_valid(): validates data, returns bool. Form.errors: dict of error messages. Form.errors.as_data(): returns dict of ValidationError instances. Form.errors.as_json(escape_html=False): returns errors as JSON. Form.errors.get_json_data(escape_html=False): returns errors as a dict for JSON. Form.add_error(field, error): adds errors to specific fields. Form.has_error(field, code=None): bool, checks for errors. Form.non_field_errors(): returns non-field errors. Form.initial: declares initial field values. Form.get_initial_for_field(field, field_name): returns initial data for a field. Form.has_changed(): checks if data has changed. Form.changed_data: list of changed fields. Form.fields: access form fields. Form.cleaned_data: access cleaned data. Form.template_name: template name for rendering. Form.render(template_name=None, context=None, renderer=None): renders the form. Form.get_context(): returns template context. Form.template_name_label: template for field labels. Form.template_name_div: template for as_div(). Form.as_div(): renders as divs. Form.template_name_p: template for as_p(). Form.as_p(): renders as paragraphs. Form.template_name_ul: template for as_ul(). Form.as_ul(): renders as unordered list. Form.template_name_table: template for as_table(). Form.as_table(): renders as table. Form.error_css_class: CSS class for erroneous rows. Form.required_css_class: CSS class for required rows. Form.auto_id: controls id and label behavior. Form.label_suffix: suffix for labels. Form.use_required_attribute: uses the required HTML attribute. Form.default_renderer: specifies renderer. Form.field_order: custom field ordering. Form.order_fields(field_order): reorders fields. ErrorList(initlist=None, error_class=None, renderer=None): formats validation errors. ErrorList.as_text(): renders as text. ErrorList.as_ul(): renders as unordered list. BoundField: represents a single form field. BoundField.auto_id: HTML ID. BoundField.data: field data. BoundField.errors: list of errors. BoundField.field: Field instance. BoundField.form: Form instance. BoundField.help_text: help text. BoundField.html_name: HTML name. BoundField.id_for_label: ID for label. BoundField.initial: initial data. BoundField.is_hidden: True if widget is hidden. BoundField.label: field label. BoundField.name: field name. BoundField.template_name: template name. BoundField.use_fieldset: use_fieldset attribute. BoundField.widget_type: widget's class name. BoundField.as_field_group(): renders field group. BoundField.as_hidden(attrs=None, **kwargs): renders as hidden. BoundField.as_widget(widget=None, attrs=None, only_initial=False): renders the widget. BoundField.css_classes(extra_classes=None): CSS classes. BoundField.get_context(): returns template context. BoundField.label_tag(contents=None, attrs=None, label_suffix=None, tag=None): renders label tag. BoundField.legend_tag(contents=None, attrs=None, label_suffix=None): renders legend tag. BoundField.render(template_name=None, context=None, renderer=None): renders the field. BoundField.value(): renders raw value. Field.get_bound_field(form, field_name): returns BoundField instance. Form.is_multipart(): checks if form is multipart. Form.prefix: form prefix. Field.clean(value) Cleans the input value and returns it or raises ValidationError. Field.required If True, the field is required. Default is True. Field.label Human-friendly label for the field. Field.label_suffix Suffix for the field label. Field.initial Initial value for the field in an unbound form. Field.widget Widget to use for rendering the field. Field.help_text Descriptive text for the field. Field.error_messages Dictionary of error messages to override. Field.validators List of validation functions for the field. Field.localize Enables localization of form data. Field.disabled If True, the field is disabled. Field.template_name Template used when rendering the field. Field.has_changed() Checks if the field value has changed from the initial value. BooleanField(**kwargs) Default widget: CheckboxInput. Empty value: False. Normalizes to: Python True/False. CharField(**kwargs) Default widget: TextInput. Empty value: ''. Normalizes to: string. max_length, min_length, strip. ChoiceField(**kwargs) Default widget: Select. Empty value: ''. Normalizes to: string. choices: iterable of 2-tuples (value, label). DateField(**kwargs) Default widget: DateInput. Empty value: None. Normalizes to: datetime.date. input_formats: iterable of date formats. DateTimeField(**kwargs) Default widget: DateTimeInput. Empty value: None. Normalizes to: datetime.datetime. input_formats: iterable of datetime formats. DecimalField(**kwargs) Default widget: NumberInput/TextInput. Empty value: None. Normalizes to: decimal. max_value, min_value, max_digits, decimal_places, step_size. DurationField(**kwargs) Default widget: TextInput. Empty value: None. Normalizes to: timedelta. EmailField(**kwargs) Default widget: EmailInput. Empty value: ''. Normalizes to: string. max_length, min_length. FileField(**kwargs) Default widget: ClearableFileInput. Empty value: None. Normalizes to: UploadedFile. max_length, allow_empty_file. FilePathField(**kwargs) Default widget: Select. Empty value: ''. Normalizes to: string. path: directory path, recursive, match, allow_files, allow_folders. FloatField(**kwargs) Default widget: NumberInput/TextInput. Empty value: None. Normalizes to: float. max_value, min_value, step_size. GenericIPAddressField(**kwargs) Default widget: TextInput. Empty value: ''. Normalizes to: string. protocol: IPv4, IPv6, both. unpack_ipv4. ImageField(**kwargs) Default widget: ClearableFileInput. Empty value: None. Normalizes to: UploadedFile. Requires Pillow. IntegerField(**kwargs) Default widget: NumberInput/TextInput. Empty value: None. Normalizes to: integer. max_value, min_value, step_size. JSONField(encoder=None, decoder=None, **kwargs) Default widget: Textarea. Empty value: None. Normalizes to: Python representation. encoder, decoder. MultipleChoiceField(**kwargs) Default widget: SelectMultiple. Empty value: []. Normalizes to: list of strings. choices. NullBooleanField(**kwargs) Default widget: NullBooleanSelect. Empty value: None. Normalizes to: True/False/None. RegexField(**kwargs) Default widget: TextInput. Empty value: ''. Normalizes to: string. regex, max_length, min_length, strip. SlugField(**kwargs) Default widget: TextInput. Empty value: ''. Normalizes to: string. allow_unicode. TimeField(**kwargs) Default widget: TimeInput. Empty value: None. Normalizes to: datetime.time. input_formats. TypedChoiceField(**kwargs) Default widget: Select. Empty value: ''. Normalizes to: coerced value. coerce, empty_value. TypedMultipleChoiceField(**kwargs) Default widget: SelectMultiple. Empty value: ''. Normalizes to: list of coerced values. coerce, empty_value. URLField(**kwargs) Default widget: URLInput. Empty value: ''. Normalizes to: string. max_length, min_length, assume_scheme. UUIDField(**kwargs) Default widget: TextInput. Empty value: None. Normalizes to: UUID. ComboField(**kwargs) Default widget: TextInput. Empty value: ''. Normalizes to: string. fields: list of fields to validate against. MultiValueField(fields=(), **kwargs) Default widget: TextInput. Empty value: ''. Normalizes to: subclass-defined. fields: tuple of fields, require_all_fields, widget, compress(data_list). SplitDateTimeField(**kwargs) Default widget: SplitDateTimeWidget. Empty value: None. Normalizes to: datetime.datetime. input_date_formats, input_time_formats. ModelChoiceField(**kwargs) Default widget: Select. Empty value: None. Normalizes to: model instance. queryset, empty_label, to_field_name, blank, iterator. ModelMultipleChoiceField(**kwargs) Default widget: SelectMultiple. Empty value: empty QuerySet. Normalizes to: QuerySet of model instances. queryset, to_field_name, iterator. ModelChoiceIterator(field), ModelChoiceIteratorValue(value, instance). formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None) Returns a FormSet class. Forms API: Includes bound/unbound forms, field validation, custom fields, widgets, and formsets. Functions: modelform_factory, modelformset_factory, inlineformset_factory, formset_factory. Raising ValidationError. Model Form Functions: modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None, localized_fields=None, labels=None, help_texts=None, error_messages=None, field_classes=None): Returns a ModelForm class. Must provide fields or exclude. Raises ImproperlyConfigured if fields are omitted. modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False): Returns a FormSet class. inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False): Returns an InlineFormSet. Specify fk_name if the model has multiple ForeignKeys to parent_model. BaseRenderer class for form renderers. form_template_name: default template for forms "django/forms/div.html". formset_template_name: default template for formsets "django/forms/formsets/div.html". field_template_name: default template for fields "django/forms/field.html". get_template(template_name): finds template, subclasses must implement. render(template_name, context, request=None): renders template, raises TemplateDoesNotExist. DjangoTemplates class: renderer using DjangoTemplates engine, loads templates from django/forms/templates and installed apps. DjangoDivFormRenderer class: alias of DjangoTemplates, deprecated. Jinja2 class: renderer using Jinja2 engine, templates in django/forms/jinja2 and installed apps in jinja2 dir. Jinja2DivFormRenderer class: alias of Jinja2, deprecated. TemplatesSetting class: renderer using TEMPLATES setting for template sourcing, requires 'django.forms' in INSTALLED_APPS or built-in template dir in DIRS. Form Validation: to_python(): converts data to Python type. validate(): field-specific validation. clean_(): field-specific cleaning. Form.clean(): cross-field validation. ValidationError: raises validation errors, supports error codes & params, use gettext. add_error(field, error): adds error to a specific field. Widgets: Django's HTML input element representation. Handles HTML rendering and data extraction. Widget: Widget(attrs=None) Base widget class. attrs: dict of HTML attributes. render(name, value, attrs=None, renderer=None) Renders widget to HTML. value_from_datadict(data, files, name) Returns widget value from data. MultiWidget: MultiWidget(widgets, attrs=None) Widget composed of multiple widgets. widgets: iterable of widgets. decompress(value) Decompresses field's value into widget values, returns list. TextInput: input_type='text'. Renders as <input type="text">. NumberInput: input_type='number'. Renders as <input type="number">. EmailInput: input_type='email'. Renders as <input type="email">. URLInput: input_type='url'. Renders as <input type="url">. PasswordInput: input_type='password', render_value=False. Renders as <input type="password">. HiddenInput: input_type='hidden'. Renders as <input type="hidden">. DateInput: input_type='text', format=None. Renders as <input type="text">. DateTimeInput: input_type='text', format=None. Renders as <input type="text">. TimeInput: input_type='text', format=None. Renders as <input type="text">. Textarea: Renders as <textarea></textarea>. CheckboxInput: input_type='checkbox', check_test=None. Renders as <input type="checkbox">. Select: choices=None. Renders as <select><option>...</select>. NullBooleanSelect: Select widget with 'Unknown', 'Yes', 'No' options. SelectMultiple: Renders as <select multiple>...</select>. RadioSelect: Renders as radio buttons in <div> tags. CheckboxSelectMultiple: Renders as checkboxes in <div> tags. FileInput: Renders as <input type="file">. ClearableFileInput: Renders as <input type="file"> with clear checkbox. MultipleHiddenInput: Renders multiple <input type="hidden"> tags. SplitDateTimeWidget: date_format=None, time_format=None. Uses DateInput and TimeInput. SplitHiddenDateTimeWidget: Uses HiddenInput for date and time. SelectDateWidget: years=None, months=None, empty_label=None. Uses three Select widgets for month, day and year. API Reference: Applications, System check framework, Class-based views, Clickjacking Protection, CSRF protection, Databases, django-admin, manage.py, Django Exceptions, File handling, Forms, Logging, Middleware, Migration Operations, Models, Paginator, Request/Response, SchemaEditor, Settings, Signals, Templates, TemplateResponse, Unicode, django.urls, Django Utils, Validators, Built-in Views. Django logging extends Python logging. Configured in django.setup(). Default config uses dictConfig. DEBUG=True: django logger (except django.server) INFO+ to console. DEBUG=False: django logger (except django.server) ERROR/CRITICAL to AdminEmailHandler. Always: django.server logger INFO+ to console. Loggers: django (parent), django.request (request handling, status_code, request), django.server (runserver requests, status_code, request (socket)), django.template (template rendering, DEBUG level for missing context), django.db.backends (SQL queries, DEBUG level, duration, sql, params, alias), django.utils.autoreload (code reload), django.contrib.gis (GeoDjango), django.dispatch (signals, receiver, err), django.security.* (security errors), django.db.backends.schema (schema changes, params, sql), django.contrib.sessions. Handlers: AdminEmailHandler(include_html=False, email_backend=None, reporter_class=None) sends emails to ADMINS, send_mail(subject, message, *args, **kwargs). Filters: CallbackFilter(callback), RequireDebugFalse, RequireDebugTrue. Middleware: Cache, Common, BrokenLinkEmails, GZip, ConditionalGet, Locale, Message, Security, Session, Site, Authentication, LoginRequired, RemoteUser, PersistentRemoteUser, CsrfView, XFrameOptions. SecurityMiddleware: HSTS, Referrer Policy, COOP, X-Content-Type-Options, SSL Redirect. LoginRequiredMiddleware: redirects unauthenticated requests. Uses login_not_required, login_required(). Schema Operations: CreateModel(name, fields, options, bases, managers) creates a model, deletes the model, and renames the model. AlterModelTable(name, table) changes the model's table name. AlterModelTableComment(name, table_comment) changes table comment. AlterUniqueTogether(name, unique_together) changes unique constraints. AlterIndexTogether(name, index_together) changes custom indexes. AlterOrderWithRespectTo(name, order_with_respect_to) changes the _order column. AlterModelOptions(name, options) changes model options. AlterModelManagers(name, managers) alters the managers available during migrations. AddField(model_name, name, field, preserve_default) adds a field. RemoveField(model_name, name) removes a field. AlterField(model_name, name, field, preserve_default) alters a field's definition. RenameField(model_name, old_name, new_name) changes a fieldâ€™s name. AddIndex(model_name, index) creates an index. RemoveIndex(model_name, name) removes an index. RenameIndex(model_name, new_name, old_name, old_fields) renames an index. AddConstraint(model_name, constraint) creates a constraint. RemoveConstraint(model_name, name) removes a constraint. Special Operations: RunSQL(sql, reverse_sql, state_operations, hints, elidable) runs arbitrary SQL. RunPython(code, reverse_code, atomic, hints, elidable) runs custom Python code. SeparateDatabaseAndState(database_operations, state_operations) mixes database and state operations. OperationCategory: Categories of migration operation used by the makemigrations command. Writing your own Operations: define methods: state_forwards, database_forwards, database_backwards, describe. LoadExtension(name) runs a PostgreSQL extension command. Model.DoesNotExist: Exception raised when an object is not found. Model.MultipleObjectsReturned: Exception raised when multiple objects are found. Model.objects: Manager instance (required for each non-abstract Model). Conditional Expressions: if/elif/else logic in filters, annotations, aggregations, updates. When(condition, then, **lookups): encapsulates condition and result. Condition: field lookups, Q objects, Expression objects (BooleanField output_field). Result: then. Case(*cases, default): evaluates When objects in order, returns first true condition's result. default: returned if no condition is true (else None). Usage: annotations, aggregations, filters, lookups, updates. Example: Case(When(account_type=Client.GOLD, then=Value("5%")), default=Value("0%")). Constraints: Added in model Meta.constraints. Must specify unique name. Use '%(app_label)s' and '%(class)s' for abstract base classes. BaseConstraint(*name, violation_error_code=None, violation_error_message=None): Base class for constraints. name: Unique constraint name. violation_error_code: Error code for ValidationError. violation_error_message: Error message for ValidationError. validate(model, instance, exclude=None, using=DEFAULT_DB_ALIAS): Validates constraint on the instance, raises ValidationError if violated. CheckConstraint(*, condition, name, violation_error_code=None, violation_error_message=None): Creates a check constraint. condition: Q object or boolean Expression for the constraint. Example: CheckConstraint(condition=Q(age__gte=18), name='age_gte_18') UniqueConstraint(*expressions, fields=(), name=None, condition=None, deferrable=None, include=None, opclasses=(), nulls_distinct=None, violation_error_code=None, violation_error_message=None): Creates a unique constraint. expressions: Functional unique constraints on expressions/functions. fields: List of field names for the constraint. condition: Q object for conditional constraint. deferrable: Deferrable.DEFERRED or Deferrable.IMMEDIATE. include: List of fields to include in the covering index (PostgreSQL only). opclasses: PostgreSQL operator classes. nulls_distinct: Whether rows with NULL values are distinct (PostgreSQL 15+). violation_error_code: Error code for ValidationError. violation_error_message: Error message for ValidationError. Database Functions. Cast(expression, output_field): Forces expression to output_field type. Coalesce(*expressions): Returns first non-null expression. Arguments must be of similar type. MySQL Python values may need explicit casting. Collate(expression, collation): Applies collation to expression for querying. Greatest(*expressions): Returns greatest expression value, null if any are null in SQLite/Oracle/MySQL, largest non-null in PostgreSQL. JSONObject(**fields): Returns JSON object from key-value pairs. Least(*expressions): Returns least expression value, null if any are null in SQLite/Oracle/MySQL, smallest non-null in PostgreSQL. NullIf(expression1, expression2): Returns None if expressions are equal, else expression1. Oracle returns empty string for CharField. Date functions. Extract(expression, lookup_name, tzinfo=None): Extracts date component by lookup_name (year, month, day, hour, minute, second, week_day, iso_week_day, week, iso_year, quarter). ExtractYear(expression, tzinfo=None): Extracts year. ExtractIsoYear(expression, tzinfo=None): Extracts ISO year. ExtractMonth(expression, tzinfo=None): Extracts month. ExtractDay(expression, tzinfo=None): Extracts day. ExtractWeekDay(expression, tzinfo=None): Extracts week day (1-7, Sunday-Saturday). ExtractIsoWeekDay(expression, tzinfo=None): Extracts ISO week day (1-7, Monday-Sunday). ExtractWeek(expression, tzinfo=None): Extracts week number. ExtractQuarter(expression, tzinfo=None): Extracts quarter. ExtractHour(expression, tzinfo=None): Extracts hour. ExtractMinute(expression, tzinfo=None): Extracts minute. ExtractSecond(expression, tzinfo=None): Extracts second. Now(): Returns database server's current date and time (STATEMENT_TIMESTAMP on PostgreSQL, LOCALTIMESTAMP on Oracle). Trunc(expression, kind, output_field=None, tzinfo=None): Truncates date to kind (year, quarter, month, week, day, hour, minute, second). Output depends on output_field. TruncYear(expression, output_field=None, tzinfo=None): Truncates to year. TruncMonth(expression, output_field=None, tzinfo=None): Truncates to month. TruncWeek(expression, output_field=None, tzinfo=None): Truncates to week (Monday midnight). TruncQuarter(expression, output_field=None, tzinfo=None): Truncates to quarter. TruncDate(expression, tzinfo=None): Truncates to date. TruncTime(expression, tzinfo=None): Truncates to time. TruncDay(expression, output_field=None, tzinfo=None): Truncates to day. TruncHour(expression, output_field=None, tzinfo=None): Truncates to hour. TruncMinute(expression, output_field=None, tzinfo=None): Truncates to minute. TruncSecond(expression, output_field=None, tzinfo=None): Truncates to second. Math Functions. Abs(expression): Absolute value. ACos(expression): Arccosine. ASin(expression): Arcsine. ATan(expression): Arctangent. ATan2(expression1, expression2): Arctangent of expression1/expression2. Ceil(expression): Smallest integer >= expression. Cos(expression): Cosine. Cot(expression): Cotangent. Degrees(expression): Radians to degrees. Exp(expression): e^expression. Floor(expression): Largest integer <= expression. Ln(expression): Natural logarithm. Log(expression1, expression2): Logarithm of expression2 base expression1. Mod(expression1, expression2): Modulo. Pi(): Constant Ï€. Power(expression1, expression2): expression1^expression2. Radians(expression): Degrees to radians. Random(): Random value [0.0, 1.0). Round(expression, precision=0): Rounds to precision decimals. Sign(expression): Sign (-1, 0, 1). Sin(expression): Sine. Sqrt(expression): Square root. Tan(expression): Tangent. Text functions. Chr(expression): Character from Unicode code point. Concat(*expressions, output_field=CharField()): Concatenates text expressions. Left(expression, length): First length characters. Length(expression): String length. Lower(expression): Lowercase. LPad(expression, length, fill_text=Value(' ')): Left-pad with fill_text to length. LTrim(expression): Remove leading spaces. MD5(expression): MD5 hash. Ord(expression): Unicode code point of first char. Repeat(expression, number): Repeats expression number times. Replace(expression, text, replacement=Value('')): Replaces text with replacement. Reverse(expression): Reverses string. Right(expression, length): Last length characters. RPad(expression, length, fill_text=Value(' ')): Right-pad with fill_text to length. RTrim(expression): Remove trailing spaces. SHA1(expression), SHA224(expression), SHA256(expression), SHA384(expression), SHA512(expression): SHA hashes. PostgreSQL pgcrypto extension needed. Oracle no SHA224. StrIndex(string, substring): 1-indexed position of substring in string, 0 if not found. Case-sensitive in MySQL by default. Substr(expression, pos, length=None): Substring from pos (1-indexed) with length. Trim(expression): Remove leading/trailing spaces. Upper(expression): Uppercase. Window functions. CumeDist(*expressions): Cumulative distribution. DenseRank(*expressions): Rank without gaps. FirstValue(expression): First value in window frame. Lag(expression, offset=1, default=None): Value offset by offset. MariaDB no default. LastValue(expression): Last value in window frame. Lead(expression, offset=1, default=None): Leading value. MariaDB no default. NthValue(expression, nth=1): Nth value in window. Oracle may return empty string not None. Ntile(num_buckets=1): Bucket number (1 to num_buckets). PercentRank(*expressions): Relative rank. Rank(*expressions): Rank with gaps. RowNumber(*expressions): Row number. Query Expressions: Value/computation in update/create/filter/order_by/annotate/aggregate. Supported arithmetic: negation, addition, subtraction, multiplication, division, modulo, power. output_field: model field instance. Required when Django can't determine field type. class F(): Represents model field value. Uses SQL expression. reporter.stories_filed = F("stories_filed") + 1; reporter.save(). Use update() for QuerySets. Slicing: writer.name = F("name")[1:5] Avoids race conditions. F() assignments persist after Model.save(). Use refresh_from_db(). Used in filters and annotations: Company.objects.annotate(chairs_needed=F("num_employees") - F("num_chairs")) Use ExpressionWrapper for different types. Returns primary key for relational fields. Sort nulls: F("last_contacted").desc(nulls_last=True) Logical operations: Company.objects.update(is_active=~F("is_active")) class Func(*expressions, **extra): Base for database functions. function: class attribute for function name. template: SQL format string. arg_joiner: joins expressions. as_sql(compiler, connection, function=None, template=None, arg_joiner=None, **extra_context): Generates SQL fragment. Returns (sql, params). Vendor-specific methods: as_vendor(). Positional arguments are expressions/values. Strings are column references. output_field: defines return type. class Aggregate(*expressions, output_field=None, distinct=False, filter=None, default=None, **extra): Requires GROUP BY. template: SQL format string. function: aggregate function name. distinct: apply to distinct values. filter: Q object to filter rows. default: value if no entries. Creating Aggregate Functions: Define function, customize SQL. class Value(value, output_field=None): Represents a simple value. Used implicitly. Use for strings. class ExpressionWrapper(expression, output_field): Provides output_field for expressions. Conditional expressions: Use if/elif/else logic in queries (SQL CASE). class Subquery(queryset, output_field=None): Adds subquery to QuerySet. Post.objects.annotate(newest_commenter_email=Subquery(newest.values("email")[:1])) OuterRef(field): Refers to field from outer query. Limit subquery to single column: values(). To single row: [:1]. class Exists(queryset): Subquery subclass using SQL EXISTS. Post.objects.annotate(recent_comment=Exists(recent_comments)) Filter with ~Exists(). class RawSQL(sql, params, output_field=None): Complex WHERE clauses. queryset.annotate(val=RawSQL("select col from sometable where othercol = %s", (param,))) Protect against SQL injection using params. class Window(expression, partition_by=None, order_by=None, frame=None, output_field=None): Applies functions on partitions. expression: window/aggregate function. partition_by: partitioning rows. order_by: ordering. frame: which rows to use. Filtering against window functions: lookups must not be disjunctive. class ValueRange(start=None, end=None, exclusion=None): frame_type is 'RANGE'. class RowRange(start=None, end=None, exclusion=None): frame_type is 'ROWS'. Exclusion argument added in 5.1: CURRENT_ROW, GROUP, TIES, NO_OTHERS class Expression: Base class for query expressions. allowed_default: Can be used in Field.db_default. constraint_validation_compatible: Can be used during a constraint validation. contains_aggregate: Contains an aggregate. contains_over_clause: Contains a Window expression. filterable: Can be used in QuerySet.filter(). window_compatible: Can be used as source in Window. resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False): Preprocessing/validation. get_source_expressions(): Returns inner expressions. set_source_expressions(expressions). relabeled_clone(change_map): Clones with relabeled column aliases. convert_value(value, expression, connection): Coerces value to appropriate type. get_group_by_cols(): Returns column references. asc(nulls_first=None, nulls_last=None). desc(nulls_first=None, nulls_last=None). reverse_ordering(). Writing Query Expressions: Implement COALESCE function example. Avoiding SQL injection: Do not use user input in Func's keyword arguments. Adding support in third-party database backends: Monkey patch methods onto function's class. Field options: null: If True, stores empty values as NULL in the database. blank: If True, the field is allowed to be blank in forms. choices: A list or mapping of choices for the field. Enforced by model validation. db_column: The name of the database column. db_comment: The comment on the database column. db_default: The database-computed default value for this field. db_index: If True, a database index will be created for this field. Use indexes option instead. db_tablespace: The name of the database tablespace to use for this fieldâ€™s index. default: The default value for the field. editable: If False, the field will not be displayed in the admin or any other ModelForm. error_messages: Overrides the default error messages that the field will raise. help_text: Extra â€œhelpâ€ text to be displayed with the form widget. primary_key: If True, this field is the primary key for the model. unique: If True, this field must be unique throughout the table. unique_for_date: Requires that this field be unique for the value of the date field. unique_for_month: Requires the field to be unique with respect to the month. unique_for_year: Requires the field to be unique with respect to the year. verbose_name: A human-readable name for the field. validators: A list of validators to run for this field. AutoField: An IntegerField that automatically increments. BigAutoField: A 64-bit integer. BigIntegerField: A 64-bit integer. BinaryField(max_length=None): A field to store raw binary data. BooleanField: A true/false field. CharField(max_length=None): A string field. max_length is required. db_collation is optional. DateField(auto_now=False, auto_now_add=False): A date. auto_now: automatically set the field to now every time the object is saved. auto_now_add: automatically set the field to now when the object is first created. DateTimeField(auto_now=False, auto_now_add=False): A date and time. DecimalField(max_digits=None, decimal_places=None): A fixed-precision decimal number. max_digits and decimal_places are required. DurationField: A field for storing periods of time (timedelta). EmailField(max_length=254): A CharField that checks that the value is a valid email address. FileField(upload_to='', storage=None, max_length=100): A file-upload field. upload_to: directory and file name. storage: storage object. FilePathField(path='', match=None, recursive=False, allow_files=True, allow_folders=False, max_length=100): A CharField whose choices are limited to the filenames in a certain directory on the filesystem. FloatField: A floating-point number. GeneratedField(expression, output_field, db_persist=None): A field that is always computed based on other fields in the model. expression is an Expression used by the database to automatically set the field value. output_field is a model field instance to define the fieldâ€™s data type. db_persist determines if the database column should occupy storage. GenericIPAddressField(protocol='both', unpack_ipv4=False): An IPv4 or IPv6 address. protocol: Limits valid inputs to the specified protocol. unpack_ipv4: Unpacks IPv4 mapped addresses. ImageField(upload_to=None, height_field=None, width_field=None, max_length=100): Inherits from FileField, but validates that the uploaded object is a valid image. height_field: auto-populated with the height of the image. width_field: auto-populated with the width of the image. IntegerField: An integer. JSONField(encoder=None, decoder=None): A field for storing JSON encoded data. PositiveBigIntegerField: Like a BigIntegerField, but only allows positive values or zero. PositiveIntegerField: Like an IntegerField, but must be either positive or zero (0). PositiveSmallIntegerField: Like a SmallIntegerField, but only allows positive values or zero. SlugField(max_length=50): A slug (short label) field. allow_unicode: If True, the field accepts Unicode letters. SmallAutoField: Like an AutoField, but only allows smaller values. SmallIntegerField: Like an IntegerField, but only allows smaller values. TextField: A large text field. db_collation is optional. TimeField(auto_now=False, auto_now_add=False): A time. URLField(max_length=200): A CharField for a URL. UUIDField: A field for storing universally unique identifiers. default: uuid.uuid4. ForeignKey(to, on_delete): A many-to-one relationship. on_delete: CASCADE, PROTECT, RESTRICT, SET_NULL, SET_DEFAULT, SET(), DO_NOTHING. limit_choices_to: limits choices for the field. related_name: name for reverse relation. to_field: field on the related object. db_constraint: create constraint in database. ManyToManyField(to): A many-to-many relationship. symmetrical: Only used in the definition of ManyToManyFields on self. through: manually specify intermediary table. through_fields: specify fields on intermediary model. db_table: table name for many-to-many data. OneToOneField(to, on_delete, parent_link=False): A one-to-one relationship. Field: Abstract class representing a database table column. Field.get_internal_type(): Returns a string naming this field for backend specific purposes. Field.db_type(connection): Returns the database column data type for the Field. Field.get_prep_value(value): Returns data in a format for use as a parameter in a query. Field.from_db_value(value, expression, connection): Converts a value as returned by the database to a Python object. Field.pre_save(model_instance, add): Prepares the value before being saved. Field.value_to_string(obj): Converts obj to a string. Model API reference index. Topics: Model fields, Field attributes, Model indexes, Constraints, Model _meta API, Related objects, Model class reference, Model Meta options, Model instance reference, QuerySet API reference, Lookup API reference, Query Expressions, Conditional Expressions, Database Functions. Index(*expressions, fields=(), name=None, db_tablespace=None, opclasses=(), condition=None, include=None) Creates a database index. expressions: Positional argument for functional indexes. Index.name is required. fields: List/tuple of field names for the index. Use hyphen for descending order. name: Name of the index (max 30 chars, no leading number/underscore). db_tablespace: Tablespace for the index. opclasses: PostgreSQL operator classes. Index.name is required. condition: Q object for partial indexes. Index.name is required. include: List/tuple of fields for covering index (PostgreSQL only). Index.name is required. Model instances API reference. Model(**kwargs): Create model instance, kwargs are field names. Must call save() to persist. Model.from_db(db, field_names, values): Customize model instance creation from the database. Returns new model instance. Model.refresh_from_db(using=None, fields=None, from_queryset=None): Reload model's values from the database. Model.get_deferred_fields(): Returns set of attribute names of deferred fields. Model.full_clean(exclude=None, validate_unique=True, validate_constraints=True): Validates the model (fields, model, uniqueness, constraints). Raises ValidationError. Model.clean_fields(exclude=None): Validates all model fields, raises ValidationError. Model.clean(): Custom model validation and attribute modification. Model.validate_unique(exclude=None): Validates uniqueness constraints, raises ValidationError. Model.validate_constraints(exclude=None): Validates model constraints, raises ValidationError. Model.save(*, force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None): Save object to the database. Model.pk: Property, alias for the primary key field. Model.delete(using=DEFAULT_DB_ALIAS, keep_parents=False): Delete the object from the database. Returns number of deleted objects. Model.__str__(): Returns human-readable representation of the model. Model.__eq__(): Equality method, compares primary key and concrete class. Model.__hash__(): Hash method, based on the instance's primary key. Model.get_absolute_url(): Returns canonical URL for the object. Use reverse(). Model.get_FOO_display(): Returns "human-readable" value of field FOO (if choices are defined). Model.get_next_by_FOO(**kwargs), Model.get_previous_by_FOO(**kwargs): Returns next/previous object by DateField/DateTimeField FOO. Model._state: Attribute, tracks lifecycle (adding, db). Lookup API reference: API for building WHERE clauses. lookups.RegisterLookupMixin: Mixin to register lookups. classmethod register_lookup(lookup, lookup_name=None): Registers a lookup. DateField.register_lookup(YearExact). get_lookup(lookup_name): Returns a Lookup. get_lookups(): Returns a dictionary of lookups. get_transform(transform_name): Returns a Transform. Query Expression API: as_sql(compiler, connection): Generates SQL. Returns (sql, params). as_vendorname(compiler, connection). output_field: Field instance returned by get_lookup(). class Transform: lhs: Transformed expression. lookup_name. output_field: Field instance, defaults to lhs.output_field. bilateral: Apply transformation to both sides. class Lookup: lhs: Left-hand side. rhs: Right-hand side. lookup_name. prepare_rhs: Prepare rhs for query. process_lhs(compiler, connection, lhs=None): Returns (lhs_string, lhs_params). process_rhs(compiler, connection): Processes right-hand side. Model _meta API: Access via model._meta attribute (Options object). Options.get_field(field_name): Returns field instance by name. Raises FieldDoesNotExist. Options.get_fields(include_parents=True, include_hidden=False): Returns tuple of model fields. include_parents=False: local fields only. include_hidden=True: include hidden fields. Model Meta Options: abstract: bool. If True, abstract base class. app_label: str. App model belongs to if outside INSTALLED_APPS. base_manager_name: str. Attribute name for _base_manager. db_table: str. Database table name. db_table_comment: str. Comment for table. db_tablespace: str. Database tablespace. default_manager_name: str. Manager for _default_manager. default_related_name: str. Default reverse relation name. get_latest_by: str or list. Fields for latest()/earliest(). managed: bool. If False, Django does not manage table lifecycle. order_with_respect_to: str. Field to order related objects. ordering: list. Default object ordering. permissions: list. Extra permissions. default_permissions: tuple. Default permissions ('add', 'change', 'delete', 'view'). proxy: bool. If True, proxy model. required_db_features: list. Required DB features for migrations. required_db_vendor: str. Required DB vendor for sync. select_on_save: bool. Use old save() algorithm. indexes: list. Model indexes. unique_together: list. Use UniqueConstraint instead. Sets of fields unique together. constraints: list. Model constraints. verbose_name: str. Human-readable singular name. verbose_name_plural: str. Plural name. label: str. Read-only. app_label.object_name. label_lower: str. Read-only. app_label.model_name. QuerySet API: QuerySet(model=None, query=None, using=None, hints=None): ordered: True if ordered. db: Database used. Methods that return new QuerySets: filter(*args, **kwargs): Filters objects. exclude(*args, **kwargs): Excludes objects. annotate(*args, **kwargs): Annotates objects. alias(*args, **kwargs): Saves expression for later use. order_by(*fields): Orders results. reverse(): Reverses order. distinct(*fields): Returns distinct results. values(*fields, **expressions): Returns dictionaries. values_list(*fields, flat=False, named=False): Returns tuples. dates(field, kind, order='ASC'): Returns dates. datetimes(field_name, kind, order='ASC', tzinfo=None): Returns datetimes. none(): Returns empty queryset. all(): Returns a copy. union(*other_qs, all=False): Combines QuerySets. intersection(*other_qs): Returns shared elements. difference(*other_qs): Returns elements in QuerySet but not others. select_related(*fields): Follows foreign-key relationships. prefetch_related(*lookups): Prefetches related objects. extra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None): Injects SQL clauses. defer(*fields): Defers loading fields. only(*fields): Loads only specified fields. using(alias): Uses specified database. select_for_update(nowait=False, skip_locked=False, of=(), no_key=False): Locks rows. raw(raw_query, params=(), translations=None, using=None): Executes raw SQL. Operators that return new QuerySets: & (AND): Combines QuerySets. | (OR): Combines QuerySets. ^ (XOR): Combines QuerySets. Methods that do not return QuerySets: get(*args, **kwargs): Returns a single object. create(**kwargs): Creates and saves an object. get_or_create(defaults=None, **kwargs): Gets or creates an object. update_or_create(defaults=None, create_defaults=None, **kwargs): Updates or creates an object. bulk_create(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None): Creates objects in bulk. bulk_update(objs, fields, batch_size=None): Updates objects in bulk. count(): Returns count. in_bulk(id_list=None, *, field_name='pk'): Returns objects in bulk. iterator(chunk_size=None): Returns an iterator. latest(*fields): Returns the latest object. earliest(*fields): Returns the earliest object. first(): Returns the first object. last(): Returns the last object. aggregate(*args, **kwargs): Returns aggregate values. exists(): Checks if any results exist. contains(obj): Checks if QuerySet contains obj. update(**kwargs): Updates objects. delete(): Deletes objects. as_manager(): Returns a Manager instance. explain(format=None, **options): Returns execution plan. Field lookups: exact: Exact match. iexact: Case-insensitive exact match. contains: Case-sensitive containment. icontains: Case-insensitive containment. in: In a given iterable. gt: Greater than. gte: Greater than or equal to. lt: Less than. lte: Less than or equal to. startswith: Case-sensitive starts-with. istartswith: Case-insensitive starts-with. endswith: Case-sensitive ends-with. iendswith: Case-insensitive ends-with. range: Range test. date: Casts to date. year: Exact year match. iso_year: Exact ISO year match. month: Exact month match. day: Exact day match. week: Returns week number. week_day: Day of the week. iso_week_day: ISO day of the week. quarter: Quarter of the year. time: Casts to time. hour: Exact hour match. minute: Exact minute match. second: Exact second match. isnull: Is null. regex: Case-sensitive regular expression. iregex: Case-insensitive regular expression. Aggregation functions: Avg(expression, output_field=None, distinct=False, filter=None, default=None, **extra): Returns the mean value. Count(expression, distinct=False, filter=None, **extra): Returns the number of objects. Max(expression, output_field=None, filter=None, default=None, **extra): Returns the maximum value. Min(expression, output_field=None, filter=None, default=None, **extra): Returns the minimum value. StdDev(expression, output_field=None, sample=False, filter=None, default=None, **extra): Returns the standard deviation. Sum(expression, output_field=None, distinct=False, filter=None, default=None, **extra): Computes the sum. Variance(expression, output_field=None, sample=False, filter=None, default=None, **extra): Returns the variance. Query-related tools: Q: Represents an SQL condition. Prefetch(lookup, queryset=None, to_attr=None): Controls prefetch_related. prefetch_related_objects(model_instances, *related_lookups): Prefetches lookups on instances. FilteredRelation(relation_name, *, condition=Q()): Creates an ON clause. RelatedManager is used in one-to-many or many-to-many relations. Methods: add(*objs, bulk=True, through_defaults=None): Adds objects to related set. create(through_defaults=None, **kwargs): Creates and adds new object. remove(*objs, bulk=True): Removes objects from related set. clear(bulk=True): Removes all objects. set(objs, bulk=True, clear=False, through_defaults=None): Replaces related objects. Async versions: aadd, acreate, aremove, aclear, aset. Parameters: objs: model instances or primary keys. bulk: performance optimization. through_defaults: for ManyToManyField intermediate model values. ForeignKey: methods on `entry_set` (example blog.entry_set). ManyToManyField: methods on both sides (`pizza.toppings`, `topping.pizza_set`). add, remove, clear, set update database immediately. Signals: m2m_changed for ManyToManyField add/remove. ForeignKey remove/clear only if null=True. Paginator: object_list (required), per_page (required), orphans, allow_empty_first_page, error_messages. get_page(number) returns Page, handles invalid numbers. page(number) returns Page, raises PageNotAnInteger, EmptyPage. get_elided_page_range(number, on_each_side, on_ends) returns elided page numbers. count: total objects. num_pages: total pages. page_range: range of page numbers. Page: object_list, number, paginator. has_next() returns True if next page exists. has_previous() returns True if previous page exists. has_other_pages() returns True if next or previous exists. next_page_number() returns next page number, raises InvalidPage. previous_page_number() returns previous page number, raises InvalidPage. start_index() returns start index. end_index() returns end index. Exceptions: InvalidPage, PageNotAnInteger, EmptyPage. Request and response objects. HttpRequest class: request object passed to views. Attributes: scheme, body, path, path_info, method, encoding, content_type, content_params, GET, POST, COOKIES, FILES, META, headers, resolver_match, current_app, urlconf, exception_reporter_filter, exception_reporter_class, session, site, user. Methods: auser(), get_host(), get_port(), get_full_path(), get_full_path_info(), build_absolute_uri(location=None), get_signed_cookie(key, default=RAISE_ERROR, salt='', max_age=None), is_secure(), accepts(mime_type), read(size=None), readline(), readlines(), __iter__(). QueryDict class: dictionary-like for query strings. Methods: __init__(query_string=None, mutable=False, encoding=None), fromkeys(iterable, value='', mutable=False, encoding=None), __getitem__(key), __setitem__(key, value), __contains__(key), get(key, default=None), setdefault(key, default=None), update(other_dict), items(), values(), copy(), getlist(key, default=None), setlist(key, list_), appendlist(key, item), setlistdefault(key, default_list=None), lists(), pop(key), popitem(), dict(), urlencode(safe=None). HttpResponse class: response object returned by views. Usage: HttpResponse(content='', content_type=None, status=200, reason=None, charset=None, headers=None). Attributes: content, cookies, headers, charset, status_code, reason_phrase, streaming, closed. Methods: __init__(content=b'', content_type=None, status=200, reason=None, charset=None, headers=None), __setitem__(header, value), __delitem__(header), __getitem__(header), get(header, alternate=None), has_header(header), items(), setdefault(header, value), set_cookie(key, value='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False, samesite=None), set_signed_cookie(key, value, salt='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False, samesite=None), delete_cookie(key, path='/', domain=None, samesite=None), close(), write(content), flush(), tell(), getvalue(), readable(), seekable(), writable(), writelines(lines). HttpResponseRedirect(path): redirect response (302). HttpResponsePermanentRedirect(path): permanent redirect (301). HttpResponseNotModified: not modified (304). HttpResponseBadRequest: bad request (400). HttpResponseNotFound: not found (404). HttpResponseForbidden: forbidden (403). HttpResponseNotAllowed(allowed_methods): method not allowed (405). HttpResponseGone: gone (410). HttpResponseServerError: server error (500). JsonResponse(data, safe=True, encoder=DjangoJSONEncoder, json_dumps_params=None, **kwargs): JSON response. StreamingHttpResponse(iterator): streaming response. FileResponse(open_file, as_attachment=False, filename='', **kwargs): file streaming response. HttpResponseBase: base response class. SchemaEditor: BaseDatabaseSchemaEditor - database abstraction for migrations. Use via connection.schema_editor() context manager. Methods: execute(sql, params=()) - executes SQL. create_model(model) - creates table. delete_model(model) - drops table. add_index(model, index) - adds index. remove_index(model, index) - removes index. rename_index(model, old_index, new_index) - renames index. add_constraint(model, constraint) - adds constraint. remove_constraint(model, constraint) - removes constraint. alter_unique_together(model, old_unique_together, new_unique_together) - alters unique_together. alter_index_together(model, old_index_together, new_index_together) - alters index_together. alter_db_table(model, old_db_table, new_db_table) - renames table. alter_db_table_comment(model, old_db_table_comment, new_db_table_comment) - alters table comment. alter_db_tablespace(model, old_db_tablespace, new_db_tablespace) - moves tablespace. add_field(model, field) - adds column/table for field. remove_field(model, field) - removes column/table for field. alter_field(model, old_field, new_field, strict=False) - alters field. Attributes: connection - database connection object. ABSOLUTE_URL_OVERRIDES: dict, model_name to URL function. ADMINS: list, (name, email) tuples for error notifications. ALLOWED_HOSTS: list, allowed hostnames. APPEND_SLASH: bool, redirect w/ slash if missing. CACHES: dict, cache settings. BACKEND, KEY_FUNCTION, KEY_PREFIX, LOCATION, OPTIONS, TIMEOUT, VERSION. CACHE_MIDDLEWARE_ALIAS: str, cache connection. CACHE_MIDDLEWARE_KEY_PREFIX: str. CACHE_MIDDLEWARE_SECONDS: int, cache duration. CSRF_COOKIE_AGE: int, CSRF cookie age. CSRF_COOKIE_DOMAIN: str, CSRF cookie domain. CSRF_COOKIE_HTTPONLY: bool. CSRF_COOKIE_NAME: str, CSRF cookie name. CSRF_COOKIE_PATH: str, CSRF cookie path. CSRF_COOKIE_SAMESITE: str. CSRF_COOKIE_SECURE: bool, secure CSRF cookie. CSRF_USE_SESSIONS: bool, store CSRF token in session. CSRF_FAILURE_VIEW: str, view for failed CSRF. CSRF_HEADER_NAME: str, CSRF header name. CSRF_TRUSTED_ORIGINS: list, trusted origins for POST requests. DATABASES: dict, database settings. ENGINE, NAME, USER, PASSWORD, HOST, PORT, ATOMIC_REQUESTS, AUTOCOMMIT, CONN_MAX_AGE, CONN_HEALTH_CHECKS, OPTIONS, TIME_ZONE. TEST: dict, test database settings. TEST/NAME, TEST/CHARSET, TEST/COLLATION, TEST/DEPENDENCIES, TEST/MIRROR, TEST/TEMPLATE, TEST/CREATE_DB, TEST/CREATE_USER, TEST/USER, TEST/PASSWORD. DATA_UPLOAD_MAX_MEMORY_SIZE: int, max memory for upload. DATA_UPLOAD_MAX_NUMBER_FIELDS: int, max POST fields. DATA_UPLOAD_MAX_NUMBER_FILES: int, max files. DATABASE_ROUTERS: list, database routers. DATE_FORMAT: str, date format. DATE_INPUT_FORMATS: list, allowed date input formats. DATETIME_FORMAT: str, datetime format. DATETIME_INPUT_FORMATS: list, allowed datetime input formats. DEBUG: bool, enable debug mode. DEBUG_PROPAGATE_EXCEPTIONS: bool. DECIMAL_SEPARATOR: str, decimal separator. DEFAULT_AUTO_FIELD: str, default PK field. DEFAULT_CHARSET: str, default charset. DEFAULT_EXCEPTION_REPORTER: str. DEFAULT_EXCEPTION_REPORTER_FILTER: str. DEFAULT_FROM_EMAIL: str, default email address. DEFAULT_INDEX_TABLESPACE: str. DEFAULT_TABLESPACE: str. DISALLOWED_USER_AGENTS: list, regex for disallowed agents. EMAIL_BACKEND: str, email backend. EMAIL_FILE_PATH: str, file email path. EMAIL_HOST: str, email host. EMAIL_HOST_PASSWORD: str. EMAIL_HOST_USER: str. EMAIL_PORT: int, email port. EMAIL_SUBJECT_PREFIX: str. EMAIL_USE_LOCALTIME: bool. EMAIL_USE_TLS: bool, use TLS. EMAIL_USE_SSL: bool, use SSL. EMAIL_SSL_CERTFILE: str. EMAIL_SSL_KEYFILE: str. EMAIL_TIMEOUT: int. FILE_UPLOAD_HANDLERS: list, upload handlers. FILE_UPLOAD_MAX_MEMORY_SIZE: int, file upload max memory. FILE_UPLOAD_DIRECTORY_PERMISSIONS: int. FILE_UPLOAD_PERMISSIONS: int. FILE_UPLOAD_TEMP_DIR: str, temp upload dir. FIRST_DAY_OF_WEEK: int, first day of week (0-6). FIXTURE_DIRS: list, fixture directories. FORCE_SCRIPT_NAME: str, SCRIPT_NAME override. FORM_RENDERER: str, form renderer. FORMS_URLFIELD_ASSUME_HTTPS: bool. FORMAT_MODULE_PATH: str, custom format definitions. IGNORABLE_404_URLS: list, ignored 404 URLs. INSTALLED_APPS: list, installed applications. INTERNAL_IPS: list, internal IP addresses. LANGUAGE_CODE: str, language code. LANGUAGE_COOKIE_AGE: int, language cookie age. LANGUAGE_COOKIE_DOMAIN: str. LANGUAGE_COOKIE_HTTPONLY: bool. LANGUAGE_COOKIE_NAME: str, language cookie name. LANGUAGE_COOKIE_PATH: str. LANGUAGE_COOKIE_SAMESITE: str. LANGUAGE_COOKIE_SECURE: bool, secure language cookie. LANGUAGES: list, available languages. LANGUAGES_BIDI: list, right-to-left languages. LOCALE_PATHS: list, locale paths. LOGGING: dict, logging config. LOGGING_CONFIG: str, logging config method. MANAGERS: list, broken link email recipients. MEDIA_ROOT: str, media root directory. MEDIA_URL: str, media URL. MIDDLEWARE: list, middleware. MIGRATION_MODULES: dict, migration modules. MONTH_DAY_FORMAT: str, month day format. NUMBER_GROUPING: int, number grouping. PREPEND_WWW: bool, prepend www to URLs. ROOT_URLCONF: str, root URL configuration. SECRET_KEY: str, secret key. SECRET_KEY_FALLBACKS: list, fallback secret keys. SECURE_CONTENT_TYPE_NOSNIFF: bool. SECURE_CROSS_ORIGIN_OPENER_POLICY: str. SECURE_HSTS_INCLUDE_SUBDOMAINS: bool. SECURE_HSTS_PRELOAD: bool. SECURE_HSTS_SECONDS: int. SECURE_PROXY_SSL_HEADER: tuple, (header, value) for secure proxy. SECURE_REDIRECT_EXEMPT: list, regex for no HTTPS redirect. SECURE_REFERRER_POLICY: str. SECURE_SSL_HOST: str, SSL host. SECURE_SSL_REDIRECT: bool, redirect to HTTPS. SERIALIZATION_MODULES: dict. SERVER_EMAIL: str, server email address. SHORT_DATE_FORMAT: str, short date format. SHORT_DATETIME_FORMAT: str, short datetime format. SIGNING_BACKEND: str, signing backend. SILENCED_SYSTEM_CHECKS: list, system checks to silence. STORAGES: dict, storage settings. default, staticfiles. TEMPLATES: list, template engine settings. BACKEND, DIRS, APP_DIRS, OPTIONS. TEST_RUNNER: str, test runner. TEST_NON_SERIALIZED_APPS: list, apps to skip serialization. THOUSAND_SEPARATOR: str, thousand separator. TIME_FORMAT: str, time format. TIME_INPUT_FORMATS: list, allowed time input formats. TIME_ZONE: str, time zone. USE_I18N: bool, enable i18n. USE_THOUSAND_SEPARATOR: bool, use thousand separator. USE_TZ: bool, enable timezone-aware datetimes. USE_X_FORWARDED_HOST: bool, use X-Forwarded-Host header. USE_X_FORWARDED_PORT: bool, use X-Forwarded-Port header. WSGI_APPLICATION: str, WSGI application. YEAR_MONTH_FORMAT: str, year month format. X_FRAME_OPTIONS: str, X-Frame-Options header. AUTHENTICATION_BACKENDS: list, authentication backends. AUTH_USER_MODEL: str, user model. LOGIN_REDIRECT_URL: str, login redirect URL. LOGIN_URL: str, login URL. LOGOUT_REDIRECT_URL: str, logout redirect URL. PASSWORD_RESET_TIMEOUT: int, password reset timeout. PASSWORD_HASHERS: list, password hashers. AUTH_PASSWORD_VALIDATORS: list, password validators. MESSAGE_LEVEL: int, message level. MESSAGE_STORAGE: str, message storage. MESSAGE_TAGS: dict, message tags. SESSION_CACHE_ALIAS: str, session cache alias. SESSION_COOKIE_AGE: int, session cookie age. SESSION_COOKIE_DOMAIN: str. SESSION_COOKIE_HTTPONLY: bool. SESSION_COOKIE_NAME: str, session cookie name. SESSION_COOKIE_PATH: str. SESSION_COOKIE_SAMESITE: str. SESSION_COOKIE_SECURE: bool, secure session cookie. SESSION_ENGINE: str, session engine. SESSION_EXPIRE_AT_BROWSER_CLOSE: bool. SESSION_FILE_PATH: str, session file path. SESSION_SAVE_EVERY_REQUEST: bool. SESSION_SERIALIZER: str, session serializer. SITE_ID: int, site ID. STATIC_ROOT: str, static root directory. STATIC_URL: str, static URL. STATICFILES_DIRS: list, static file directories. STATICFILES_FINDERS: list, static file finders. Signals: pre_init, post_init, pre_save, post_save, pre_delete, post_delete, m2m_changed, class_prepared, pre_migrate, post_migrate, request_started, request_finished, got_request_exception, setting_changed, template_rendered, connection_created. Signal handlers registered via connect(). SimpleTemplateResponse(template, context=None, content_type=None, status=None, charset=None, using=None, headers=None) template: template name/object/list, context: dict, returns: SimpleTemplateResponse. TemplateResponse(request, template, context=None, content_type=None, status=None, charset=None, using=None, headers=None) request: HttpRequest, returns: TemplateResponse. Render process: renders a TemplateResponse instance. SimpleTemplateResponse.render(): returns rendered response object. TemplateResponse.add_post_render_callback(): adds callback after rendering. Template system: configure Engine, compile to Template, render with Context. Engine(dirs=None, app_dirs=False, context_processors=None, debug=False, loaders=None, string_if_invalid='', file_charset='utf-8', libraries=None, builtins=None, autoescape=True). Arguments as kwargs. dirs: template directories. app_dirs: look in installed apps. autoescape: HTML escaping. context_processors: request processors. debug: debug mode. loaders: template loader classes. string_if_invalid: invalid variable output. file_charset: template file charset. libraries: template tag modules. builtins: built-in template tag modules. Engine methods: get_default(), from_string(template_code), get_template(template_name), select_template(template_name_list). Template: render(context). Context(dict_=None, autoescape=True, use_l10n=None, use_tz=None). Variable lookups: dictionary, attribute, list-index. alters_data attribute prevents calling potentially harmful functions. string_if_invalid handles invalid variables. Context methods: get(key, otherwise=None), setdefault(key, default=None), push(), pop(), update(other_dict), flatten(). push() and update() can be used as context managers. RequestContext(request, dict_=None, processors=None, use_l10n=None, use_tz=None, autoescape=True): auto populates context with variables from context_processors. Loaders: filesystem.Loader (DIRS), app_directories.Loader (INSTALLED_APPS), cached.Loader, locmem.Loader (dictionary). Custom loaders: inherit from django.template.loaders.base.Loader and define get_contents(), get_template_sources(). Origin: name, template_name, loader. autoescape: {% autoescape on/off %} {{ body }} {% endautoescape %} controls auto-escaping. block: Defines a block for inheritance. comment: Ignores content between {% comment %} and {% endcomment %}. csrf_token: For CSRF protection. cycle: Cycles through arguments. {% cycle arg1 arg2 as name %} stores current value. debug: Outputs debugging info. extends: {% extends "base.html" %} or {% extends variable %}, template inheritance. filter: Filters content through filters. firstof: Outputs first non-false variable. {% firstof var1 var2 var3 "fallback" %} or {% firstof var1 var2 as value %}. for: Loops over lists. {% for item in list reversed %}, {% for key, value in dict.items %}, loop vars: forloop.counter/counter0, revcounter/revcounter0, first, last, parentloop, empty. if: Conditional statement. {% if var %}{% elif var2 %}{% else %}{% endif %}. Supports and, or, not, ==, !=, <, >, <=, >=, in, not in, is, is not operators. ifchanged: Checks if a value has changed. include: Includes another template. {% include "template.html" %}, {% include variable %}, {% include "template.html" with var1=value1 only %}. load: Loads custom tag libraries. {% load library %}, {% load tag1 tag2 from library %}. lorem: Outputs random lorem ipsum text. {% lorem count method random %}. now: Displays current date/time. {% now "format" %} or {% now "Y" as var %}. querystring: Builds query strings. {% querystring %}, {% querystring param="value" %}, {% querystring param=None %}, {% querystring param=list %}, {% querystring my_query_dict %}. regroup: Regroups a list by an attribute. {% regroup list by attribute as new_list %}. resetcycle: Resets a cycle tag. {% resetcycle %}, {% resetcycle name %}. spaceless: Removes whitespace between HTML tags. templatetag: Outputs template tag syntax chars. url: Returns a URL for a view. {% url "view_name" arg1 arg2 %}, {% url "view_name" arg1=value1 arg2=value2 %}, {% url "view_name" as var %}. verbatim: Prevents template rendering. {% verbatim %} ... {% endverbatim %}. widthratio: Calculates width ratio. {% widthratio this max max_width %}. with: Caches a variable. {% with total=expensive_call %} {{ total }} {% endwith %}. add: Adds argument. {{ value|add:"2" }}. addslashes: Adds slashes before quotes. {{ value|addslashes }}. capfirst: Capitalizes first character. {{ value|capfirst }}. center: Centers value in a field. {{ value|center:"15" }}. cut: Removes argument from string. {{ value|cut:" " }}. date: Formats a date. {{ value|date:"format" }}. default: Uses default if value is false. {{ value|default:"default" }}. default_if_none: Uses default if value is None. {{ value|default_if_none:"default" }}. dictsort: Sorts a list of dictionaries by a key. {{ value|dictsort:"key" }}. dictsortreversed: Sorts in reverse order. {{ value|dictsortreversed:"key" }}. divisibleby: Returns True if divisible by argument. {{ value|divisibleby:"3" }}. escape: Escapes HTML. {{ value|escape }}. escapejs: Escapes for JavaScript. {{ value|escapejs }}. escapeseq: Applies escape to each element of a sequence. filesizeformat: Formats file size. {{ value|filesizeformat }}. first: Returns first item in a list. {{ value|first }}. floatformat: Formats a float. {{ value|floatformat:2 }}. force_escape: Applies HTML escaping immediately. get_digit: Returns a digit from a number. {{ value|get_digit:"2" }}. iriencode: Converts IRI to URL-safe string. {{ value|iriencode }}. join: Joins a list with a string. {{ value|join:" // " }}. json_script: Outputs JSON in a script tag. {{ value|json_script:"id" }}. last: Returns last item in a list. {{ value|last }}. length: Returns length. {{ value|length }}. linebreaks: Converts line breaks to HTML. {{ value|linebreaks }}. linebreaksbr: Converts newlines to <br>. {{ value|linebreaksbr }}. linenumbers: Displays line numbers. {{ value|linenumbers }}. ljust: Left-aligns. {{ value|ljust:"10" }}. lower: Converts to lowercase. {{ value|lower }}. make_list: Converts to list. {{ value|make_list }}. phone2numeric: Converts phone to numeric. {{ value|phone2numeric }}. pluralize: Returns plural suffix. {{ value|pluralize:"es" }}. pprint: Pretty prints data. {{ value|pprint }}. random: Returns a random item. {{ value|random }}. rjust: Right-aligns. {{ value|rjust:"10" }}. safe: Marks as safe. {{ value|safe }}. safeseq: Applies safe to each element. slice: Returns a slice. {{ value|slice:":2" }}. slugify: Converts to slug. {{ value|slugify }}. stringformat: Formats string. {{ value|stringformat:"E" }}. striptags: Strips HTML tags. {{ value|striptags }}. time: Formats time. {{ value|time:"format" }}. timesince: Formats time since. {{ value|timesince:date }}. timeuntil: Formats time until. {{ value|timeuntil:date }}. title: Converts to titlecase. {{ value|title }}. truncatechars: Truncates by chars. {{ value|truncatechars:10 }}. truncatechars_html: Truncates HTML by chars. truncatewords: Truncates by words. {{ value|truncatewords:2 }}. truncatewords_html: Truncates HTML by words. unordered_list: Creates an unordered list. {{ value|unordered_list }}. upper: Converts to uppercase. {{ value|upper }}. urlencode: URL-encodes. {{ value|urlencode }}. urlize: Converts URLs and emails to links. {{ value|urlize }}. urlizetrunc: Truncates and links URLs. {{ value|urlizetrunc:10 }}. wordcount: Counts words. {{ value|wordcount }}. wordwrap: Wraps words. {{ value|wordwrap:5 }}. yesno: Maps values to strings. {{ value|yesno:"yes,no,maybe" }}. i18n: Internationalization support. {% load i18n %}. l10n: Localization support. {% load l10n %}. tz: Time zone support. {% load tz %}. static: Links static files. {% load static %}, <img src="{% static 'image.jpg' %}">. get_static_prefix: Gets static prefix. {% get_static_prefix as prefix %}. get_media_prefix: Gets media prefix. Templates are for defining user interfaces, separating logic from presentation. Features: Variables, Filters, Tags, Comments, Inheritance, HTML Escaping. Custom tags and filters are supported. Configuration via template engines. Templates: text files with variables & tags. Variables: {{ variable }}. Filters: {{ variable|filter }}. Tags: {% tag %}. Tags: {% extends "base.html" %}: Inherits from base template. {% block name %}: Defines a block for content. {% if condition %}, {% elif condition %}, {% else %}: Conditional logic. {% for item in list %}: Loops through items. {# comment #}: Single-line comments. Template Inheritance: extends, block, super. Automatic HTML escaping: {{ variable }} escapes < > \' " &. safe filter: {{ variable|safe }}. Custom tags/filters: {% load library_name %}. Libraries not inherited. Unicode support in Django. Use UTF-8 or UTF-16 encoding for database. Django handles unicode transparently. Bytestrings assumed to be UTF-8. DEFAULT_CHARSET for template/email encoding, internal bytestrings are always UTF-8. Lazy translation objects: django.utils.functional.__proxy__. Conversion functions: django.utils.encoding module. smart_str(s, encoding='utf-8', strings_only=False, errors='strict'): converts to string, encoding parameter specifies input encoding. force_str(s, encoding='utf-8', strings_only=False, errors='strict'): like smart_str but forces lazy translations to string. smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict'): converts to bytestring. URI/IRI handling: django.utils.encoding.iri_to_uri(): IRI to URI conversion (RFC 3987#section-3.1). urllib.parse.quote(), urllib.parse.quote_plus(): for encoding IRI/URI path parts. django.utils.encoding.uri_to_iri(): URI to IRI conversion (RFC 3987#section-3.2). Models: CharField, TextField etc. return unicode. get_absolute_url(): use iri_to_uri(), quote() for non-ASCII URLs. Templates: use strings, file encoding in TEMPLATES setting ('file_charset'). DEFAULT_CHARSET for rendered template encoding. Template tags/filters: return strings, use force_str(). Files: ensure environment supports non-ASCII filenames, sys.getfilesystemencoding() should be UTF-8, check LANG env variable. Form submission: HttpRequest.GET, HttpRequest.POST decoded to unicode, DEFAULT_CHARSET used, request.encoding to change encoding. django.urls utility functions. reverse(viewname, urlconf=None, args=None, kwargs=None, current_app=None): Returns URL string by view name or callable, args, kwargs. Raises NoReverseMatch. reverse_lazy(viewname, urlconf=None, args=None, kwargs=None, current_app=None): Lazy version of reverse(). resolve(path, urlconf=None): Resolves URL path to view. Returns ResolverMatch or raises Resolver404. ResolverMatch class: Attributes: func, args, kwargs, captured_kwargs, extra_kwargs, url_name, route, tried, app_name, app_names, namespace, namespaces, view_name. get_script_prefix(): Returns script prefix for Django project URL. path(route, view, kwargs=None, name=None): URL pattern element. route: string with URL pattern. view: view function or as_view(). kwargs: extra arguments to view. name: URL pattern name. re_path(route, view, kwargs=None, name=None): URL pattern element using regex. route: regex string. include(module, namespace=None): Includes another URLconf module. include(pattern_list, app_namespace, namespace=None): Includes a list of URL patterns. register_converter(converter, type_name): Registers a custom path converter. static(prefix, view=django.views.static.serve, **kwargs): Helper function to serve files in debug mode. handler400: View for HTTP 400 errors. handler403: View for HTTP 403 errors. handler404: View for HTTP 404 errors. handler500: View for HTTP 500 errors. django.utils.cache: Functions for HTTP caching. patch_cache_control(response, **kwargs): Patches Cache-Control header. get_max_age(response): Returns max-age from Cache-Control. patch_response_headers(response, cache_timeout=None): Adds headers (Expires, Cache-Control). add_never_cache_headers(response): Adds headers to prevent caching. patch_vary_headers(response, newheaders): Adds/updates Vary header. get_cache_key(request, key_prefix=None, method='GET', cache=None): Returns cache key. learn_cache_key(request, response, cache_timeout=None, key_prefix=None, cache=None): Learns headers for cache key. django.utils.dateparse: Date/time parsing functions. parse_date(value): Parses string to datetime.date. parse_time(value): Parses string to datetime.time. parse_datetime(value): Parses string to datetime.datetime. parse_duration(value): Parses string to datetime.timedelta. django.utils.decorators: Decorator utilities. method_decorator(decorator, name=''): Converts function decorator to method decorator. decorator_from_middleware(middleware_class): Returns view decorator from middleware. decorator_from_middleware_with_args(middleware_class): Returns function that accepts middleware arguments. sync_only_middleware(middleware): Marks middleware as synchronous-only. async_only_middleware(middleware): Marks middleware as asynchronous-only. sync_and_async_middleware(middleware): Marks middleware as sync and async compatible. django.utils.encoding: Encoding utilities. smart_str(s, encoding='utf-8', strings_only=False, errors='strict'): Returns str object. is_protected_type(obj): Checks if object is protected type. force_str(s, encoding='utf-8', strings_only=False, errors='strict'): Resolves lazy instances to strings. smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict'): Returns bytestring. force_bytes(s, encoding='utf-8', strings_only=False, errors='strict'): Resolves lazy instances to bytestrings. iri_to_uri(iri): Converts IRI to URI. uri_to_iri(uri): Converts URI to IRI. filepath_to_uri(path): Converts filepath to URI. escape_uri_path(path): Escapes unsafe characters in URI path. django.utils.feedgenerator: Feed generation utilities. get_tag_uri(url, date): Creates a TagURI. SyndicationFeed: Base class for syndication feeds. add_item(title, link, description, author_email=None, author_name=None, author_link=None, pubdate=None, comments=None, unique_id=None, categories=(), item_copyright=None, ttl=None, updateddate=None, enclosures=None, **kwargs): Adds an item to the feed. Enclosure: Represents an RSS enclosure. RssFeed(SyndicationFeed): Base class for RSS feeds. Rss201rev2Feed(RssFeed): RSS 2.0 feed. RssUserland091Feed(RssFeed): RSS 0.91 feed. Atom1Feed(SyndicationFeed): Atom 1.0 feed. django.utils.functional: Functional utilities. cached_property(func): Caches a method's result as a property. classproperty(method=None): Converts method to class property. keep_lazy(func, *resultclasses): Decorator for lazy evaluation. keep_lazy_text(func): Shortcut for keep_lazy(str)(func). django.utils.html: HTML utilities. escape(text): Escapes text for HTML. conditional_escape(text): Escapes text for HTML, avoids double-escaping. format_html(format_string, *args, **kwargs): Formats HTML string, escapes args. format_html_join(sep, format_string, args_generator): Joins formatted HTML strings. json_script(value, element_id=None, encoder=None): Escapes and wraps JSON in script tag. strip_tags(value): Removes HTML tags. html_safe(): Decorator for classes with safe HTML output. django.utils.http: HTTP utilities. urlencode(query, doseq=False): URL-encodes query. http_date(epoch_seconds=None): Formats time to RFC 1123. content_disposition_header(as_attachment, filename): Constructs Content-Disposition header. base36_to_int(s): Converts base 36 to int. int_to_base36(i): Converts int to base 36. urlsafe_base64_encode(s): Encodes to URL-safe base64. urlsafe_base64_decode(s): Decodes URL-safe base64. django.utils.module_loading: Module loading utilities. import_string(dotted_path): Imports a dotted module path. django.utils.safestring: Safe string utilities. SafeString: Subclass of str marked as safe. mark_safe(s): Marks a string as safe. django.utils.text: Text utilities. format_lazy(format_string, *args, **kwargs): Lazy format for strings. slugify(value, allow_unicode=False): Converts string to URL slug. django.utils.timezone: Timezone utilities. get_fixed_timezone(offset): Returns a fixed offset tzinfo. get_default_timezone(): Returns default timezone tzinfo. get_default_timezone_name(): Returns default timezone name. get_current_timezone(): Returns current timezone tzinfo. get_current_timezone_name(): Returns current timezone name. activate(timezone): Sets current timezone. deactivate(): Unsets current timezone. override(timezone): Context manager/decorator for timezone. localtime(value=None, timezone=None): Converts to local time. localdate(value=None, timezone=None): Converts to local date. now(): Returns current datetime (aware or naive based on USE_TZ). is_aware(value): Checks if datetime is aware. is_naive(value): Checks if datetime is naive. make_aware(value, timezone=None): Makes datetime aware. make_naive(value, timezone=None): Makes datetime naive. django.utils.translation: Translation utilities. gettext(message): Translates message. pgettext(context, message): Translates message with context. gettext_lazy(message): Lazy translation of message. pgettext_lazy(context, message): Lazy translation of message with context. gettext_noop(message): Marks strings for translation later. ngettext(singular, plural, number): Translates singular/plural based on number. npgettext(context, singular, plural, number): Translates singular/plural with context. ngettext_lazy(singular, plural, number): Lazy translation for plural forms. npgettext_lazy(context, singular, plural, number): Lazy translation for plural forms with context. activate(language): Activates a language. deactivate(): Deactivates the current language. deactivate_all(): Deactivates all translations. override(language, deactivate=False): Context manager/decorator for language. check_for_language(lang_code): Checks for language file. get_language(): Returns the current language code. get_language_bidi(): Returns language's BiDi layout. get_language_from_request(request, check_path=False): Gets language from request. get_supported_language_variant(lang_code, strict=False): Gets a supported language variant. to_locale(language): Converts language to locale. templatize(src): Converts Django template for xgettext. ``` Validators: Callable that validates a value, raising ValidationError if criteria not met. RegexValidator(regex, message, code, inverse_match, flags): Validates against a regex. EmailValidator(message, code, allowlist): Validates email format. DomainNameValidator(accept_idna, message, code): Validates domain names. URLValidator(schemes, regex, message, code): Validates URLs. MaxValueValidator(limit_value, message): value <= limit_value. MinValueValidator(limit_value, message): value >= limit_value. MaxLengthValidator(limit_value, message): len(value) <= limit_value. MinLengthValidator(limit_value, message): len(value) >= limit_value. DecimalValidator(max_digits, decimal_places): Validates decimal values. FileExtensionValidator(allowed_extensions, message, code): Validates file extension. ProhibitNullCharactersValidator(message, code): Prohibits null characters. StepValueValidator(limit_value, message, offset): value is multiple of limit_value + offset. Async views use async def. Class-based views: async def get(), post(). Use ASGI for full async stack benefits. WSGI: async views run in one-off event loop. Use sync_to_async() to call sync Django code from async views. Decorators: cache_control(), never_cache(), csrf_exempt(), require_http_methods(), etc. Queries & ORM: Use a-prefixed async variants of QuerySet methods (afirst(), acreate()). Transactions not yet async-compatible. Performance: Context switches between sync/async incur a small penalty. Handling disconnects: Catch asyncio.CancelledError in views. DJANGO_ALLOW_ASYNC_UNSAFE: Allows running async-unsafe code (ORM) in async contexts. Use with caution. async_to_sync(async_function, force_new_loop=False) -> sync_function: Wraps async function to be called synchronously. Runs in current thread's event loop or new loop. sync_to_async(sync_function, thread_sensitive=True) -> async_function: Wraps sync function to be called asynchronously. thread_sensitive=True: runs in the same thread as other thread_sensitive functions (main thread if async_to_sync used above). thread_sensitive=False: runs in a new thread. Avoid passing database connection objects directly. Customizing authentication. Authentication Backends: Extensible authentication system. AUTHENTICATION_BACKENDS: Setting, list of authentication backend paths. Order matters. Writing a backend: Must implement: get_user(user_id): Returns user object or None. authenticate(request, **credentials): Returns user object or None. Returns None if invalid. Optional methods for authorization. Custom Permissions: Defined in model Meta attribute: permissions = [(code, description)]. Checked with user.has_perm("app.close_task"). Extending User Model: Proxy Model: For behavioral changes only. OneToOneField: Profile model for additional information. Substituting User Model: AUTH_USER_MODEL: Setting, dotted path to custom user model. Set before migrations. Referencing User Model: get_user_model(): Returns the active user model. ForeignKey(settings.AUTH_USER_MODEL, ...). Custom User Model: Must have unique identification field. Inherit from AbstractBaseUser. AbstractBaseUser attributes: USERNAME_FIELD: Unique identifier field name. EMAIL_FIELD: Email field name. REQUIRED_FIELDS: Required fields for createsuperuser. is_active: Boolean, user activity status. Methods: get_username(): Returns USERNAME_FIELD value. clean(): Normalizes username. set_password(raw_password): Sets hashed password. check_password(raw_password): Checks password. set_unusable_password(): Marks user as having no password. has_usable_password(): Checks if user has usable password. AbstractUser: Subclasses AbstractBaseUser. Has email normalization. Custom Manager: Extends BaseUserManager. create_user(username_field, password=None, **other_fields). create_superuser(username_field, password=None, **other_fields). BaseUserManager: normalize_email(email). get_by_natural_key(username). Extending Django's default User: Subclass AbstractUser. Custom Users and Admin: Must define: is_staff, is_active, has_perm(perm, obj=None), has_module_perms(app_label). Register with admin. PermissionsMixin: Adds permission fields and methods. is_superuser. get_user_permissions(obj=None). get_group_permissions(obj=None). get_all_permissions(obj=None). has_perm(perm, obj=None). has_perms(perm_list, obj=None). has_module_perms(package_name). User: username, password, email, first_name, last_name. User.objects.create_user(username, email, password). User.set_password(password). authenticate(request=None, username=, password=) -> User/None. aauthenticate(). login(request, user, backend=None). alogin(). logout(request). alogout(). login_required(redirect_field_name='next', login_url=None). login_not_required(). user_passes_test(test_func, login_url=None, redirect_field_name='next'). permission_required(perm, login_url=None, raise_exception=False). AccessMixin: login_url, redirect_field_name, raise_exception. AccessMixin.get_login_url(). update_session_auth_hash(request, user). aupdate_session_auth_hash(). LoginView: template_name, next_page, redirect_field_name, extra_context, redirect_authenticated_user, get_default_redirect_url(). LogoutView: next_page, template_name, redirect_field_name, extra_context. PasswordChangeView: template_name, success_url, form_class, extra_context. PasswordChangeDoneView: template_name, extra_context. PasswordResetView: template_name, form_class, email_template_name, subject_template_name, token_generator, success_url, from_email, extra_context, html_email_template_name, extra_email_context. PasswordResetDoneView: template_name, extra_context. PasswordResetConfirmView: template_name, token_generator, post_reset_login, post_reset_login_backend, form_class, success_url, extra_context, reset_url_token. PasswordResetCompleteView: template_name, extra_context. AdminPasswordChangeForm. AuthenticationForm: confirm_login_allowed(user). PasswordChangeForm. PasswordResetForm: send_mail(subject_template_name, email_template_name, context, from_email, to_email, html_email_template_name=None). SetPasswordForm. UserChangeForm. BaseUserCreationForm. UserCreationForm. {{ user }}. {{ perms }}. Authentication system: django.contrib.auth. AuthenticationMiddleware, SessionMiddleware. User, Group, Permission classes. Django password management uses PBKDF2 by default. Storage format: <algorithm>$<iterations>$<salt>$<hash>. PASSWORD_HASHERS setting configures algorithms. Argon2, bcrypt, scrypt supported. Salt entropy, work factor adjustable. Password upgrading on login. check_password(password, encoded, setter=None, preferred='default') verifies password. make_password(password, salt=None, hasher='default') hashes password. is_password_usable(encoded_password) checks usability. Password validation via AUTH_PASSWORD_VALIDATORS. Validators: MinimumLengthValidator, UserAttributeSimilarityValidator, CommonPasswordValidator, NumericPasswordValidator. validate_password(password, user=None, password_validators=None) validates password, raises ValidationError. password_changed(password, user=None, password_validators=None) notifies validators of change. password_validators_help_texts(password_validators=None) returns help texts. get_password_validators(validator_config) gets validators. Custom validators require validate(self, password, user=None), get_help_text() methods. Django cache framework: save results of expensive calculations. Set CACHES setting. Memcached: BACKEND: django.core.cache.backends.memcached.PyMemcacheCache or PyLibMCCache LOCATION: ip:port or unix:path Redis: BACKEND: django.core.cache.backends.redis.RedisCache LOCATION: redis://[username:password@]host:port[/db] Multiple Redis servers: LOCATION as list, first is leader Database caching: BACKEND: django.core.cache.backends.db.DatabaseCache LOCATION: tablename manage.py createcachetable: Creates cache table Filesystem caching: BACKEND: django.core.cache.backends.filebased.FileBasedCache LOCATION: directory path (absolute) Local-memory caching: BACKEND: django.core.cache.backends.locmem.LocMemCache LOCATION: unique identifier Dummy caching: BACKEND: django.core.cache.backends.dummy.DummyCache Custom cache backend: BACKEND: path.to.backend Cache arguments: TIMEOUT: default expiration (seconds), default 300. OPTIONS: backend-specific options. MAX_ENTRIES: max entries before culling, default 300. CULL_FREQUENCY: fraction of entries culled, default 3. KEY_PREFIX: string prepended to keys. VERSION: version number for keys. KEY_FUNCTION: dotted path to function transforming key. Per-site cache: MIDDLEWARE: UpdateCacheMiddleware (first), FetchFromCacheMiddleware (last) CACHE_MIDDLEWARE_ALIAS: cache alias CACHE_MIDDLEWARE_SECONDS: cache duration CACHE_MIDDLEWARE_KEY_PREFIX: key prefix Per-view cache: cache_page(timeout, cache=None, key_prefix=None): decorator to cache view output. Template fragment caching: {% load cache %} {% cache timeout fragment_name [var1 var2 ...] %} ... {% endcache %} make_template_fragment_key(fragment_name, vary_on=None): Gets the cache key used for a cached fragment. Low-level cache API: caches[alias]: Access cache by alias. cache: Shortcut to default cache. cache.set(key, value, timeout=DEFAULT_TIMEOUT, version=None): Set cache value. cache.get(key, default=None, version=None): Get cache value. cache.add(key, value, timeout=DEFAULT_TIMEOUT, version=None): Add key if not exists. cache.get_or_set(key, default, timeout=DEFAULT_TIMEOUT, version=None): Get or set if missing. cache.get_many(keys, version=None): Get multiple keys. cache.set_many(dict, timeout=0): Set multiple keys. cache.delete(key, version=None): Delete key. cache.delete_many(keys, version=None): Delete multiple keys. cache.clear(): Clear entire cache. cache.touch(key, timeout=DEFAULT_TIMEOUT, version=None): Update key expiration. cache.incr(key, delta=1, version=None): Increment key. ValueError if not exists. cache.decr(key, delta=1, version=None): Decrement key. ValueError if not exists. cache.close(): Close connection. Asynchronous support: async variants prefixed with a (e.g. cache.aadd()). Cache key prefixing: KEY_PREFIX setting. Cache versioning: VERSION setting, incr_version(), decr_version(). KEY_FUNCTION: Customize key transformation. Vary headers: vary_on_headers(*headers): decorator to vary cache by headers. vary_on_cookie(): Vary on cookie. patch_vary_headers(response, headers): Set Vary header. cache_control(private=True|False, max_age=seconds, ...): Control downstream caches. never_cache(): Disable caching. MIDDLEWARE order: UpdateCacheMiddleware before Vary-modifying middleware; FetchFromCacheMiddleware after. System check framework: validates Django projects. check command: run checks. SILENCED_SYSTEM_CHECKS: setting to hide warnings. django.core.checks: register(*tags)(function): register check function. tags: check categories. deploy=True: deployment checks. CheckMessage: base class for messages. Error(...), Warning(...), Debug(...), Critical(...): message classes. Tags: predefined tags. example_check(app_configs, **kwargs): check function signature, returns list of CheckMessage. app_configs: apps to check. databases: DB aliases to inspect. Field.check(**kwargs), Model.check(**kwargs), Manager.check(**kwargs), TemplateEngine.check(**kwargs), DatabaseBackend.check(**kwargs): component checks. django.core.management.call_command(command_name, *args, **options): call management commands in tests. django.core.management.base.SystemCheckError: exception for serious errors. django.test.SimpleTestCase: tests without DB. @override_settings(...): override settings in tests. @modify_settings(...): modify settings in tests. self.assertRaisesMessage(exception, msg, callable, *args, **kwargs): assert exception message. Generic views ease web application monotony. Django provides generic views for: List/detail pages, date-based archives, create/update/delete objects. Extend generic views by subclassing and overriding attributes/methods. Example models: Publisher, Author, Book. Example view: from django.views.generic import ListView from books.models import Publisher class PublisherListView(ListView): model = Publisher Example URL: from django.urls import path from books.views import PublisherListView urlpatterns = [ path("publishers/", PublisherListView.as_view()), ] Template: books/publisher_list.html, context: object_list (all publishers). context_object_name: attribute on a generic view specifies the context variable to use. Adding extra context: Override get_context_data. Viewing subsets of objects: Use queryset argument instead of model. Dynamic filtering: Override get_queryset. self.kwargs contains URLconf arguments. Example: from django.shortcuts import get_object_or_404 from django.views.generic import ListView from books.models import Book, Publisher class PublisherBookListView(ListView): template_name = "books/books_by_publisher.html" def get_queryset(self): self.publisher = get_object_or_404(Publisher, name=self.kwargs["publisher"]) return Book.objects.filter(publisher=self.publisher) def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context["publisher"] = self.publisher return context #urls.py #path("books//", PublisherBookListView.as_view()), Performing extra work: Override get_object. Example: from django.utils import timezone from django.views.generic import DetailView from books.models import Author class AuthorDetailView(DetailView): queryset = Author.objects.all() def get_object(self): obj = super().get_object() obj.last_accessed = timezone.now() obj.save() return obj pk_url_kwarg: sets name to find primary key. Generic class-based views for form handling. FormView: base form view. Attributes: form_class, template_name, success_url. Methods: form_valid(form) - handles valid form, default redirects to success_url. Model form views (CreateView, UpdateView, DeleteView): for model forms. Attributes: model, fields, success_url (defaults to get_absolute_url). Methods: form_valid(form) - saves model. JsonableResponseMixin: for JSON responses. form_invalid(form), form_valid(form) return JsonResponse for non-HTML requests. Class-based views use classes as views. Inherit from View. RedirectView renders a HTTP redirect, TemplateView renders a template. Usage: Override attributes or methods in subclasses. Example: class AboutView(TemplateView): template_name = "about.html". In URLconf: path("about/", AboutView.as_view()). Methods: get(request, *args, **kwargs), post(request, *args, **kwargs). Async views: Use async def for async handlers. All handlers must be async or sync. Asynchronous views must be used with await. Class-based views: Implement views as Python objects. Use methods for HTTP methods (get, post). Mixins for reusable components. as_view(): class method to return callable function for URL resolver. dispatch(): determines HTTP method and calls corresponding method (get, post). Decorators: Applied to as_view() in URLconf or to dispatch() method for class-wide decoration using method_decorator. Mixins: combine behaviors. HttpResponse, TemplateResponse valid returns. Class-Based View Mixins: TemplateResponseMixin: render_to_response(context) calls get_template_names(). ContextMixin: get_context_data(**kwargs) returns context dictionary. Can use extra_context attribute. DetailView: SingleObjectMixin (get_object), SingleObjectTemplateResponseMixin (template). ListView: MultipleObjectMixin (get_queryset, paginate_queryset), MultipleObjectTemplateResponseMixin (template). SingleObjectMixin with View: For POST handling on a single object. class RecordInterestView(SingleObjectMixin, View): model=Author; post(request, *args, **kwargs): self.object = self.get_object(); HttpResponseRedirect. SingleObjectMixin with ListView: Paginate books by a publisher. class PublisherDetailView(SingleObjectMixin, ListView): paginate_by=2; get(self, request, *args, **kwargs): self.object = self.get_object(queryset=Publisher.objects.all()); get_context_data(self, **kwargs): context["publisher"] = self.object; get_queryset(self): return self.object.book_set.all() JSONResponseMixin: render_to_json_response(self, context, **response_kwargs), get_data(context). class JSONView(JSONResponseMixin, TemplateView): render_to_response: calls render_to_json_response. class JSONDetailView(JSONResponseMixin, BaseDetailView): render_to_response: calls render_to_json_response. class HybridDetailView(JSONResponseMixin, SingleObjectTemplateResponseMixin, BaseDetailView): render_to_response: if self.request.GET.get("format") == "json": return self.render_to_json_response(context) else: return super().render_to_response(context) Conditional View Processing: Uses HTTP headers (ETag, Last-Modified) to reduce data transfer. Middleware: ConditionalGetMiddleware sets ETag. condition decorator: condition(etag_func=None, last_modified_func=None) - takes functions to compute ETag/last_modified time. etag_func(request, *args, **kwargs): returns ETag string or None. last_modified_func(request, *args, **kwargs): returns datetime or None. Example: @condition(last_modified_func=latest_entry) def front_page(request, blog_id): ... etag(etag_func): Decorator for ETag computation only. last_modified(last_modified_func): Decorator for last modified time only. Conditionals work for POST/PUT/DELETE requests, returning 412 if preconditions fail. Validator headers only set for GET/HEAD requests by condition decorator. Comparison: Middleware is global, doesn't prevent response generation, and only works for GET. Aggregation retrieves summarized values from collections of objects. Models: Author(name, age), Publisher(name), Book(name, pages, price, rating, authors, publisher, pubdate), Store(name, books). Book.objects.count(): Returns total book count. Book.objects.filter(publisher__name="X").count(): Books with publisher X count. Book.objects.aggregate(Avg("price", default=0)): Average price, default 0 if no books. Book.objects.aggregate(Max("price", default=0)): Max price, default 0 if no books. Book.objects.aggregate(price_diff=Max("price", output_field=FloatField()) - Avg("price")): Price difference. Publisher.objects.annotate(num_books=Count("book")): Publishers annotated with book count. Publisher.objects.annotate(below_5=Count("book", filter=Q(book__rating__lte=5))): Publishers with rating below 5 book count. Publisher.objects.annotate(num_books=Count("book")).order_by("-num_books")[:5]: Top 5 publishers by book count. QuerySet.aggregate(*args, **kwargs): Returns dict of aggregate values. Args are aggregate functions (Avg, Max, Min, Sum, Count). Can specify alias: aggregate(average_price=Avg("price")). QuerySet.annotate(*args, **kwargs): Annotates each object in QuerySet with aggregate values. Not a terminal clause. Count(expression, distinct=False, filter=None): Counts related objects. distinct=True avoids issues with joins. annotate() with multiple aggregations may yield wrong results; use distinct=True or inspect SQL. Store.objects.annotate(min_price=Min("books__price")): Store with min book price. Publisher.objects.annotate(Count("book")): Publisher with book count (reverse FK). Author.objects.annotate(total_pages=Sum("book__pages")): Author with total pages (reverse M2M). filter() before annotate(): Filters objects considered for annotation. annotate() before filter(): Annotation is unaffected by filter. Book.objects.annotate(num_authors=Count("authors")).filter(num_authors__gt=1): Books with more than one author. Author.objects.annotate(num_books=Count("book"), highly_rated_books=Count("book", filter=Q(book__rating__gte=7))): Authors with total books and highly rated books count. Pay attention to order of annotate() and filter(). Inspect SQL with str(queryset.query). Write tests. QuerySet.order_by(): Can reference annotate() aliases. QuerySet.values(*fields): Groups results by unique field combinations. Affects annotation evaluation. If values() precedes annotate(), annotation uses grouping. If annotate() precedes values(), values() constrains output fields; include aggregate column explicitly. Item.objects.values("data").annotate(Count("id")).order_by(): Clear ordering if extra columns affect grouping. Book.objects.annotate(num_authors=Count("authors")).aggregate(Avg("num_authors")): Average authors per book. aggregate(..., default=value): Default return value for empty querysets, except Count which returns 0. Example: Book.objects.filter(name__contains="web").aggregate(Sum("price", default=0)). Fixtures: files with serialized database contents. Created by manage.py dumpdata. Loaded with django-admin loaddata. Extensions must match serializer names (e.g., json, xml). Fixtures can be compressed (zip, gz, bz2, lzma, xz). Database-specific fixtures are supported. Models and databases: A model represents data and maps to a database table. Includes making queries, aggregations, search, managers, raw SQL queries, transactions, multiple databases, tablespaces, and access optimization. Database instrumentation: Wrappers for database query execution. connection.execute_wrapper(wrapper): Context manager to install wrapper. wrapper(execute, sql, params, many, context): Callable for query execution. Args: execute(callable), sql(str), params(list/tuple), many(bool), context(dict). execute: Call to run query. Example wrapper: def blocker(*args): raise Exception. Example usage: with connection.execute_wrapper(blocker): do_queries(). Example logger: class QueryLogger: def __call__(self, execute, sql, params, many, context): ... Manager class: Interface for database query operations on Django models. Default Manager 'objects', can be renamed. Custom Managers extend Manager, used for extra methods or modifying initial QuerySet via get_queryset(). get_queryset() returns QuerySet. Multiple Managers allowed. Default Manager is first defined, use Meta default_manager_name to specify. Base Manager _base_manager for related objects, Meta base_manager_name. QuerySet methods accessible via Manager, use QuerySet.as_manager() or duplicate. from_queryset(queryset_class) creates Manager subclass with QuerySet methods. Managers inherited. Must be shallow copyable. Models: django.db.models.Model base class for models, represents database tables. Attributes are fields mapping to columns. Automatic database API. Fields: Specified as model class attributes. Common types: CharField(max_length), IntegerField(), DateField(). Field options: null (DB null), blank (form blank), choices (select options), default (default value), help_text (form help), primary_key (primary key), unique (unique constraint). Relationships: ForeignKey(Model, on_delete) many-to-one, ManyToManyField(Model) many-to-many, OneToOneField(Model, on_delete, parent_link) one-to-one. Inheritance: Abstract base classes (Meta: abstract=True) for shared fields, no table. Multi-table inheritance, each model gets table, OneToOneField link. Proxy models (Meta: proxy=True) for python behavior changes, same table. Meta options: Inner class Meta for model metadata. ordering, db_table, verbose_name_plural, abstract, proxy. Managers: Model.objects, interface for database queries. Model methods: Custom row-level methods. __str__(), get_absolute_url(), save(**kwargs) (override to customize save, call super().save(**kwargs)), delete(). Multiple databases: Configure in DATABASES setting using aliases (default is special). Synchronize using ./manage.py migrate --database=. Database Routers: Classes with methods to suggest database. Methods: db_for_read(model, **hints), db_for_write(model, **hints), allow_relation(obj1, obj2, **hints), allow_migrate(db, app_label, model_name=None, **hints). Hints: dict with instance. DATABASE_ROUTERS: list of router classes. Manual database selection: QuerySet.using(alias), Model.save(using=alias), Model.delete(using=alias), Manager.db_manager(alias). ModelAdmin customization: override save_model, delete_model, get_queryset, formfield_for_foreignkey, formfield_for_manytomany with using=alias. Cross-database relations: Not supported. Contrib apps: auth, admin, contenttypes, sessions, sites have dependencies and placement constraints. Database access optimization involves indexes, appropriate field types, and understanding QuerySets. Use QuerySet.explain() for query execution details. Optimize database work in the database with filter, exclude, F expressions, annotate, and RawSQL. Retrieve individual objects using unique, indexed columns. Use select_related and prefetch_related to retrieve related data efficiently. Use QuerySet.values(), values_list(), defer(), only(), contains(), count(), exists(), update(), and delete() for optimized data retrieval and manipulation. Avoid ordering if not needed. Querying: Models have a Manager (e.g., objects) to create QuerySets. Create objects using keyword arguments and save(). Save changes using save(). ForeignKey and ManyToManyField update using assignment and add() respectively. Retrieving objects uses all(), filter(**kwargs), exclude(**kwargs), get(). QuerySets are lazy. Slicing limits results ([:5], [5:10]). Field lookups: exact, iexact, contains, icontains, startswith, endswith, and span relationships (e.g., blog__name). Q objects combine lookups (AND, OR, NOT). F expressions compare model fields. delete() removes objects. update() modifies multiple objects at once. Related objects: ForeignKey (e.g., e.blog), ManyToManyField (e.g., e.authors), OneToOneField (e.g., ed.entry). JSONField lookups: data__key, data__owner__name, contains, has_key. Key, index, and path transforms, KT expressions. Search explains database search options in Django. Standard textual queries use field lookups like contains/icontains. PostgreSQL offers advanced functions via django.contrib.postgres. Trigram similarity compares letter sequences. Document-based search handles large text blocks using techniques like stop words, stemming, weighting. Options include Elastic, Solr, PostgreSQL built-in search. django.contrib.postgres provides helpers for PostgreSQL full-text search. See contrib.postgres Full text search doc for details. Raw SQL queries. Manager.raw(raw_query, params=(), translations=None): returns RawQuerySet of model instances. params for SQL injection protection (%s, %(key)s). translations: map query fields to model fields. Indexing/slicing not DB level. Deferring fields. Needs primary key. Annotations. Direct DB access: django.db.connection.cursor(). cursor.execute(sql, [params]), fetchone(), fetchall(). django.db.connections for multiple DBs. dictfetchall(cursor), namedtuplefetchall(cursor) for result format. Cursor context manager. CursorWrapper.callproc(procname, params=None, kparams=None): stored procedures. Warning: SQL injection risk - use params. MySQL type coercion. No raw SQL checking. Tablespaces organize disk layout. Django does not create tablespaces. db_tablespace: Model Meta option to specify a tablespace for the table. Affects ManyToManyFields. DEFAULT_TABLESPACE setting specifies a default value. Index(fields, db_tablespace): Constructor to specify tablespace for an index. db_tablespace option to Field constructor specifies tablespace for field's column index. DEFAULT_INDEX_TABLESPACE setting specifies default value. TablespaceExample(models.Model): Example model demonstrating tablespace usage. Supported by PostgreSQL and Oracle. Ignored by SQLite, MariaDB, and MySQL. ATOMIC_REQUESTS: Wrap each request in a transaction. non_atomic_requests(using=None): Decorator to negate ATOMIC_REQUESTS. atomic(using=None, savepoint=True, durable=False): Context manager/decorator for atomic transactions. using: database name. savepoint: Use savepoints for inner blocks. durable: outermost atomic block. Raises RuntimeError if nested. Example: @transaction.atomic def viewfunc(request): do_stuff() transaction.on_commit(func, using=None, robust=False): Register callback func to run after successful commit. robust=True allows execution of next callbacks even if current one throws error. Called immediately if no open transaction. get_autocommit(using=None): Returns autocommit state. set_autocommit(autocommit, using=None): Sets autocommit state. commit(using=None): Commits current transaction. rollback(using=None): Rolls back current transaction. savepoint(using=None): Creates a new savepoint. Returns savepoint ID. savepoint_commit(sid, using=None): Commits to savepoint. savepoint_rollback(sid, using=None): Rolls back to savepoint. clean_savepoints(using=None): Resets savepoint ID counter. get_rollback(using=None): Gets rollback flag. set_rollback(rollback, using=None): Sets rollback flag. Forces/prevents rollback when exiting atomic block. Email sending in Django via django.core.mail. send_mail(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None, auth_password=None, connection=None, html_message=None) sends a single email. Parameters: subject, message, from_email, recipient_list are required. fail_silently: boolean, raises smtplib.SMTPException if False. auth_user, auth_password: SMTP auth credentials. connection: email backend instance. html_message: html content. Returns: number of delivered messages (0 or 1). send_mass_mail(datatuple, fail_silently=False, auth_user=None, auth_password=None, connection=None) sends multiple emails efficiently. datatuple: tuple of (subject, message, from_email, recipient_list). Returns: number of delivered messages. mail_admins(subject, message, fail_silently=False, connection=None, html_message=None) sends email to site admins (ADMINS setting). Subject prefixed by EMAIL_SUBJECT_PREFIX. From: SERVER_EMAIL. mail_managers(subject, message, fail_silently=False, connection=None, html_message=None) sends email to site managers (MANAGERS setting). Header injection protection: newlines forbidden, raises django.core.mail.BadHeaderError. EmailMessage class for advanced features. EmailMessage(subject, body, from_email, to, bcc=None, connection=None, attachments=None, headers=None, cc=None, reply_to=None) initializes email message. Methods: send(fail_silently=False) sends message, returns 1 if success, 0 if fail. message() constructs MIME object. recipients() returns all recipients. attach(filename=None, content=None, mimetype=None) adds file attachment. attach_file(path, mimetype=None) adds file from path. EmailMultiAlternatives class for alternative content types. attach_alternative(content, mimetype) adds alternative content. Email backends handle sending. Methods: open(), close(), send_messages(email_messages). get_connection(backend=None, fail_silently=False, *args, **kwargs) gets backend instance. Backends: SMTP (default, uses EMAIL_* settings), Console (prints to stdout), File (writes to files EMAIL_FILE_PATH), In-memory (locmem.outbox), Dummy (no-op). Custom backends subclass BaseEmailBackend, implement send_messages(email_messages), open(), close(). Reusing connection via send_messages() or manual open/close. Development config: console backend, file backend, dummy SMTP server (aiosmtpd). External packages (moved from contrib): django-localflavor: country/culture utilities. django-contrib-comments: model comments. django-formtools: form utilities. FileField/ImageField: store and access files. Car.photo: File object with methods/attributes. File: django.core.files.File class. FileSystemStorage: default file storage. Methods: name, path, url. Exceptions: FileNotFoundError if file is not found. formset_factory(form, formset=BaseFormSet, extra=1, max_num=None, validate_max=False, min_num=0, validate_min=False, absolute_max=None, can_order=False, can_delete=False). Creates formset class from form. extra: int, max_num: int, min_num: int, absolute_max: int, can_order: bool, can_delete: bool. BaseFormSet: class for multiple forms. formset.is_valid(). Validates all forms. formset.errors. List of form errors. formset.non_form_errors(). List of formset errors. formset.has_changed(). Checks if data changed. formset.management_form. ManagementForm instance. formset.total_form_count(). Returns total form count. formset.initial_form_count(). Returns initial form count. formset.empty_form. Empty form with prefix. formset.clean(). Formset validation. formset.deleted_forms. Forms marked deleted. formset.ordered_forms. Ordered forms. formset.add_fields(form, index). Add extra fields to form. formset.get_form_kwargs(index). Customize form kwargs. formset.prefix. Formset prefix. formset.render(template_name=None, context=None, renderer=None). Renders formset. formset.as_div(), formset.as_p(), formset.as_table(), formset.as_ul(). Render formset formats. Form.DELETE: BooleanField for deletion (can_delete=True). Form.ORDER: IntegerField for ordering (can_order=True). ManagementForm: Manages formset metadata. Django Forms: Handle user input, rendering, validation. HTML forms: elements, specify URL (action) and HTTP method (method). Methods: GET (for non-state-changing requests), POST (for state-changing requests). Django Form class: Describes a form, similar to a model. Fields map to HTML elements. Form methods: -is_valid(): Validates form data. Returns True if valid, populates cleaned_data. Form example: from django import forms class NameForm(forms.Form): your_name = forms.CharField(label="Your name", max_length=100) View example: from django.http import HttpResponseRedirect from django.shortcuts import render from .forms import NameForm def get_name(request): if request.method == "POST": form = NameForm(request.POST) if form.is_valid(): return HttpResponseRedirect("/thanks/") else: form = NameForm() return render(request, "name.html", {"form": form}) Template: {% csrf_token %} {{ form }} ModelForm: Create forms from Django models. Bound/Unbound Forms: Bound forms contain data, unbound forms are empty. Fields: CharField, EmailField, BooleanField, etc. Widgets: TextInput, Textarea, etc. cleaned_data: Dictionary containing validated form data. Form Rendering: Use {{ form }} in templates. Customize with form_template_name, template_name, or Form.render(). Field groups: Use as_field_group() to render related field elements. Customize with field_template_name or BoundField.render(). Manual field rendering: Access fields via {{ form.field_name }}. Use label_tag(), errors. Error Messages: {{ form.field_name.errors }} displays errors. Non-field errors use nonfield class. Looping: Iterate over form fields with {% for field in form %}. Attributes: errors, field, help_text, html_name, id_for_label, is_hidden, label, label_tag, legend_tag, use_fieldset, value. Hidden/Visible Fields: hidden_fields(), visible_fields(). CSRF protection: Use {% csrf_token %} in POST forms. HTML5 Input Types: Django uses HTML5 input types; disable browser validation with novalidate. Formsets: Collection of forms. ModelFormsets: Formsets based on models. Media class: Define CSS and JavaScript assets for forms. Form Media (Media class): defines CSS/JS assets for forms/widgets. Static definition: inner Media class with css, js, extend. Example: class Media: css = {"all": ["style.css"]}, js = ["script.js"]. Dynamic property: @property def media(self): return forms.Media(css={}, js=[]). Paths: relative to STATIC_URL or MEDIA_URL. Media objects: w.media returns Media instance. Subsets: w.media["css"]. Combine: w1.media + w2.media. Forms also have media: form.media = sum of widget media + form's Media. Inheritance: extend=True/False in static Media. ModelForm class: Creates forms from models. Meta inner class: model (model), fields (list of fields or "__all__"), exclude (list of fields), widgets (dict: field->widget), labels (dict: field->label), help_texts (dict: field->help_text), error_messages (dict: field->error_message), field_classes (dict: field->field_class), formfield_callback (func), localized_fields (list or "__all__"), error_messages[NON_FIELD_ERRORS] (dict). save(commit=True) method: Saves form data, returns model instance. commit=False returns unsaved instance, use save_m2m() for ManyToManyFields. save_m2m() method: Saves many-to-many data after save(commit=False). clean() method: Form and model validation. Override to add custom validation, call super().clean() to keep uniqueness validation. is_valid() method: Checks form validity. errors attribute: Returns form errors. instance attribute: Accesses model instance. Model validation: triggered by is_valid(), errors, full_clean(). Error messages: form/meta level > model level. Overriding fields: widgets, labels, help_texts, error_messages, field_classes, formfield_callback in Meta, or declarative fields. Localization: localized_fields in Meta. Form inheritance: subclass ModelForm, Meta. Initial values: initial parameter in constructor. modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfield_callback=None, widgets=None, localized_fields=None, error_messages=None, field_classes=None) function: Creates ModelForm class. BaseModelFormSet class: Base for model formsets. modelformset_factory(model, form=ModelForm, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, localized_fields=None, validate_max=False, validate_min=False, min_num=None, max_num=None, queryset=None, formfield_callback=None, error_messages=None, field_classes=None, edit_only=False) function: Creates ModelFormSet class. save(commit=True) method: Saves formset data, returns instances. commit=False for unsaved. save_m2m() method: Saves many-to-many data. clean() method: Formset validation, super().clean() for uniqueness. queryset parameter: Custom queryset for formset. changed_objects, deleted_objects, new_objects attributes: After save(). max_num, extra parameters: Limit form count. edit_only parameter: Prevents new object creation. BaseInlineFormSet class: Base for inline formsets. inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, validate_max=False, validate_min=False, min_num=None, max_num=None, widgets=None, localized_fields=None, formfield_callback=None, error_messages=None, field_classes=None, edit_only=False) function: Creates InlineFormSet class. instance parameter: Parent model instance for InlineFormSet. fk_name parameter: ForeignKey field name if multiple FKs. django.views.decorators.http: require_http_methods(request_method_list): Requires view to accept specific methods, returns HttpResponseNotAllowed if unmet. Example: @require_http_methods(["GET", "POST"]) require_GET(): Requires GET method. require_POST(): Requires POST method. require_safe(): Requires GET and HEAD methods. django.views.decorators.http: condition(etag_func=None, last_modified_func=None): Generates ETag and Last-Modified headers. etag(etag_func): Generates ETag header. last_modified(last_modified_func): Generates Last-Modified header. django.views.decorators.gzip: gzip_page(): Compresses content if gzip is allowed. Sets Vary header. django.views.decorators.vary: vary_on_cookie(func): Caches based on cookie. vary_on_headers(*headers): Caches based on request headers. django.views.decorators.cache: cache_control(**kwargs): Patches response's Cache-Control header. See patch_cache_control(). never_cache(view_func): Adds Expires header and Cache-Control: max-age=0, no-cache, no-store, must-revalidate, private header. django.views.decorators.common: no_append_slash(): Excludes view from APPEND_SLASH URL normalization. File uploads handled in request.FILES dictionary. Form must have enctype="multipart/form-data". Access file data via request.FILES['file_field_name']. Use form.save() for ModelForms with FileFields. Looping over UploadedFile.chunks() instead of read() prevents memory overload. Multiple files: use custom widget and FileField subclass. Upload Handlers: classes handling file data during upload, defined in FILE_UPLOAD_HANDLERS. Default: MemoryFileUploadHandler, TemporaryFileUploadHandler. Modify handlers via request.upload_handlers (before accessing request.POST/request.FILES). Example: request.upload_handlers.insert(0, ProgressBarUploadHandler(request)). Use csrf_exempt() and csrf_protect() when modifying upload handlers. Generic views: See Built-in class-based views API. Topics: URL dispatcher, Writing views, View decorators, File Uploads, Shortcut functions, Generic views, Middleware, Sessions. Handling HTTP requests in Django. Middleware: request/response hooks. Factory: __init__(get_response) returns middleware. Middleware: __call__(request) returns response. MIDDLEWARE setting (path list, order matters). Request phase (top-down), response phase (bottom-up). Methods: process_view(request, view_func, view_args, view_kwargs) (before view, returns None/HttpResponse), process_exception(request, exception) (on exception, returns None/HttpResponse), process_template_response(request, response) (TemplateResponse). Streaming responses: handle response.streaming. Exception handling: auto converts to HTTP responses. Async support: sync_capable, async_capable, sync_and_async_middleware. MiddlewareMixin for compatibility. Sessions: store/retrieve data per visitor. Enabled by SessionMiddleware. Settings: SESSION_ENGINE (default: database). backends.base.SessionBase: base class for session objects. Methods: __getitem__, __setitem__, __delitem__, __contains__, get, aget, aset, update, aupdate, pop, apop, keys, akeys, values, avalues, has_key, ahas_key, items, aitems, setdefault, asetdefault, clear, flush, aflush, set_test_cookie, aset_test_cookie, test_cookie_worked, atest_cookie_worked, delete_test_cookie, adelete_test_cookie, get_session_cookie_age, set_expiry, aset_expiry, get_expiry_age, aget_expiry_age, get_expiry_date, aget_expiry_date, get_expire_at_browser_close, aget_expire_at_browser_close, clear_expired, aclear_expired, cycle_key, acycle_key. JSONSerializer: default serializer. SessionStore: Manipulate session data outside views. SessionModel in django.contrib.sessions.models. clearsessions management command. Settings: SESSION_COOKIE_AGE, SESSION_EXPIRE_AT_BROWSER_CLOSE, etc. Subdomain security concerns exist. SessionStore methods: exists, create, save, delete, load, clear_expired. Async versions available (a...). Custom engines via inheritance from SessionBase or SessionStore. AbstractBaseSession and BaseSessionManager in django.contrib.sessions.base_session. django.shortcuts: Helper functions spanning multiple levels of MVC. render(request, template_name, context=None, content_type=None, status=None, using=None): Combines template with context, returns HttpResponse. request: Request object. template_name: Template name or sequence. context: Dict of values. content_type: MIME type, default 'text/html'. status: HTTP status code, default 200. using: Template engine name. redirect(to, *args, permanent=False, **kwargs): Returns HttpResponseRedirect. to: Model (calls get_absolute_url()), view name (uses reverse()), or URL. permanent: If True, issues a permanent redirect. get_object_or_404(klass, *args, **kwargs): Returns object or raises Http404. klass: Model, Manager, or QuerySet. *args: Q objects. **kwargs: Lookup parameters. Raises MultipleObjectsReturned if more than one object is found. get_list_or_404(klass, *args, **kwargs): Returns list of objects or raises Http404 if list is empty. klass: Model, Manager, or QuerySet. *args: Q objects. **kwargs: Lookup parameters. URLconf (URL configuration) maps URL path expressions to Python functions (views). ROOT_URLCONF setting specifies the root URLconf module. urlpatterns: sequence of django.urls.path() or django.urls.re_path() instances. Django runs through each URL pattern, in order, and stops at the first one that matches the requested URL. path(route, view, kwargs=None, name=None): Defines a URL pattern. route: URL pattern string. view: View function to call. kwargs: Extra arguments passed to the view. name: Name of the URL pattern for reverse lookup. re_path(pattern, view, kwargs=None, name=None): Defines a URL pattern using regular expressions. pattern: Regular expression pattern string. Uses (?Ppattern) for named groups. Path converters: str: Matches any non-empty string (excluding '/'). Default. int: Matches zero or any positive integer. Returns an int. slug: Matches ASCII letters/numbers, hyphen, underscore. uuid: Matches a formatted UUID. path: Matches any non-empty string (including '/'). Custom path converters: class Converter: regex, to_python(value), to_url(value) register_converter(converter, name): Registers a custom converter. Including other URLconfs: include(module, namespace=None): Includes another URLconf module. include((pattern_list, app_namespace), namespace=None): Includes URL patterns with an application namespace. Captured parameters are passed to included URLconfs. Passing extra options to view functions: path(route, view, kwargs): kwargs are passed to the view function. URL reversing: reverse(viewname, args=None, kwargs=None, current_app=None): Returns URL string. viewname: URL pattern name. args: Positional arguments for the URL. kwargs: Keyword arguments for the URL. url template tag: Uses the url template tag. get_absolute_url() method: For Django model instances. URL namespaces: app_name: Application namespace in the URLconf module. namespace argument to include(): Instance namespace. Namespaced URLs: 'namespace:name'. Format localization: Displays dates, times, and numbers in templates using the format specified for the current locale. Locale aware input in forms: Uses localized formats when parsing dates, times, and numbers in forms. Class CashRegisterForm(forms.Form): product = forms.CharField() revenue = forms.DecimalField(max_digits=4, decimal_places=2, localize=True) Template tags: {% load l10n %} {% localize on %} {{ value }} {% endlocalize %} Template filters: {{ value|localize }} {{ value|unlocalize }} FORMAT_MODULE_PATH = ["mysite.formats", "some_app.formats"] mysite/ formats/ __init__.py en/ __init__.py formats.py THOUSAND_SEPARATOR = "\\xa0" Internationalization and localization for web applications. Translation depends on the target language, formatting on the target country. Uses locale names (ll or ll_CC) and language codes (ll). Message files (.po) contain translation strings. Format files define data formats for a locale. Django Time Zones: Stores UTC datetimes, uses aware datetimes. USE_TZ setting enables/disables. datetime.datetime: naive (no tzinfo), aware (tzinfo). is_aware(dt), is_naive(dt). timezone.now(): aware datetime (USE_TZ=True). TIME_ZONE: default timezone. timezone.activate(tz): set current timezone. TimezoneMiddleware example: session-based timezone selection, zoneinfo.ZoneInfo, timezone.activate/deactivate. Forms: return aware datetimes. Templates: convert aware datetimes to current timezone. Template tags: {% localtime on/off %}, {% timezone "tz" %}, {% get_current_timezone as TIME_ZONE %}. Filters: {{ value|localtime }}, {{ value|utc }}, {{ value|timezone:"tz" }}. Migration: USE_TZ=True, convert naive to aware datetimes. django.utils.timezone: now(), is_aware(), is_naive(), make_aware(), make_naive(). zoneinfo.available_timezones(). Error: TypeError: naive/aware datetime compare. Fix: use aware datetimes. RuntimeWarning: DateTimeField naive datetime. Fix: use aware datetimes. FAQ: Enable time zones for DST. Use aware datetimes. timezone.localtime(timezone.now()) for local time. Django topics: Installation, Models, Databases, HTTP requests, Views, Forms, Templates, Class-based views, Migrations, Files, Testing, User authentication, Cache framework, Asynchronous support, Cryptographic signing, Email, Internationalization, Localization, Logging, Pagination, Security, Performance, Serialization, Settings, Signals, System check framework, Async views. Install Django: Requires Python. Apache with mod_wsgi: Production deployment. Database: PostgreSQL, MariaDB, MySQL, Oracle, SQLite. DATABASES setting: ENGINE, NAME, USER, PASSWORD, HOST. pip install Django: Install official release. python -m pip install -e django/: Install development version (using Git). Logging: Uses Python logging module. Components: Loggers, Handlers, Filters, Formatters. Loggers: named buckets, log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL). Handlers: actions for messages, log levels, multiple handlers per logger. Filters: additional control, message filtering/modification. Formatters: output text format. Security: sensitive info in logs. AdminEmailHandler with include_html is sensitive. Configuration: LOGGING setting (dictConfig), disable_existing_loggers, LOGGING_CONFIG for custom config or None to disable. Examples: console, file, complex setups. Migrations manage database schema changes. Commands: migrate, makemigrations, sqlmigrate, showmigrations. makemigrations creates migration files based on model changes. migrate applies migrations to database schema. Workflow: makemigrations then migrate. Migration files in "migrations" directory per app. Operations define schema changes. Transactions supported (except MySQL). Dependencies between migrations are tracked. Initial migrations create app tables. Data migrations with RunPython(forward_func, reverse_func) for data changes. Squashing migrations to reduce number of migration files. Serialization for model and field definitions in migrations. Migration class attributes: dependencies, operations, atomic=False (disable transaction), initial=True (initial migration). Functions: RunPython(func, reverse_func), swappable_dependency(value='app_label.Model'). Exceptions: IrreversibleError on reversing irreversible migrations. Use historical models in RunPython. Serialization limitations for some Python types. CircularDependencyError during squashing. Pagination: managing paginated data. Paginator(object_list, per_page): splits QuerySet/list into pages. Methods: count(), num_pages, page_range, page(page_number). Page object: object_list, has_next(), has_previous(), has_other_pages(), next_page_number(), previous_page_number(), start_index(), end_index(). ListView: paginate_by attribute for pagination. get_page(page_number): returns Page object, raises EmptyPage for invalid page numbers. Django performance optimization overview. Tools: django-debug-toolbar, Yslow, Google PageSpeed. Techniques: Caching, cached_property decorator for class method caching, Laziness, Database optimization, Persistent connections, HTTP middleware (ConditionalGetMiddleware, GZipMiddleware), Cached sessions, Static files optimization (ManifestStaticFilesStorage for long-term browser caching), Template optimization, Alternative software (Jinja2, PyPy, C libs). General advice: benchmark, work at lower levels, use caching, optimize database/static/templates, consider alternatives carefully. Middleware: ConditionalGetMiddleware for conditional GET based on ETag/Last-Modified. GZipMiddleware for response compression (security risk warning). Static Files: ManifestStaticFilesStorage for versioned static file URLs. Security: XSS protection (template escaping). CSRF protection (secret in POST requests, HTTPS referer check, csrf_exempt). SQL injection protection (query parameterization). Clickjacking protection (X-Frame-Options middleware). SSL/HTTPS (SECURE_PROXY_SSL_HEADER, SECURE_SSL_REDIRECT, secure cookies, HSTS). Host header validation (ALLOWED_HOSTS). Referrer policy. COOP. Session security. User-uploaded content (limit uploads, serve from separate domain). Consider Django plugins, web server modules for brute-force protection. Keep SECRET_KEY secret. serializers module for object serialization/deserialization. serializers.serialize(format, queryset, fields=None) format: str(xml,json,jsonl,yaml), queryset: QuerySet, fields: list. Serialize queryset to format. Returns serialized data. serializers.deserialize(format, data, ignorenonexistent=False, handle_forward_references=False) format: str, data: str/stream, ignorenonexistent: bool, handle_forward_references: bool. Deserialize data. Returns DeserializedObject iterator. DeserializedObject: object. DeserializedObject.object: Django model instance. DeserializedObject.save(). Save object. DeserializedObject.save_deferred_fields(). Save forward references. DjangoJSONEncoder: JSON encoder for Django types. Model.natural_key(). Returns tuple for natural key. Manager.get_by_natural_key(*key). Retrieves object by natural key. serialize(use_natural_foreign_keys=True, use_natural_primary_keys=True). Enable natural keys in serialization. deserialize(handle_forward_references=True). Handle forward references in deserialization. Django settings: Python module configuration. Set `DJANGO_SETTINGS_MODULE` env variable. Access settings via `django.conf.settings`. `configure(default_settings, **settings)`: manually configure. `setup()`: for standalone Django use. `diffsettings`: shows setting differences. Signals allow decoupled applications to get notified when actions occur. Signal.connect(receiver, sender=None, weak=True, dispatch_uid=None): Connects receiver function to a signal. receiver is the callback function. sender is a specific sender to receive signals from. weak stores signal handlers as weak references by default. dispatch_uid is a unique identifier. receiver(signal, **kwargs): Decorator to connect a function to a signal. Signal.send(sender, **kwargs): Sends a signal synchronously. Signal.send_robust(sender, **kwargs): Sends a signal, catching exceptions. Signal.asend(sender, **kwargs): Sends a signal asynchronously. Signal.asend_robust(sender, **kwargs): Sends a signal asynchronously, catching exceptions. Signal.disconnect(receiver=None, sender=None, dispatch_uid=None): Disconnects a receiver from a signal. django.core.signing module for cryptographic signing. Signer class(key=None, sep=':', salt=None, algorithm=None, fallback_keys=None): signs values. sign(value): returns signed value. unsign(value): returns original value, raises BadSignature. sign_object(obj, serializer=JSONSerializer, compress=False): signs complex objects. unsign_object(signed_obj, serializer=JSONSerializer): unsigns complex objects. TimestampSigner class(key=None, sep=':', salt=None, algorithm='sha256'): signs with timestamp. sign(value): signs value with timestamp. unsign(value, max_age=None): unsigns, checks max_age, raises SignatureExpired. sign_object(obj, serializer=JSONSerializer, compress=False): signs complex objects with timestamp. unsign_object(signed_obj, serializer=JSONSerializer, max_age=None): unsigns complex objects with timestamp. dumps(obj, key=None, salt='django.core.signing', serializer=JSONSerializer, compress=False): returns signed compressed JSON string with timestamp. loads(string, key=None, salt='django.core.signing', serializer=JSONSerializer, max_age=None, fallback_keys=None): reverse of dumps, raises BadSignature, checks max_age. Exceptions: BadSignature, SignatureExpired. Engine: django.template.Engine. Encapsulates the Django template system. Template: django.template.Template represents a compiled template. Context: django.template.Context holds metadata & data passed to Template.render(). RequestContext: django.template.RequestContext subclasses Context, stores HttpRequest, runs context processors. Loaders: locate, load, and return Template objects. get_template(template_name, using=None): Loads a template. Raises TemplateDoesNotExist/TemplateSyntaxError. select_template(template_name_list, using=None): Tries multiple template names. render_to_string(template_name, context=None, request=None, using=None): Loads template and calls render(). DjangoTemplates: class for Django template engine. OPTIONS: autoescape, context_processors, debug, loaders, string_if_invalid, file_charset, libraries, builtins. Jinja2: class for Jinja2 engine. Requires Jinja2. OPTIONS: environment, autoescape, loader, auto_reload, undefined, context_processors. Exceptions: TemplateDoesNotExist, TemplateSyntaxError. RequestFactory: Create request instances for view testing. Methods: get(path, data=None, secure=False, **kwargs), post(path, data=None, content_type='application/x-www-form-urlencoded', secure=False, **kwargs), put, delete, head, options, trace. Args: path (str), data (dict), secure (bool). Doesn't support middleware; set user/session attrs manually. query_params parameter added in Django 5.1. Example: request = RequestFactory().get('/customer/details'); response = my_view(request). AsyncRequestFactory: Creates ASGI-like requests. API compatible with RequestFactory, returns ASGIRequest instances. Testing class-based views: Instantiate view, call setup(request), then test methods. Example: view = HomeView(); view.setup(request); context = view.get_context_data(). ALLOWED_HOSTS: Must include custom host names used in tests. Override with override_settings() or modify_settings(). Testing primary/replica DBs: Use MIRROR in TEST settings to treat replica as mirror of primary. Requires TransactionTestCase. DEPENDENCIES: Use in TEST settings to control test database creation order. TransactionTestCase.available_apps: Optimize flush by listing apps; private API. TransactionTestCase.reset_sequences: Resets sequences before test run if set to True. SerializeMixin: Enforces sequential test class execution using a filesystem lockfile, set lockfile = __file__. Django test runner for reusable apps: Create tests/ directory with runtests.py, test_settings.py, and tests.py. tests/test_settings.py: Contains settings for tests (e.g., SECRET_KEY, INSTALLED_APPS). TEST_RUNNER: Setting to define test execution behavior (default: 'django.test.runner.DiscoverRunner'). DiscoverRunner: Class for default Django testing behavior. Args: pattern='test*.py', top_level, verbosity=1, interactive=True, failfast=False, keepdb=False, reverse=False, debug_mode=False, debug_sql=False, parallel=0, tags, exclude_tags, test_name_patterns, pdb=False, buffer=False, enable_faulthandler=True, timing=True, shuffle=False, logger=None, durations=None, **kwargs. Methods: run_tests(test_labels, **kwargs) (returns # failed), add_arguments(parser), setup_test_environment(), build_suite(test_labels), setup_databases(), run_checks(databases), run_suite(suite), teardown_databases(old_config), teardown_test_environment(). Test labels formats: 'path.to.module.TestCase.test_method', 'path.to.module.TestCase', 'path.to.module', 'path/to/directory'. Testing utilities (django.test.utils): setup_test_environment(debug=None), teardown_test_environment(), setup_databases(verbosity, interactive, aliases=None, serialized_aliases=None, **kwargs), teardown_databases(old_config, parallel=0, keepdb=False). Database creation utils (django.db.connection.creation): create_test_db(verbosity=1, autoclobber=False, serialize=True, keepdb=False) (modifies DATABASES NAME), destroy_test_db(old_database_name, verbosity=1, keepdb=False). Integration with coverage.py: Run tests with coverage: coverage run --source='.' manage.py test myapp; generate report: coverage report. Testing in Django: Use tests to validate new code and ensure changes don't unexpectedly affect application behavior. Django provides a test-execution framework and utilities to simulate requests, insert test data, inspect output, and verify code. Preferred way to write tests is using the unittest module. Can also use other Python test frameworks. django.test.TestCase(unittest.TestCase): Base class for tests interacting with DB. setUp(self): setup test env. test_*(self): test methods, use assertions like assertEqual. manage.py test: Run tests. Test discovery: test*.py files. Test labels: dotted paths. -p/--pattern: filename pattern. --failfast: stop on fail. --keepdb: keep test db. --noinput: suppress db prompt. --parallel: parallel tests. --shuffle/--reverse: order options. --verbosity: output level. python -Wa manage.py test: warnings enabled. DATABASES['NAME']: test db name (test_ prefix). DATABASES['TEST']: test db settings. TEST_NON_SERIALIZED_APPS: exclude apps from serialization. serialized_rollback=True: reload data per testcase (TestCase/TransactionTestCase). PASSWORD_HASHERS: password hashing algorithms. InMemoryStorage: in-memory media files. unittest.TestCase: base class for unit tests. Client(enforce_csrf_checks=False raise_request_exception=True json_encoder=DjangoJSONEncoder headers=None query_params=None **defaults) HTTP client. get(path data=None follow=False secure=False headers=None query_params=None **extra) GET request. post(path data=None content_type=MULTIPART_CONTENT follow=False secure=False headers=None query_params=None **extra) POST request. head(path data=None follow=False secure=False headers=None query_params=None **extra) HEAD request. options(path data='' content_type='application/octet-stream' follow=False secure=False headers=None query_params=None **extra) OPTIONS request. put(path data='' content_type='application/octet-stream' follow=False secure=False headers=None query_params=None **extra) PUT request. patch(path data='' content_type='application/octet-stream' follow=False secure=False headers=None query_params=None **extra) PATCH request. delete(path data='' content_type='application/octet-stream' follow=False secure=False headers=None query_params=None **extra) DELETE request. trace(path follow=False secure=False headers=None query_params=None **extra) TRACE request. login(**credentials) Simulates user login. force_login(user backend=None) Simulates user login without authentication. logout() Simulates user logout. Response.content: Response body as bytestring. Response.context: Template Context. Response.exc_info: Exception info if any. Response.json(**kwargs): Response body parsed as JSON. Response.request: Request data. Response.status_code: HTTP status code. Response.templates: Templates used to render the content. SimpleCookie object contains client cookies. session: Dictionary-like object containing session information. asession() Asynchronous session. settings() Context manager to change settings temporarily. modify_settings() Context manager for easier settings changes. override_settings(**kwargs) Decorator for overriding settings. isolate_apps(*app_labels attr_name=None kwarg_name=None) Registers models within a wrapped context into isolated apps registry. assertRaisesMessage(expected_exception expected_message callable *args **kwargs) Asserts callable raises exception with specific message. assertWarnsMessage(expected_warning expected_message callable *args **kwargs) Analogous to assertRaisesMessage() but for warnings. assertFieldOutput(fieldclass valid invalid field_args=None field_kwargs=None empty_value='') Asserts form field behavior. assertFormError(form field errors msg_prefix='') Asserts form field errors. assertFormSetError(formset form_index field errors msg_prefix='') Asserts formset errors. assertContains(response text count=None status_code=200 msg_prefix='' html=False) Asserts response contains text. assertNotContains(response text status_code=200 msg_prefix='' html=False) Asserts response does not contain text. assertTemplateUsed(response template_name msg_prefix='' count=None) Asserts template was used. assertTemplateNotUsed(response template_name msg_prefix='') Asserts template was not used. assertURLEqual(url1 url2 msg_prefix='') Asserts URLs are equal. assertRedirects(response expected_url status_code=302 target_status_code=200 msg_prefix='' fetch_redirect_response=True) Asserts redirect. assertHTMLEqual(html1 html2 msg=None) Asserts HTML is equal. assertHTMLNotEqual(html1 html2 msg=None) Asserts HTML is not equal. assertXMLEqual(xml1 xml2 msg=None) Asserts XML is equal. assertXMLNotEqual(xml1 xml2 msg=None) Asserts XML is not equal. assertInHTML(needle haystack count=None msg_prefix='') Asserts HTML fragment is in haystack. assertNotInHTML(needle haystack msg_prefix='') Asserts HTML fragment is not in haystack. assertJSONEqual(raw expected_data msg=None) Asserts JSON is equal. assertJSONNotEqual(raw expected_data msg=None) Asserts JSON is not equal. assertQuerySetEqual(qs values transform=None ordered=True msg=None) Asserts queryset matches values. assertNumQueries(num func *args **kwargs) Asserts the number of database queries. tag(*args) Test tagging decorator. AsyncClient client for asynchronous tests. skipIfDBFeature(*feature_name_strings) Skip test if database features are supported. skipUnlessDBFeature(*feature_name_strings) Skip test if database features are not supported. django.core.mail.outbox: List of sent EmailMessage instances. call_command(command_name *args **kwargs) Calls a management command.
