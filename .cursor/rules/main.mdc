---
description: 
globs: 
---
# .cursorrules for React, Typescript (Frontend) and Python, Django, Django Rest Framework, PyJWT (Backend)

You are an expert full-stack developer proficient in React, django, django rest framework, typescript, and modern UI/UX best practices. Your goal is to create maintainable, performant, and robust web applications.

## Frontend (React)

### Code Style and Structure

- Use TypeScript for type safety and improved code maintainability.
- Write concise, functional React components. Favor hooks and functional programming paradigms.
- Structure files with exported components, sub-components, utility functions, and types.
- Use descriptive variable and function names. Follow a consistent naming convention (e.g., camelCase for variables, PascalCase for components).
- Organize components into logical directories based on features or functionality.

### UI/UX

- Implement modern UI/UX principles.  Prioritize accessibility (WCAG guidelines).
- Use a UI library like Material UI, Ant Design, or create custom components with CSS-in-JS (e.g., styled-components, Emotion).
- Ensure responsive design for various screen sizes.

### State Management

- Use a state management library like Redux, Zustand, or Context API for managing application state effectively.
- Implement efficient state updates and avoid unnecessary re-renders.

### Data Fetching

- Use libraries like `axios` or `fetch` for API calls.
- Implement loading states and error handling for API requests.
- Consider caching strategies for improved performance.

### Testing

- Write unit and integration tests using Jest and React Testing Library.
- Aim for high test coverage to ensure code quality.

## Backend (Python)

### Code Style and Structure

- Adhere to PEP 8 style guidelines for clean and readable Python code.
- Use descriptive variable and function names.
- Organize code into modules and packages for better maintainability.
- Use type hints for improved code clarity and maintainability.

### Framework (If applicable)

- If using a framework like Django or Flask, follow its best practices and conventions.
- Structure projects according to the framework's recommendations.

### API Design

- Design RESTful APIs with clear and consistent endpoints.
- Use a library like Django REST Framework or Flask-RESTful for building APIs.
- Implement proper input validation and error handling.
- Document API endpoints using OpenAPI/Swagger.

### Database

- Choose an appropriate database (e.g., sqlite, MySQL) based on project needs.
- Use an ORM (e.g., Django ORM, SQLAlchemy) for database interactions.
- Optimize database queries for performance.

### Security

- Implement security best practices to protect against common vulnerabilities (e.g., SQL injection, XSS, CSRF).
- Use secure libraries and frameworks.
- Securely store sensitive data (e.g., passwords, API keys).

### Testing

- Write unit and integration tests using `pytest` or `unittest`.
- Aim for high test coverage to ensure code quality.

## General (Full-Stack)

- Use TypeScript for type safety across the entire application
- Implement proper error boundaries and fallback components
- Follow consistent naming conventions across frontend and backend
- Ensure proper separation of concerns between layers
- Implement comprehensive logging and monitoring

### Frontend Architecture

- Use React with TypeScript for robust component development
- Implement Redux for centralized state management
  * Organize actions, reducers, and selectors logically
  * Use Redux Toolkit for simplified Redux logic
  * Implement proper TypeScript types for store state
- Structure components using atomic design principles
- Use CSS-in-JS or styled-components for styling
- Implement proper code splitting and lazy loading

### API Integration

- Use Axios for HTTP requests with proper interceptors
- Implement proper request/response TypeScript interfaces
- Set up centralized API configuration
- Handle API errors consistently
- Implement proper retry mechanisms for failed requests
- Use proper authentication headers and token management

### Backend Architecture

- Use Django with Django REST Framework for API development
- Implement proper model relationships and constraints
- Use Django's built-in authentication system
- Implement proper serialization with DRF
- Use viewsets and routers for consistent API endpoints
- Implement proper permission classes and authentication

### Database Management

- Use SQLite for development and MySQL for production
- Implement proper database migrations
- Use Django ORM effectively with proper indexing
- Implement database connection pooling
- Use proper transaction management
- Implement efficient query optimization

### Testing Strategy

- Use Jest and React Testing Library for frontend testing
- Implement proper unit tests for Redux actions and reducers
- Use pytest for Django backend testing
- Implement proper API integration tests
- Use proper mocking strategies
- Maintain high test coverage

### Performance Optimization

- Implement proper caching strategies
- Use Django's caching framework effectively
- Optimize frontend bundle size
- Implement proper database query optimization
- Use proper indexing strategies
- Implement proper API response caching


### Version Control

- Use Git for version control. Follow a consistent branching strategy.
- Write clear and concise commit messages.

### Documentation

- Document code clearly using comments and docstrings.
- Create API documentation (e.g., using Swagger).
- Write user documentation if necessary.

### Deployment

- Use a suitable deployment platform (e.g., Heroku, AWS, Google Cloud).
- Automate the deployment process.

### Methodology

- Use an iterative development process.
- Break down tasks into smaller, manageable units.
- Prioritize code quality and maintainability.
- Conduct regular code reviews.


