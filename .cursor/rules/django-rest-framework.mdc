---
description: django_reset_framework
globs: 
---
Authentication schemes associate requests with credentials. Authentication runs before permission/throttling checks. request.user is a Django User instance, request.auth holds additional auth info. Authentication classes are a list. BasicAuthentication: HTTP Basic Auth. request.user is Django User, request.auth is None. TokenAuthentication: Token-based auth. request.user is Django User, request.auth is Token instance. SessionAuthentication: Django session-based auth. request.user is Django User, request.auth is None. RemoteUserAuthentication: Authenticates using the REMOTE_USER env var set by web server. Custom authentication: Subclass BaseAuthentication, override .authenticate(request) & .authenticate_header(request). APIView: @method_decorator(cache_page(seconds)) to cache GET/HEAD responses. Supported decorators: cache_page, vary_on_cookie, vary_on_headers. @api_view: Use cache_page, vary_on_cookie directly. BaseContentNegotiation: select_parser(request, parsers) returns selected parser. select_renderer(request, renderers, format_suffix) returns (renderer, media type). DEFAULT_CONTENT_NEGOTIATION_CLASS for global setting. content_negotiation_class in APIView overrides default. APIException(): Base for API exceptions. ParseError(detail=None, code=None): Malformed data in request. AuthenticationFailed(detail=None, code=None): Incorrect authentication. NotAuthenticated(detail=None, code=None): Unauthenticated request fails permission checks. PermissionDenied(detail=None, code=None): Authenticated request fails permission checks. NotFound(detail=None, code=None): Resource not found. MethodNotAllowed(method, detail=None, code=None): Request method not handled. NotAcceptable(detail=None, code=None): Accept header not satisfied. UnsupportedMediaType(media_type, detail=None, code=None): Cannot handle request content type. Throttled(wait=None, detail=None, code=None): Throttling checks failed. ValidationError(detail=None, code=None): Validation error. detail may be list or dict. Serializer fields handle converting between primitive values and internal datatypes. Core arguments read_only, write_only, required, default, allow_null, source, validators, error_messages, label, help_text, initial, style. BooleanField: Boolean representation. CharField: Text representation. CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True). EmailField: Text representation, validates email. EmailField(max_length=None, min_length=None, allow_blank=False). RegexField: Text representation, validates regex. RegexField(regex, max_length=None, min_length=None, allow_blank=False). SlugField: RegexField, validates [a-zA-Z0-9_-]+. URLField: RegexField, validates URL. UUIDField: Validates UUID string. UUIDField(format='hex_verbose'). FilePathField: Choices are filenames in directory. IPAddressField: Validates IPv4 or IPv6 string. IntegerField: Integer representation. IntegerField(max_value=None, min_value=None). FloatField: Floating point representation. FloatField(max_value=None, min_value=None). DecimalField: Decimal representation. DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None). DateTimeField: Date and time representation. DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None, default_timezone=None). DateField: Date representation. DateField(format=api_settings.DATE_FORMAT, input_formats=None). TimeField: Time representation. TimeField(format=api_settings.TIME_FORMAT, input_formats=None). DurationField: Duration representation. DurationField(max_value=None, min_value=None). ChoiceField: Value from limited choices. ChoiceField(choices). MultipleChoiceField: Set of values from choices. MultipleChoiceField(choices). FileField: File representation. FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL). ImageField: Image representation. ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL). ListField: Validates a list of objects. ListField(child=, allow_empty=True, min_length=None, max_length=None). DictField: Validates dictionary of objects. DictField(child=, allow_empty=True). HStoreField: Preconfigured DictField. HStoreField(child=, allow_empty=True). JSONField: Validates JSON primitives. JSONField(binary, encoder). ReadOnlyField: Returns field value without modification. HiddenField: Value from default or callable. ModelField: Tied to any model field. ModelField(model_field=). SerializerMethodField: Value from serializer method. SerializerMethodField(method_name=None). Custom fields: subclass Field and override to_representation() and to_internal_value(). Filtering methods: Override .get_queryset() for custom filtering. Filter by request.user, URL params, query params. Generic Filter Backends: DEFAULT_FILTER_BACKENDS setting or per-view basis. DjangoFilterBackend: filterset_fields for simple equality filtering. SearchFilter: search_fields to enable search. OrderingFilter: ordering_fields to specify orderable fields. Custom Filters: Subclass BaseFilterBackend & override filter_queryset(request, queryset, view). format_suffix_patterns(urlpatterns, suffix_required=False, allowed=None) Returns URL patterns with format suffixes. urlpatterns: URL pattern list. suffix_required: Suffixes optional (default False). allowed: Valid format suffixes. Views must accept 'format' kwarg. GenericAPIView: Extends APIView. Attributes: queryset, serializer_class, lookup_field (default 'pk'), lookup_url_kwarg. Methods: get_queryset(), get_object(), filter_queryset(queryset), get_serializer_class(), perform_create(serializer), perform_update(serializer), perform_destroy(instance). Mixins: ListModelMixin(.list), CreateModelMixin(.create), RetrieveModelMixin(.retrieve), UpdateModelMixin(.update, .partial_update), DestroyModelMixin(.destroy). Concrete Views: CreateAPIView(.post), ListAPIView(.get), RetrieveAPIView(.get), DestroyAPIView(.delete), UpdateAPIView(.put, .patch), ListCreateAPIView(.get, .post), RetrieveUpdateAPIView(.get, .put, .patch), RetrieveDestroyAPIView(.get, .delete), RetrieveUpdateDestroyAPIView(.get, .put, .patch, .delete). SimpleMetadata: Default metadata class. determine_metadata(request, view) Returns metadata dict. Custom metadata: Override BaseMetadata. Implement determine_metadata(request, view). PageNumberPagination: page_size, page_query_param, page_size_query_param, max_page_size, last_page_strings, template. Supports page number in query parameters. LimitOffsetPagination: default_limit, limit_query_param, offset_query_param, max_limit, template. Uses limit and offset query parameters. CursorPagination: page_size, cursor_query_param, ordering, template. Uses opaque cursor for pagination. Custom Pagination: Inherit pagination.BasePagination, override paginate_queryset and get_paginated_response methods. Global settings: DEFAULT_PAGINATION_CLASS, PAGE_SIZE Parsers convert request content to data. JSONParser: parses application/json. FormParser: parses application/x-www-form-urlencoded. MultiPartParser: parses multipart/form-data (supports file uploads). FileUploadParser: parses raw file uploads (*/*), uses request.data['file']. Custom parsers inherit BaseParser, set .media_type, implement .parse(stream, media_type, parser_context) returning request.data. Permissions: Allow/Deny access. Checks run before view execution. DEFAULT_PERMISSION_CLASSES setting sets global permissions. AllowAny: unrestricted access. IsAuthenticated: authenticated users only. IsAdminUser: staff users only. IsAuthenticatedOrReadOnly: auth users read/write, unauth read only. DjangoModelPermissions: auth users with model permissions. DjangoObjectPermissions: auth users with object permissions. Custom permissions: inherit BasePermission, implement has_permission(request, view) and/or has_object_permission(request, view, obj). SAFE_METHODS: GET, HEAD, OPTIONS. Relational fields represent model relationships in serializers. StringRelatedField: uses __str__. PrimaryKeyRelatedField: uses primary key. HyperlinkedRelatedField: uses hyperlink (view_name required). SlugRelatedField: uses a target field (slug_field required). HyperlinkedIdentityField: represents object's URL. Nested relationships use serializers as fields, many=True for to-many. Custom relational fields: override RelatedField, implement to_representation(value) (read-only) or also to_internal_value(data). JSONRenderer renders data to JSON. .media_type: application/json. TemplateHTMLRenderer renders data to HTML using Django templates. .media_type: text/html. StaticHTMLRenderer renders pre-rendered HTML. .media_type: text/html. BrowsableAPIRenderer renders data into HTML for the Browsable API. .media_type: text/html. AdminRenderer renders data into HTML for an admin-like display. .media_type: text/html. HTMLFormRenderer renders serializer data into an HTML form (no form tags). .media_type: text/html. MultiPartRenderer renders HTML multipart form data. .media_type: multipart/form-data. BaseRenderer: custom renderer base class. Implement .render(data, accepted_media_type, renderer_context) which returns a bytestring. PlainTextRenderer example: class PlainTextRenderer(renderers.BaseRenderer): media_type = 'text/plain' format = 'txt' def render(self, data, accepted_media_type=None, renderer_context=None): return smart_str(data, encoding=self.charset) Customize character set by setting .charset attribute. Request class extends HttpRequest, supports request parsing and authentication. .data: Parsed request body content (supports JSON, PUT, PATCH). .query_params: Synonym for request.GET. .parsers: List of Parser instances. May raise ParseError if content is malformed or UnsupportedMediaType if content-type is unparseable. .accepted_renderer: Selected renderer instance. .accepted_media_type: Accepted media type string. .user: User instance (or AnonymousUser if unauthenticated). .auth: Additional authentication context. .authenticators: List of Authentication instances. .method: Uppercased HTTP method string. .content_type: HTTP request body's media type string. .stream: Stream representing the content of the request body. Response(data status=None template_name=None headers=None content_type=None) Returns content-negotiated web API responses. data: serialized data. status: HTTP status code (default: 200). template_name: template for HTMLRenderer. headers: HTTP headers. content_type: response content type. .data: unrendered, serialized data. .status_code: HTTP status code. .content: rendered content. .template_name: template_name. .render() Renders serialized data. reverse(viewname, *args, **kwargs): returns fully qualified URL like django.urls.reverse, requires request kwarg. reverse_lazy(viewname, *args, **kwargs): returns fully qualified URL like django.urls.reverse_lazy, requires request kwarg. Routers automatically determine URL mappings. SimpleRouter: Routes for list, create, retrieve, update, partial_update, destroy actions. DefaultRouter: Includes API root view. @action decorator marks extra actions. Custom routers can be implemented by subclassing existing router classes or BaseRouter. .register(prefix, viewset, basename): Registers a viewset. prefix: URL prefix. viewset: Viewset class. basename: Base for URL names. .urls: Returns URL patterns. DynamicRoute, Route named tuples configure URL patterns. SchemaGenerator(title description version url patterns urlconf public generator_class authentication_classes permission_classes renderer_classes) generates OpenAPI schema. get_schema(request public=False) returns schema dictionary. AutoSchema generates OpenAPI elements for each view method and path. get_components() returns dictionary of components. get_operation() returns OpenAPI operation object. get_components() get_component_name() get_reference() map_serializer() map_field() get_tags() get_operation() get_operation_id() get_operation_id_base() get_serializer() get_request_serializer() get_response_serializer() AutoSchema.__init__(tags component_name operation_id_base) CommentSerializer(email content created) Serializer class. create(validated_data) create instance. update(instance validated_data) update instance. is_valid(raise_exception=True) validates data. errors returns errors. validate_(value) custom field-level validation. validate(data) object-level validation. ModelSerializer(Meta) creates serializer with fields from model. fields exclude read_only_fields extra_kwargs are Meta options. HyperlinkedModelSerializer uses hyperlinks. ListSerializer(allow_empty max_length min_length) serializes multiple objects. CustomListSerializer.create(validated_data) custom create. CustomListSerializer.update(instance validated_data) custom update. BaseSerializer(to_representation to_internal_value create update) for alternative serialization. to_representation(instance) serializes object. to_internal_value(data) deserializes data. fields allows dynamic field modification. DynamicFieldsModelSerializer(fields) Example. REST_FRAMEWORK: Django setting for REST framework configuration. api_settings: Accesses REST framework settings. DEFAULT_RENDERER_CLASSES: Default renderers. DEFAULT_PARSER_CLASSES: Default parsers. DEFAULT_AUTHENTICATION_CLASSES: Default authenticators. DEFAULT_PERMISSION_CLASSES: Default permissions. DEFAULT_PAGINATION_CLASS: Default pagination class. PAGE_SIZE: Default page size. EXCEPTION_HANDLER: Custom exception handler. Status codes in rest_framework.status. Helper functions: is_informational(), is_success(), is_redirect(), is_client_error(), is_server_error(). APIRequestFactory: .get(), .post(), .put(), .patch(), .delete(), .head(), .options(). format argument for content type (default: multipart). force_authenticate(request, user=None, token=None). APIClient: .get(), .post(), .put(), .patch(), .delete(), .head(), .options(). .login(username, password), .logout(), .credentials(HTTP_AUTHORIZATION), .force_authenticate(user=None, token=None). RequestsClient: Fully qualified URLs required. CoreAPIClient: schema = client.get('http://testserver/schema/'). client.action(schema, [\'organisations\', \'create\'], params). API Test cases: APISimpleTestCase, APITransactionTestCase, APITestCase, APILiveServerTestCase, URLPatternsTestCase. Response: response.data for data, response.render() before content access. Settings: TEST_REQUEST_DEFAULT_FORMAT, TEST_REQUEST_RENDERER_CLASSES. Throttling: Controls request rates. Settings: DEFAULT_THROTTLE_CLASSES, DEFAULT_THROTTLE_RATES. AnonRateThrottle: Throttles unauthenticated users by IP. UserRateThrottle: Throttles users by user ID (or IP for unauthenticated). ScopedRateThrottle: Throttles specific API parts. BaseThrottle: Abstract base for custom throttles. Methods: allow_request(request, view) -> bool, wait(). Exceptions: Throttled. UniqueValidator: Enforces unique=True. Args: queryset (required), message (optional), lookup (optional, default 'exact'). UniqueTogetherValidator: Enforces unique_together constraints. Args: queryset (required), fields (required), message (optional). UniqueForDateValidator, UniqueForMonthValidator, UniqueForYearValidator: Enforce unique_for_date, unique_for_month, unique_for_year constraints. Args: queryset (required), field (required), date_field (required), message (optional). CurrentUserDefault: Default for current user, requires 'request' in serializer context. CreateOnlyDefault: Default only during create operations. Args: default value or callable. Custom Validators: Function-based: Callable that raises serializers.ValidationError. Class-based: __call__ method. requires_context=True: __call__ receives serializer_field or serializer. Versioning: request.version attribute contains version string. DEFAULT_VERSIONING_CLASS setting defines versioning scheme. Schemes: AcceptHeaderVersioning, URLPathVersioning, NamespaceVersioning, HostNameVersioning, QueryParameterVersioning, Custom (BaseVersioning, determine_version). reverse(viewname, request=request): Reverses URLs, applies versioning. ViewSet combines related views logic into a single class. Actions: list, create, retrieve, update, partial_update, destroy. ViewSet.as_view(mapping) binds actions to methods. ModelViewSet provides list, retrieve, create, update, partial_update, destroy. GenericViewSet inherits GenericAPIView, provides get_object, get_queryset but no actions. ReadOnlyModelViewSet provides list, retrieve. @action(detail=True/False, methods=[]) marks methods for routing. reverse_action(action_name, args) generates action URLs. APIView: Subclass of Django's View. Attributes: renderer_classes, parser_classes, authentication_classes, throttle_classes, permission_classes, content_negotiation_class. Methods: get_renderers, get_parsers, get_authenticators, get_throttles, get_permissions, get_content_negotiator, get_exception_handler, check_permissions, check_throttles, perform_content_negotiation, initial, handle_exception, initialize_request, finalize_response, dispatch. @api_view(http_method_names=['GET']): Decorator for function views. @renderer_classes, @parser_classes, @authentication_classes, @throttle_classes, @permission_classes: Decorators for API policies. @schema: Decorator for schema generation. SnippetSerializer(serializers.Serializer): create(validated_data) -> Snippet update(instance, validated_data) -> Snippet. SnippetSerializer(SnippetSerializer):Meta: model=Snippet, fields=[id, title, code, linenos, language, style]. Exceptions: APIException, ParseError, AuthenticationFailed, NotAuthenticated, PermissionDenied, NotFound, MethodNotAllowed, NotAcceptable, UnsupportedMediaType, Throttled, ValidationError. Request: Extends HttpRequest, provides request.data (handles POST, PUT, PATCH data) instead of request.POST. Response: TemplateResponse, content negotiation for correct client content-type. status module: HTTP status codes (e.g., HTTP_400_BAD_REQUEST). @api_view: Decorator for function-based views. APIView: Class for class-based views. Format suffixes: e.g., /snippets.json, /snippets.api. Format control via Accept header or format suffix. Can handle JSON or form data. APIView: Base class for API views. Methods: get, post, put, delete. Parameters: request, format, pk. Return: Response. SnippetList: GET: list snippets. POST: create snippet. SnippetDetail: GET: retrieve snippet. PUT: update snippet. DELETE: delete snippet. Exceptions: Http404. GenericAPIView: Base for mixin and generic views. Mixins: ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin. Generic views: ListCreateAPIView, RetrieveUpdateDestroyAPIView. Model: Snippet. Fields: owner (ForeignKey to User), highlighted (TextField). UserSerializer: fields: id, username, snippets. SnippetList: perform_create(serializer): serializer.save(owner=self.request.user). SnippetSerializer: fields: owner (ReadOnlyField, source='owner.username'). Permissions: IsOwnerOrReadOnly(BasePermission). has_object_permission(request, view, obj): SAFE_METHODS return True, else return obj.owner == request.user. Views: UserList (ListAPIView), UserDetail (RetrieveAPIView). Authentication: SessionAuthentication, BasicAuthentication. Endpoints: /users/, /users// api_root(request format=None): Returns API root. SnippetHighlight(generics.GenericAPIView): Displays highlighted snippets. SnippetSerializer: HyperlinkedModelSerializer for snippets. UserSerializer: HyperlinkedModelSerializer for users. HyperlinkedModelSerializer: No id field, includes url field, relationships use HyperlinkedRelatedField. ViewSet: Provides actions, not method handlers. Router: Handles URL conf. UserViewSet(ReadOnlyModelViewSet): Provides list and retrieve actions. SnippetViewSet(ModelViewSet): Provides list, create, retrieve, update, and destroy actions. @action(detail=True, renderer_classes=[renderers.StaticHTMLRenderer]) highlight: Custom action. UserSerializer: Serializer for User model (fields: url, username, email, groups). GroupSerializer: Serializer for Group model (fields: url, name). UserViewSet: ViewSet for User (GET/EDIT). GroupViewSet: ViewSet for Group (GET/EDIT). urls.py: Registers UserViewSet and GroupViewSet with DefaultRouter. Pagination can be enabled via REST_FRAMEWORK settings (DEFAULT_PAGINATION_CLASS, PAGE_SIZE). Example: curl -u admin http://127.0.0.1:8000/users/
